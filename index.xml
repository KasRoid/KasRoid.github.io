<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SDY</title>
    <link>https://kasroid.github.io/</link>
    <description>Recent content on SDY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 07 Nov 2020 10:42:13 +0900</lastBuildDate><atom:link href="https://kasroid.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Just 10-Sec Privacy Policy</title>
      <link>https://kasroid.github.io/just-10-sec-privacy-policy/</link>
      <pubDate>Mon, 28 Dec 2020 07:38:09 +0900</pubDate>
      
      <guid>https://kasroid.github.io/just-10-sec-privacy-policy/</guid>
      <description>Privacy Policy Doyoung Song built the Just 10-Sec app as a Free app. This SERVICE is provided by Doyoung Song at no cost and is intended for use as is. This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service. If you choose to use my Service, then you agree to the collection and use of information in relation to this policy.</description>
    </item>
    
    <item>
      <title>Just 10-Sec: Support</title>
      <link>https://kasroid.github.io/just-10-sec/</link>
      <pubDate>Sat, 26 Dec 2020 23:53:30 +0900</pubDate>
      
      <guid>https://kasroid.github.io/just-10-sec/</guid>
      <description>Intro Just 10-Sec is made for users who wants AR-Gaming experience.</description>
    </item>
    
    <item>
      <title>UIKit - Date Picker 를 이용해 Timer 구현하기</title>
      <link>https://kasroid.github.io/posts/ios/20201107-uikit-timer-with-date-picker/</link>
      <pubDate>Sat, 07 Nov 2020 10:42:13 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201107-uikit-timer-with-date-picker/</guid>
      <description>본 포스팅은 다음 버전을 기준으로 작성되었습니다.
Swift 5.3 iOS 14.1 Intro 오늘은 DatePicker 에서 제공하는 Mode 중 하나인 .countDownTimer 를 사용해 실제로 구동 가능한 타이머를 만들어보겠습니다.
Prerequisite 타이머 구현 및 실습을 위해 DatePicker 를 배치하고, 상단에는 타이머의 남은 시간을 표시할 UILabel 을, 하단에는 사용자가 설정한 시간을 기준으로 타이머 구동을 시작할 UIButton 을 배치했습니다.
import UIKit class CountDownViewController: UIViewController { let label = UILabel() let picker = UIDatePicker() let button = UIButton(type: .</description>
    </item>
    
    <item>
      <title>UIKit - Date Picker 사용하기, iOS 14 변경사항 정리</title>
      <link>https://kasroid.github.io/posts/ios/20201030-uikit-date-picker/</link>
      <pubDate>Fri, 30 Oct 2020 17:12:51 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201030-uikit-date-picker/</guid>
      <description>본 포스팅은 다음 버전을 기준으로 작성되었습니다.
Swift 5.3 iOS 14.1 Intro 이전 포스트에서 Date 에 관해 알아보았으니 이번에는 사용자가 아이폰에서 날짜를 고를 때 자주 마주치게되는 인터페이스 중 하나인 DatePicker 에 대해 같이 공부해보겠습니다.
iOS 14 가 업데이트 되면서 기존까지와는 다른 스타일의 DatePicker 가 추가되었는데요. 아이폰 기본 알람앱을 자주 사용하는 분이라면 이미 알고 계셨을거에요 ㅎㅎ 아무튼 공부하는 김에 이 새로운 스타일의 DatePicker 도 함께 알아보도록 할게요.
Prerequisite 먼저 실습을 위해 간단하게 ViewController 위에 DatePicker 를 올려놓았습니다.</description>
    </item>
    
    <item>
      <title>UIKit - Calendar 와 Date 기초 익히기</title>
      <link>https://kasroid.github.io/posts/ios/20201026-uikit-handling-date/</link>
      <pubDate>Mon, 26 Oct 2020 22:57:17 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201026-uikit-handling-date/</guid>
      <description>Intro App 을 만들다보면 날짜를 다뤄야하는 상황을 종종 마주치게 되는데요. 그동안은 원하는 정보를 적당히 구글에서 찾아 문제를 해결하고 따로 공부하는 시간을 가져본 적이 없었습니다. 날짜는 여러가지 앱에서 사용되는 빈도가 높은만큼 제대로 공부하고 지나가면 앞으로 도움이 많이 될 것 같아 공부해 봅니다.
Prerequisite Cocoa Touch Framework 에는 날짜를 구현할 수 있는 다양한 방법이 존재하는데요. Swift 언어 이전에는 class 타입으로 구성되어 있는 구현방식을 제공했습니다. 아마 개발을 시작한지 어느정도 되었다면 자주 보았을 만한 NS 접두어로 시작하는 것들이 바로 그것이에요 ㅎㅎ</description>
    </item>
    
    <item>
      <title>UIKit - Delegate Pattern 이해하기</title>
      <link>https://kasroid.github.io/posts/ios/20201010-uikit-delegate-pattern/</link>
      <pubDate>Sat, 10 Oct 2020 21:34:44 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201010-uikit-delegate-pattern/</guid>
      <description>본 포스팅은 Swift 5.3 기준으로 작성되었습니다.
Intro 약 두달간 진행하던 Market Kurly 서비스를 클론하는 프로젝트가 끝나, 오늘부터는 기존에 어느정도 공부하고 사용도하고 있었지만 완벽하게 숙지를 한 것은 아닌 부분들을 다시 복습하고 이해도를 높이는 것을 목표로 한동안 공부해보려고 합니다. 그럼 오늘은 처음 배울 때 이해하기 까다로웠던 부분 중 하나인 Delegate Pattern 에 대해 복습하는 시간을 가져보도록 하겠습니다. iOS 개발 에서는 정말 자주 쓰이고 중요한 개념이므로 여러분들도 혹시 아직 완벽히 이해한게 아니라면 같이 공부해보도록 해요~</description>
    </item>
    
    <item>
      <title>WebKit - 카카오 우편번호 서비스 구현하기 with UIKit</title>
      <link>https://kasroid.github.io/posts/ios/20200916-webkit-search-address-with-kakao-with-uikit/</link>
      <pubDate>Wed, 16 Sep 2020 19:04:53 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200916-webkit-search-address-with-kakao-with-uikit/</guid>
      <description>본 포스팅은 Swift 5.3 기준으로 작성되었습니다.
Intro 저는 요새 Market Kurly 앱을 클론하는 프로젝트를 진행하고 있는데요. 회원가입 부분에서 Kakao 우편변호 찾기 기능을 지원하더라고요. 사용자로서는 분명히 사용해본 경험이 있는 것 같은데 막상 구현하는 방법은 배운적도 생각해본 적도 없었습니다 ㅎㅎ 어쨌든 중요한건 지금 어떻게든 구현을 해야한다는 것이고, 마켓컬리앱이 아니더라도 회원가입을 필요로하는 서비스라면 많이 지원하고 있는 기능이니까 잘 공부해서 정리해두면 나중에 쓸데가 많을 것 같아 포스팅을 남깁니다.
서비스 확인하기 Kakao 우편번호 서비스 웹페이지 에 접속해보면 평소 우리가 회원가입을 할 때 자주 볼 수 있었던 화면이 하나 보일거에요.</description>
    </item>
    
    <item>
      <title>UIKit - UITextField 입력글자수 제한 및 백스페이스 감지하기</title>
      <link>https://kasroid.github.io/posts/ios/20200914-uitextfield-limits-number-of-text-detecting-backspace-event/</link>
      <pubDate>Mon, 14 Sep 2020 20:03:41 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200914-uitextfield-limits-number-of-text-detecting-backspace-event/</guid>
      <description>Intro UITextField 를 아이디나 비밀번호를 사용자로부터 입력받을 때 사용하게되면 글자수 제한을 두어야하는 경우가 있는데요. 이 때 글자수 입력을 제한할 수 있는 방법에 대해 알아보도록 하겠습니다.
Prerequisite 테스트를 위해 새로운 프로젝트를 하나 생성하고 UITextField 하나를 View 의 중앙에 올려보았습니다.
import UIKit class ViewController: UIViewController { private var textField = UITextField() override func viewDidLoad() { super.viewDidLoad() configureUI() } // MARK: - UI private func configureUI() { setContraints() setAttributes() } private func setAttributes() { textField.</description>
    </item>
    
    <item>
      <title>Ranger - CLI File Browser 설치 및 사용법</title>
      <link>https://kasroid.github.io/posts/developertools/20200915-ranger-installation-and-basics/</link>
      <pubDate>Sun, 13 Sep 2020 09:53:32 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200915-ranger-installation-and-basics/</guid>
      <description>Intro GUI 환경 대신 Terminal 을 사용하게되면 대부분의 작업이 더 편리해지지만 분명히 불편한 점도 생기기 마련입니다. 그 중 가장 대표적인 예가 File Browsing 이 아닐까해요. 요즘은 컴퓨터로 작업을 할 때 어떤 작업을 하든 꼭 필수적으로 사용해야하는 Tool 이 있는 경우가 아니라면 모든 작업을 Terminal 에서 해결하려고 하는데 File Browsing 만큼은 아직도 Finder 에 의존할 때가 많습니다. 파일명을 변경하거나 복사, 이동하는 작업이 Terminal 에서는 좀 불편하더라고요.
그럼 잘 만들어놓은 Finder 를 놔두고 왜 굳이 Terminal 에서 작업을 하려고 하느냐.</description>
    </item>
    
    <item>
      <title>UIKit - UITableView 셀 크기가 자동으로 세팅되도록 구현하기</title>
      <link>https://kasroid.github.io/posts/ios/20200913-uitableview-self-sizing-cells/</link>
      <pubDate>Tue, 08 Sep 2020 11:14:25 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200913-uitableview-self-sizing-cells/</guid>
      <description>Intro UITableView 를 사용하면서 그동안은 항상 RowHeight 값을 설정하여 높이를 지정해주었었는데요. 이번 프로젝트 진행하면서 셀 크기가 상황에 따라 유동적으로 변하는 케이스가 있어 자동으로 세팅하는 방법에 대해 공부를 해봅니다 ㅎㅎ
Setup 실습을 위해 UITableViewCell 을 상속받은 CustomTableViewCell 을 생성하고 ViewController 위에 TableView 를 올려놓았습니다.
기본 세팅은 아래 코드를 참고하세요.
ViewController.swift
import UIKit class ViewController: UIViewController { // MARK: - Properties private let tableView = UITableView() override func viewDidLoad() { super.viewDidLoad() configureUI() } // MARK: - UI private func configureUI() { view.</description>
    </item>
    
    <item>
      <title>Terminal - Mac 의 파일권한 시스템 이해하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200908-terminal-understanding-of-organization-of-files-in-mac/</link>
      <pubDate>Tue, 08 Sep 2020 08:28:46 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200908-terminal-understanding-of-organization-of-files-in-mac/</guid>
      <description>Intro Mac 시스템 내부의 모든 파일은 User 라고하는 파일의 관리자가 명시되어 있으며, 관리자 외의 다른 User 는 파일의 읽기 및 쓰기 권한에 제한을 받을 수 있습니다. 사실 맥북같은 경우 혼자 사용하기 때문에 이런 권한들에 대해 거의 관심을 가져본 적이 없지만, 그래도 기본 개념정도로 알아두고 지나가면 좋을 것 같아 정리를 해볼려고요! ㅎㅎ
Finder 에서 User 및 권한 확인하기 먼저 내 맥북에는 어떤 User 가 있는지 확인을 해보겠습니다. Finder 를 열고 최상위 루트로 가보면 아래 스크린샷처럼 유저 목록이 보일거에요.</description>
    </item>
    
    <item>
      <title>Terminal - 기본적인 사용법 알아보기</title>
      <link>https://kasroid.github.io/posts/developertools/20200907-terminal-first-fundamental-commands/</link>
      <pubDate>Mon, 07 Sep 2020 11:49:00 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200907-terminal-first-fundamental-commands/</guid>
      <description>Intro 제가 개발은 iOS 만 해봤지만 그래도 공부하다보니 느낀 것이 어떤 개발을 하더라도 한가지 꼭 사용할 줄 알아야하는 툴이 Terminal 이 아닐까 싶습니다. Git 만 사용하려고해도 Terminal 을 사용해야 하잖아요? 대체방법이 없는 것은 아니지만&amp;hellip;
그래서 이왕 사용하는거 좀 더 체계적으로 제대로 사용할 수 있으면 좋겠다 싶어서 공부를 시작했습니다. 그리고 터미널 잘 쓰면 왠지 멋있어 보이기도 하잖아요 ㅋㅋㅋ 그러니까 오늘부터 같이 공부해서 터미널 고수가 되어보아요~
그럼 Terminal 의 커맨드는 어떻게 구성되는지, 그리고 알아두면 좋을만한 매우 기초적인 커맨드를 공부해 볼게요.</description>
    </item>
    
    <item>
      <title>Vim - 코드블럭에 Swift Syntax 적용하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200907-vim-applying-swfit-syntax-in-code-block/</link>
      <pubDate>Mon, 07 Sep 2020 02:46:53 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200907-vim-applying-swfit-syntax-in-code-block/</guid>
      <description>Intro 그래도 명색이 iOS 개발자인데 여태 Vim 을 사용할 때 Swift Syntax Highlighting 없이 글을 쓰고 있었어요 ㅎㅎ 그래서 오늘은 Vim 에 Swift Syntax 를 적용할 수 있는 방법을 공부해볼까 합니다. Plugin 하나만 설치해주면 끝나는거라 쉽게 해결할 수 있을 것 같아요.
Prerequisite 이번 포스팅에서 Plugin 을 설치하는 과정은 Vundle 로 진행되므로 만약 Vundle 에 익숙하지 않다면 Vim - Vundle 및 Markdown Plugin 설치하기 포스팅을 먼저 참고해주세요.
swift.vim 설치하기 Swift Syntax 를 적용하기 위해서는 swift.</description>
    </item>
    
    <item>
      <title>Hugo - 블로그 Naver Search Advisor 에 등록하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200906-hugo-register-in-naver-search-advisor/</link>
      <pubDate>Sun, 06 Sep 2020 13:09:05 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200906-hugo-register-in-naver-search-advisor/</guid>
      <description>Intro 이번 포스팅은 블로그 검색 등록하기 시리즈 2회분 Naver Search Advisor 입니다. 전체적인 흐름은 Google 에 등록할 때와 비슷하니까 이전 포스팅에서 넘어온 분들은 진행이 조금 더 수월할 것 같아요. 그럼 바로 시작할게요.
Naver Search Advisor Naver Search Advisor 에 접속합니다. 다음과 같은 화면이 보이네요.
스크롤을 조금 아래로 내려 웹마스터 도구 사용하기 버튼을 눌러주세요.
이용동의 화면은 언제나처럼 읽지 않고 동의버튼을 눌러주고요 ㅋㅋㅋ 이거 읽는 분 손?
다음 화면에서는 내 블로그 주소를 입력하고 검색창 가장 우측에(x 표시 옆) 다음으로 넘어가기 같지 않은 버튼을 눌러주세요.</description>
    </item>
    
    <item>
      <title>UIKit - UITableView 를 Grouped Style 로 지정했을 때 생기는 Footer 없에기</title>
      <link>https://kasroid.github.io/posts/ios/20200905-uikit-deleting-unwanted-spaces-in-grouped-style-uitableview/</link>
      <pubDate>Sat, 05 Sep 2020 16:17:28 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200905-uikit-deleting-unwanted-spaces-in-grouped-style-uitableview/</guid>
      <description>Intro UITableView 를 별 다른 설정없이 인스턴스화해서 사용해보면 Style 기본값이 .plain 으로 설정되어 있어 Header 를 사용하는 경우 스크롤을 하더라도 바로 사라지는 것이 아니라 계속 남아있게 되는데요. 이것을 해결하려면 tableView 의 Style 을 .grouped 로 지정해주면 Header 가 다른 셀들과 같은 방식으로 스크롤되게 됩니다.
그런데 이렇게 사용하면 문제점이 하나 발생하는데 우리는 Footer 가 필요없고 Header 만 필요한 경우에도 자동적으로 Footer 까지 생성되는 상황이 발생하는거에요. 이것 때문에 골치를 여러번 썩으면서도 공부해서 해결하기보다 바쁘다는 핑계로 여태까지 우회하는 방법으로 해결을 했었거든요.</description>
    </item>
    
    <item>
      <title>CocoaPods - 명령어 알아보기</title>
      <link>https://kasroid.github.io/posts/ios/20200905-cocoapods-basic-commands/</link>
      <pubDate>Sat, 05 Sep 2020 11:06:30 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200905-cocoapods-basic-commands/</guid>
      <description>Intro CocoaPods - 설치 및 라이브러리 적용하기 포스팅에서 간단하게 CocoaPods 를 설치하고 Library 를 적용하는 법가지 알아보았었는데요. 이번에는 CocoaPods 에서 사용할 수 있는 커맨드들을 같이 한번 공부해보도록 하겠습니다.
Podfile 생성하기 우리가 CocoaPods 를 설치하는 이유는 외부 라이브러리를 적용해서 사용하기 위해서잖아요? 그렇다면 가장 먼저할 일은 당연히 어떤 라이브러리를 설치하고 싶은지 CocoaPods 에게 알려주는 것입니다. 그래서 CocoaPods 는 그 목록을 Podfile 을 통해서 받게되는데요. 다음은 이 Podfile 을 생성하는 명령어입니다.
pod init 설치를 희망하는 프로젝트 폴더 내에서 위 커맨드를 실행해보면 Podfile 이 생성된 것을 확인할 수 있을거에요.</description>
    </item>
    
    <item>
      <title>Firebase - Sign in with Google 구현하기 with UIKit</title>
      <link>https://kasroid.github.io/posts/ios/20200904-sign-in-with-google-uikit/</link>
      <pubDate>Fri, 04 Sep 2020 22:22:20 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200904-sign-in-with-google-uikit/</guid>
      <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다. · Swift 5.2.4 · Firebase 6.29.0
Intro 이번에는 Google 아이디로 로그인할 수 있도록 구현해볼거에요. Apple 로그인은 Xcode 에서 Native 로 지원이 되지만 Google 로그인은 그렇지 않기 때문에 Firebase 를 사용해야 해서 조금 더 복잡한 편입니다. 그래도 천천히 따라해보시면 문제없을 거에요!
CocoaPods 설치 만약에 여러분이 CocoaPods 를 설치한 적이 없다면 Xcode 프로젝트에 Firebase 를 연동하기 위해 CocoaPods 가 우선적으로 설치되어 있어야합니다. 설치 방법은 CocoaPods - 설치 및 라이브러리 적용하기 포스팅을 참고해주세요.</description>
    </item>
    
    <item>
      <title>Vim - Normal Mode 에서 자동으로 영문전환하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200904-vim-switching-language-inputs/</link>
      <pubDate>Fri, 04 Sep 2020 11:32:51 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200904-vim-switching-language-inputs/</guid>
      <description>Intro 주력 Text Editor 로 Vim 을 사용하면서 매일 마주치는 문제점 하나가 바로 Insert Mode 에서 한글을 작성하다 Normal Mode 로 돌아오면 다시 영문으로 전환해주지 않는 이상 어떤 커맨드도 먹히지 않는다는 것 이었습니다. 제 경우에는 블로그 글을 Vim 에서 작성하고 있고, 글을 쓸 때 한글의 비중이 압도적으로 높다보니 Insert Mode 에서 Normal Mode 로 돌아올 때마다 항상 언어상태를 확인해줘야하고 이것은 Work Flow 에 치명적인 영향을 줘서 생산성을 떨어뜨리는 결과를 낳게되더라고요.</description>
    </item>
    
    <item>
      <title>Hugo - 블로그 Google Search Console 에 등록하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200903-hugo-register-in-google-search-console/</link>
      <pubDate>Thu, 03 Sep 2020 15:07:41 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200903-hugo-register-in-google-search-console/</guid>
      <description>Intro 우리가 블로그를 작성하는 이유가 여러가지 있겠지만 그 중에 하나는 내가 아는 정보들을 다른 사람들과 공유하고자 하는 목적이 있잖아요. 그래서 오늘은 Hugo 로 블로그를 관리할 때 반드시 설정해주어야 할 부분 중 하나인 SEO(Search Engine Optimization) 라 불리는 검색 엔진 최적화에 대해 함께 공부해보도록 하겠습니다. Tistory 나 Naver 같은 블로그를 사용하면 이런 처리들을 우리가 직접할 필요가 없어서 생소할 수도 있는 부분이에요. 하지만 이 곳들도 우리가 직접하지 않을 뿐 뒤에서는 같은 처리를 해주고 있답니다.</description>
    </item>
    
    <item>
      <title>Vim Plugin - Vim Airline</title>
      <link>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-vim-airline/</link>
      <pubDate>Wed, 02 Sep 2020 22:07:46 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-vim-airline/</guid>
      <description>또 새로운 Vim Plugin 을 소개해드리려고 왔어요 ㅎㅎㅎ 요즘 Vim 의 매력에 푹 빠져서 열심히 연습 중이고 기본적인 사용법들도 점점 손에 익어가니까 키보드를 무릎 위에 올려놓고 글을 쓰는 맛이 있습니다. 그래서 오늘 소개할 Plugin 은 Vim-Airline 이라는 플러그인이에요. Vim 아래쪽에 Status Bar 를 좀 더 보기 좋게 만들어주고 윗쪽에 Tab Bar 와 비슷한 Buffer 라는 것을 만들어서 우리가 이번 작업에서 열어본 파일을 기억하여 파일 간의 이동을 쉽게할 수 있도록 도와줍니다. 설치해서 손해볼게 없는 Plugin 인 것 같으니까 바로 설치해보도록 할게요.</description>
    </item>
    
    <item>
      <title>Vim Plugin - NERDTree</title>
      <link>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-nerdtree/</link>
      <pubDate>Wed, 02 Sep 2020 10:16:39 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-nerdtree/</guid>
      <description>Vim 을 쓰다보니 또 VSCode 보다 불편한 점을 발견할 수 있었는데요. 바로 VSCode 에서 애용하던 File Navigattion System 이 없다는 것이었습니다. 바로 이미지 좌측에 보이는 저것이에요.
자주 여러 파일을 이동해야하는 경우에 Navigation System 이 없다는 이유만으로 자꾸 다시 VSCode 로 손이 가게 되더라고요. 그래서 Vim 에서는 해결방법이 없을지 찾아보다가 알게된 것이 바로 NERDTree 입니다. 바로 Vim 만의 파일탐색기 같은 것이에요. 제가 메인 텍스트 에디터로 Vim 을 사용하려는 이유 중 한가지가 작업을 할 때 Terminal 에서 키보드만으로 거의 모든 작업을 진행할 수 있다는 것인데요.</description>
    </item>
    
    <item>
      <title>Vim - 여러가지 유용한 설정 적용하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200831-vim-bacis-configurations/</link>
      <pubDate>Mon, 31 Aug 2020 21:45:33 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200831-vim-bacis-configurations/</guid>
      <description>오늘은 Vim 을 사용할 때 기본적으로 설정해두고 사용하면 좋을만한 간단면서도 유용한 설정들에 대해 공부해보도록 하겠습니다.
Vim 의 기본 설정은 macOS 기준 Home Directory 에 위치한 .vimrc 에서 설정할 수가 있습니다. 먼저 이 파일을 확인해보도록 할게요. cd 커맨드로 Home 으로 이동한 뒤에 이 파일이 존재하는지 확인해주세요. 혹시라도 이 파일이 존재하지 않는다면 그냥 만들어 주면 됩니다 ㅎㅎ 저는 처음에 이 파일이 없어서 직접 만들었어요.
이제 기본적으로 추가해 놓으면 좋을만한 설정들을 추가해보록 할게요.</description>
    </item>
    
    <item>
      <title>Vim - ColorScheme 적용 및 직접 색 변경하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200830-vim-appying-colorscheme-changing-backgroudn-colors/</link>
      <pubDate>Sun, 30 Aug 2020 02:36:53 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200830-vim-appying-colorscheme-changing-backgroudn-colors/</guid>
      <description>이번에는 Vim 에서 외부 테마를 다운로드 받아 적용하고 Syntax Highlighting 색상을 좀 더 이쁘게 변경해보도록 하겠습니다. 그래도 Terminal 을 통해 글을 쓰는데 최소한 어느정도는 이뻐야 글 쓸 맛이 더 나겠죠?? ㅋㅋㅋ 그런데 지금 제가 사용하는 Vim 의 상태는&amp;hellip;
이 모양입니다. 한 숨이 나옵니다&amp;hellip; 원색을 너무 많이 사용해서 그런건지 오히려 눈에 방해가 되는 그런 느낌도 들고요. 난 이제 그만 여기서 탈출해야겠어
그럼 본격적으로 설치해볼까요~
테마 고르기 먼저 구글에서 Vim ColorScheme 을 검색해 여러분 스타일에 맞는 테마를 찾아보세요.</description>
    </item>
    
    <item>
      <title>Vim - Vundle 및 Markdown Plugin 설치하기</title>
      <link>https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/</link>
      <pubDate>Sat, 29 Aug 2020 16:12:11 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/</guid>
      <description>제가 Tistory 로 블로그를 시작했지만 Hugo 로 넘어오게된 이유가 몇 가지 있는데 그 중 가장 큰 비중을 차지하는 두가지가 하나는 Tistory 가 Markdown 을 제대로 지원하지 않고, 코드블럭 처리를 고려하면 글을 Tistory 전용 에디터에서 쓰는 것이 반 강제되는 것이었는데요. Tistory 에디터로 글을 쓰다보면 텍스트에 기본적인 강조 처리하는 것들도 전부 마우스로 처리해야하는데 매번 키보드에서 손이 움직이는게 여간 성가신 것이 아니었거든요. 그래서 포스트를 작성하는 와중에 이 모든걸 Terminal 에서 처리할 수 있으면 어떨까 하는 생각을 종종하게 되었고 결국 Hugo 로 블로그를 관리하는 것으로 결정했습니다.</description>
    </item>
    
    <item>
      <title>System - Sign in With Apple 구현하기 with UIKit</title>
      <link>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-uikit/</link>
      <pubDate>Sat, 29 Aug 2020 11:00:14 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-uikit/</guid>
      <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
이번 새로운 프로젝트 진행 중에 소셜 로그인 서비스를 제공하기로 결정되었는데요. 앱에서 소셜 로그인을 하나라도 제공하게 되면 Apple 로그인도 반드시 지원해야 합니다. 요즘 로그인이 필요한 앱들은 웬만하면 소셜 로그인도 지원하는 추세니까 Apple 로그인도 구현해야되고&amp;hellip; 그러니까 지금 구현하는 방법을 알아두면 쓸 일이 많을거에요. 그럼 같이 한번 공부해볼까요~~
Apple Developer Documentation 처음 접하는 내용은 무엇보다 공식문서를 먼저 살펴봐야겠죠!
이런저런 내용이 있긴한데 우리에게 필요한 부분은 App 과 Services 에 유저가 쉽게 로그인 할 수 있도록 도와주는 Framework 라는 정도인 것 같아요.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://kasroid.github.io/about-me/</link>
      <pubDate>Mon, 24 Aug 2020 17:04:22 +0900</pubDate>
      
      <guid>https://kasroid.github.io/about-me/</guid>
      <description>This is About Me Page. I&amp;rsquo;m going to upload my career.</description>
    </item>
    
    <item>
      <title>CocoaPods - 설치 및 라이브러리 적용하기</title>
      <link>https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/</link>
      <pubDate>Sun, 23 Aug 2020 19:14:16 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/</guid>
      <description>오늘은 CocoaPods 가 무엇인지 알아보도록 하겠습니다.
개발을 할 때 모든 것을 스스로 만드는 것도 좋지만 필요에 따라 Library 를 써서 시간과 노력을 절약하고 다른 곳에 좀 더 신경을 쓰는 것이 좋을 때도 있을겁니다. 하지만 그렇게 Library 사용 빈도가 점점 늘게되면 나중에는 Library 를 찾거나 관리하는데 시간이 많이 소모되게 됩니다. 그럼 아무래도 Library 를 쓰는 의미가 많이 퇴색되겠죠? 그래서 Xcode 에서 이런 Library 관리를 쉽게 할 수 있도록 도와주는 것이 CocoaPods 입니다.</description>
    </item>
    
    <item>
      <title>Homebrew - 설치 및 기본 사용법 익히기</title>
      <link>https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/</link>
      <pubDate>Sun, 23 Aug 2020 16:48:19 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/</guid>
      <description>오늘 소개할 Homebrew 는 여러가지 종류의 프로그램을 설치하고 삭제할 수 있게 도와주는 툴입니다. 제가 개발자로 커리어를 전환하고나서 알게된 가장 유용한 툴이고 가장 애용하는 툴이기도 합니다. 조금만 익숙해지면 정말 편리하고 강력한 툴이기 때문에 시간이 나면 언젠가 꼭 한번 소개하고 싶었는데요. 그게 오늘이네요! ㅎㅎ
Homebrew 는 macOS 의 Package Manager 입니다. 쉽게 말해서 일종의 프로그램 관리자 같은 역할이라 생각하면 좋을 것 같아요. 왠만한 모든 상용 프로그램의 설치 및 삭제, 그리고 업데이트 관리까지 Terminal 을 통해 Homebrew 하나로 해결할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Firebase - Xcode 프로젝트와 연동하기</title>
      <link>https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/</link>
      <pubDate>Mon, 10 Aug 2020 01:19:46 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/</guid>
      <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다.
· Firebase 6.29.0
· Swift 5.2.4
Intro Firebase 한 번쯤 들어보지 않으셨나요? 초보 개발자가 모바일 앱을 개발하고 개인 앱 서버를 운영하는데 있어 빠질 수 없는 것이 Firebase 가 아닐까 합니다. 속도에 조금 불만이 있긴 하지만 사실 백엔드를 모르는 개발자가 이렇게 쉽고 간편하게 회원가입부터 데이터 관리까지 할 수 있는 서버를 그것도 일정수준까지는 무료로 운영할 수 있게 해주는 서비스가 또 어디있을까요? 이 서비스가 없었으면 저는 지금 Python 도 같이 배우고 있었을 것 같네요.</description>
    </item>
    
    <item>
      <title>SwiftUI Basics - Button 과 List 생성하기</title>
      <link>https://kasroid.github.io/posts/ios/20200802-swiftui-basics-button-list/</link>
      <pubDate>Sun, 02 Aug 2020 01:42:41 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200802-swiftui-basics-button-list/</guid>
      <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
이번 포스팅에서는 Button 과 List (UIKit 의 UITableView 와 동일) 를 생성하는 방법을 공부해보도록 할게요. SwiftUI 에서는 Button 과 List 를 구현하는 코드도 단 몇 줄이면 충분합니다. 이게 다 오토레이아웃이 자동 적용되서 그런것 같아요.
Button 이전에 공부할 때 Text 가 View 라고했었으니까 Button 도 당연히 View 의 일종일거라 생각하고 따로 찾아보진 않으려고 했거든요? 근데 그래도 공식문서를 한번쯤 보는게 예의가 아닐까 싶어 찾아보니 View 가 아니였습니다.</description>
    </item>
    
    <item>
      <title>SwiftUI Basics - Stacks 와 Spacer 사용하기</title>
      <link>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-stacks-spacer/</link>
      <pubDate>Fri, 31 Jul 2020 11:33:35 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-stacks-spacer/</guid>
      <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
SwiftUI 에서는 자동으로 뷰의 레이아웃을 잡아주는 기능이 매우 강화되면서 Stacks 의 사용이 더 중요해졌습니다. Stack 은 현재 총 3종류가 있으며 HStack, VStack, ZStack 으로 구성됩니다. 함께 공식 개발자 문서를 보려고 했는데 너무 간단하게 나와있어서 의미가 없을 것 같아요 ㅎ 그냥 하나씩 알아보죠 ㅎㅎㅎ
HStack HStack 은 Horizontal Stack 으로 우리가 뷰를 가로로 배치할 수 있게 도와주는 View 입니다. 사용법도 이보다 쉬울 수가 없어요. 그냥 HStack 을 중괄호로 열고 그 안에 원하는 내용을 넣으면 됩니다.</description>
    </item>
    
    <item>
      <title>SwiftUI Basics - Text 와 Image 생성하기</title>
      <link>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-text-image/</link>
      <pubDate>Fri, 31 Jul 2020 10:38:35 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-text-image/</guid>
      <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
이번 포스팅에서는 Text, Image, Stack, Button, List 를 SwiftUI 환경에서 생성하는 법을 간단하게 알아보도록 하겠습니다. SwiftUI 의 코드가 얼마나 간결해졌냐면 저 instance 들을 생성하기 위해 우리가 알아야하는 단어는 정말 저게 끝이에요. 저 단어들과 괄호를 조합하여 간단하게 instance 를 생성할 수 있습니다. 레이아웃도 자동으로 잡아주고요!
Text 텍스트를 생성하는 법은 Xcode 를 실행하자마자 바로 알 수 있습니다. 기본적으로 &amp;ldquo;Hello World&amp;rdquo; 가 써져있으니까요.
그럼 텍스트를 표시하기 위해 필요한 과정을 UIKit 과 한번 비교해볼까요?</description>
    </item>
    
    <item>
      <title>SwiftUI Basics - 프로젝트 생성 및 기본제공 코드 분석</title>
      <link>https://kasroid.github.io/posts/ios/20200730-swiftui-basics-create-project-analyze-code/</link>
      <pubDate>Thu, 30 Jul 2020 23:56:35 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200730-swiftui-basics-create-project-analyze-code/</guid>
      <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
SwiftUI 에서 사용자가 확인할 화면을 생성하는 것은 UIKit 과 다르게 확연히 간단해졌습니다.
첫 눈에 바로 들어오는 특징으로는 인스턴스를 생성 시에 더 이상 UI 접두사를 붙이지 않아도 된다는 것이네요. 그리고 내부적으로 바뀐 큰 차이점은 UIKit 의 인스턴스들은 대부분 class 형태로 구성되어있던 것과 다르게 SwiftUI 의 인스턴스들은 대부분 struct 형태로 구현되어있습니다.
그럼 프로젝트를 생성하고 달라진 점들을 직접 살펴보는 것이 좋겠어요. 프로젝트 생성 시 User Interface 를 SwiftUI 로 설정하고 시작하게 되면 다음과 같은 화면이 보입니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kasroid.github.io/google66ca37733946af8a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kasroid.github.io/google66ca37733946af8a/</guid>
      <description>google-site-verification: google66ca37733946af8a.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kasroid.github.io/naver4322329b60b9ef8fa8632e9af72cd83b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kasroid.github.io/naver4322329b60b9ef8fa8632e9af72cd83b/</guid>
      <description>naver-site-verification: naver4322329b60b9ef8fa8632e9af72cd83b.</description>
    </item>
    
  </channel>
</rss>
