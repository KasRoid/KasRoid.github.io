<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>iOS on Developer Kas</title>
        <link>https://kasroid.github.io/posts/ios/</link>
        <description>Recent content in iOS on Developer Kas</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 25 Aug 2020 01:25:02 +0900</lastBuildDate>
        <atom:link href="https://kasroid.github.io/posts/ios/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>UIKit - UITextField 입력글자수 제한 및 백스페이스 감지하기</title>
            <link>https://kasroid.github.io/posts/ios/20200914-uitextfield-limits-number-of-text-detecting-backspace-event/</link>
            <pubDate>Mon, 14 Sep 2020 20:03:41 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200914-uitextfield-limits-number-of-text-detecting-backspace-event/</guid>
            <description>Intro UITextField 를 아이디나 비밀번호를 사용자로부터 입력받을 때 사용하게되면 글자수 제한을 두어야하는 경우가 있는데요. 이 때 글자수 입력을 제한할 수 있는 방법에 대해 알아보도록 하겠습니다.
 Prerequisite 테스트를 위해 새로운 프로젝트를 하나 생성하고 UITextField 하나를 View 의 중앙에 올려보았습니다.
import UIKit class ViewController: UIViewController { private var textField = UITextField() override func viewDidLoad() { super.viewDidLoad() configureUI() } // MARK:- UI private func configureUI() { setContraints() setAttributes() } private func setAttributes() { textField.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p><strong>UITextField</strong> 를 아이디나 비밀번호를 사용자로부터 입력받을 때 사용하게되면 글자수 제한을 두어야하는 경우가 있는데요. 이 때 글자수 입력을 제한할 수 있는 방법에 대해 알아보도록 하겠습니다.</p>
<hr>
<h2 id="prerequisite">Prerequisite</h2>
<p>테스트를 위해 새로운 프로젝트를 하나 생성하고 <strong>UITextField</strong> 하나를 <strong>View</strong> 의 중앙에 올려보았습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> textField = UITextField()

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setContraints()
        setAttributes()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        textField.layer.cornerRadius = <span style="color:#ae81ff">4</span>
        textField.layer.borderWidth = <span style="color:#ae81ff">1</span>
        textField.layer.borderColor = UIColor.lightGray.cgColor
        textField.placeholder = <span style="color:#e6db74">&#34;  Type your text here&#34;</span>
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        view.addSubview(textField)
        textField.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        NSLayoutConstraint.activate([
            textField.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            textField.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            textField.heightAnchor.constraint(equalToConstant: <span style="color:#ae81ff">50</span>),
            textField.widthAnchor.constraint(equalToConstant: <span style="color:#ae81ff">300</span>),
        ])
    }
}
</code></pre></div><p>이제 <strong>Simulator</strong> 를 실행해보면 텍스트 필드가 중앙에 보일거에요!</p>
<hr>
<h2 id="uitextfielddelegate-채택하기">UITextFieldDelegate 채택하기</h2>
<p>프로그래밍이 언제나 그렇듯이 이 기능을 구현하는 방법도 여러가지가 있습니다만, 오늘은 <strong>UITextFieldDelegate</strong> 를 채택하고 <code>textField(_:shouldChangeCharactersIn:replacementString:)</code> method 를 호출해 해결을 해보도록 할게요.</p>
<p><code>textField(_:shouldChangeCharactersIn:replacementString:)</code> method 는 <strong>TextField</strong> 의 값이 변할 때마다 호출되는 함수이며, 리턴값으로 <strong>Bool</strong> 타입을 가집니다. 리턴값이 <code>true</code> 일 경우 사용자가 입력한 텍스트가 <strong>TextField</strong> 에 입력되고 <code>false</code> 일 경우 입력을 무시하게 됩니다. 그럼 여기에 지속적으로 텍스트를 감시할 수 있는 코드를 구현하고 텍스트가 몇 자 이상일 때 값이 입력되지 않도록 구현해주면 되겠죠?</p>
<p>먼저 <strong>UITextFieldDelegate</strong> 을 구현해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: UITextFieldDelegate {
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">textField</span>(<span style="color:#66d9ef">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }
}
</code></pre></div><p><strong>Delegate</strong> 위임도 잊지말고요!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">textField.delegate = <span style="color:#66d9ef">self</span>
</code></pre></div><p>이제 <code>textField(_:shouldChangeCharactersIn:replacementString:)</code> 내부 코드를 구현해보겠습니다. 텍스트가 최대 5 자 까지만 입력될 수 있도록 해볼게요. 코드 단 한줄이면 됩니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">guard</span> textField.text!.count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
</code></pre></div><p>이제 텍스트필드에 입력을 해보면 5 자 이상은 입력이 되지않을거에요 ㅎㅎ</p>
<hr>
<h2 id="backspace-event-감지하기">Backspace Event 감지하기</h2>
<p>단 이렇게만 세팅을 해두면 문제점이 하나 생기는데요. 바로 5 글자를 입력한 이후부터는 그 사용자는 그 어떤 행동도 할 수가 없게됩니다. 최소한 글을 다시 수정할 수는 있어야 하잖아요? ㅎㅎ</p>
<p>그래서 이번에는 <strong>Backspace</strong> 가 입력되었을 때는 글자를 삭제할 수 있도록 <code>textField(_:shouldChangeCharactersIn:replacementString:)</code> 내부에 코드를 추가해볼게요. 조금 전 작성했던 <strong>guard 문</strong> 위에 입력하면 됩니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> char = string.cString(using: String.Encoding.utf8) {
    <span style="color:#66d9ef">let</span> isBackSpace = strcmp(char, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">b&#34;</span>)
    <span style="color:#66d9ef">if</span> isBackSpace == <span style="color:#f92672">-</span><span style="color:#ae81ff">92</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }
}
</code></pre></div><p>으음&hellip; 글쎄요. 이 코드는 저도 완전하게 이해하고 있는 부분이 아니라서 간단하게만 설명드리자면 <code>string</code> 은 호출되는 함수의 <strong>Parameter</strong> 로 들어오는 값이고, 사용자가 입력 시도한 값이 <strong>실제 입력여부와 관계없이</strong> 계속 들어오게 됩니다. 그리고 이렇게 들어오는 값을 <strong>Backspace</strong> 인지 판단하고 인코딩하여 UInt32 의 형태로 변환하는 과정입니다.</p>
<p><strong>코드의 2 번째 줄</strong>을 통해 사용자가 키보드에 입력하는 값을 문자 형태로 받을 수 있게되고, <strong>Backspace</strong> 의 경우에는 <code>\\b</code> 의 문자를 가집니다. <strong>Backspace</strong> 가 입력될 경우 <strong>UInt32</strong> 의 형태로 변환하게 되며, 이 값은 <code>-92</code> 라는 값을 가지므로 이 조건들을 모두 만족했을 경우에는 사용자의 입력이 실행되도록 리턴값을 수정해 주었습니다.</p>
<p>여기까지 코드를 입력하고 다시 Simulator 를 실행해보면 조금 전까지는 5 자 이상 입력 시부터 지울 수 없던 글자들이 잘 지워지는 것을 확인할 수 있습니다.</p>
<hr>
<h2 id="wrap-up">Wrap Up</h2>
<p>간단하면서도 자주 사용하지 않으면 잊어버리기 쉬운 내용입니다 ㅎㅎ 그래서 저는 이렇게 기록으로 남겨두고 필요할 때마다 빠르게 찾아쓰는 방향으로 하려고요. 아무튼 도움이 되셨길 바랍니다!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> textField = UITextField()

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setContraints()
        setAttributes()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        textField.layer.cornerRadius = <span style="color:#ae81ff">4</span>
        textField.layer.borderWidth = <span style="color:#ae81ff">1</span>
        textField.layer.borderColor = UIColor.lightGray.cgColor
        textField.placeholder = <span style="color:#e6db74">&#34;  Type your text here&#34;</span>

        textField.delegate = <span style="color:#66d9ef">self</span>
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        view.addSubview(textField)
        textField.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        NSLayoutConstraint.activate([
            textField.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            textField.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            textField.heightAnchor.constraint(equalToConstant: <span style="color:#ae81ff">50</span>),
            textField.widthAnchor.constraint(equalToConstant: <span style="color:#ae81ff">300</span>),
        ])
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: UITextFieldDelegate {
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">textField</span>(<span style="color:#66d9ef">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool {
        print(string)
        <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> char = string.cString(using: String.Encoding.utf8) {
            <span style="color:#66d9ef">let</span> isBackSpace = strcmp(char, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">b&#34;</span>)
            <span style="color:#66d9ef">if</span> isBackSpace == <span style="color:#f92672">-</span><span style="color:#ae81ff">92</span> {
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
            }
        }
        <span style="color:#66d9ef">guard</span> textField.text!.count <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span> <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span> }
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
    }
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>WebKit - 카카오 우편번호 서비스 구현하기 with UIKit</title>
            <link>https://kasroid.github.io/posts/ios/uikit-search-address-with-kakao/</link>
            <pubDate>Sat, 12 Sep 2020 10:24:53 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/uikit-search-address-with-kakao/</guid>
            <description>본 포스팅은 Swift 5.3 기준으로 작성되었습니다.
 Intro 저는 요새 Market Kurly 앱을 클론하는 프로젝트를 진행하고 있는데요. 회원가입 부분에서 Kakao 우편변호 찾기 기능을 지원하더라고요. 사용자로서는 분명히 사용해본 경험이 있는 것 같은데 막상 구현하는 방법은 배운적도 생각해본 적도 없었습니다 ㅎㅎ 어쨌든 중요한건 지금 어떻게든 구현을 해야한다는 것이고, 마켓컬리앱이 아니더라도 회원가입을 필요로하는 서비스라면 많이 지원하고 있는 기능이니까 잘 공부해서 정리해두면 나중에 쓸데가 많을 것 같아 포스팅을 남깁니다.
 서비스 확인하기 Kakao 우편번호 서비스 웹페이지 에 접속해보면 평소 우리가 회원가입을 할 때 자주 볼 수 있었던 화면이 하나 보일거에요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.3 기준으로 작성되었습니다.</p>
</blockquote>
<h2 id="intro">Intro</h2>
<p>저는 요새 <strong>Market Kurly</strong> 앱을 클론하는 프로젝트를 진행하고 있는데요. 회원가입 부분에서 <strong>Kakao 우편변호 찾기</strong> 기능을 지원하더라고요. 사용자로서는 분명히 사용해본 경험이 있는 것 같은데 막상 구현하는 방법은 배운적도 생각해본 적도 없었습니다 ㅎㅎ 어쨌든 중요한건 지금 어떻게든 구현을 해야한다는 것이고, 마켓컬리앱이 아니더라도 회원가입을 필요로하는 서비스라면 많이 지원하고 있는 기능이니까 잘 공부해서 정리해두면 나중에 쓸데가 많을 것 같아 포스팅을 남깁니다.</p>
<hr>
<h2 id="서비스-확인하기">서비스 확인하기</h2>
<p><a href="http://postcode.map.daum.net/guide">Kakao 우편번호 서비스 웹페이지</a> 에 접속해보면 평소 우리가 회원가입을 할 때 자주 볼 수 있었던 화면이 하나 보일거에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92984428-fe09d700-f4e4-11ea-8629-4d693ceb2b06.png" alt="Kakao 우편번호 서비스 웹페이지 스크린샷"></p>
<p>먼저 안내를 읽어보니 모든 조건에서 무료로 사용가능하고 별다른 요구사항도 없는 것 같네요. 그냥 가져다쓰고 <strong>WebView</strong> 형태로 앱 내에서 띄워주면 될 것 같습니다. 그럼 바로 구현을 시작해볼까요? ㅎㅎ</p>
<hr>
<h2 id="구현하기">구현하기</h2>
<p>저도 완전히 처음 시도해보는 과정이다보니 어디서부터 접근해야할지 감이 오지않아 검색할 수 있는만큼 최대한 찾아봤지만 <strong>Swift</strong> 로는 <strong>카카오 우편번호 서비스</strong> 구현방법을 상세히 정리해둔 곳을 찾지 못해 공부하는데 애를 정말 많이 먹었습니다.</p>
<p>아무튼 구현을 위한 순서를 정리해보면 <strong>우편번호 서비스가 구현된 웹페이지 주소</strong>가 있어야하고, 그 주소를 기반으로 <strong>Xcode</strong> 에서 <strong>WebView</strong> 를 이용해 웹페이지를 띄워주어야 합니다. 그래서 오늘 포스팅은 이런 순서로 진행될거에요.</p>
<ul>
<li><strong>Github Pages</strong> 를 사용해 카카오 우편번호 서비스 웹페이지 구현</li>
<li><strong>Xcode</strong> 에서 <strong>WebView</strong> 를 사용해 웹페이지 띄우기</li>
</ul>
<p>그럼 순서대로 차근차근 구현을 시작해볼게요.</p>
<hr>
<h3 id="github-pages-를-사용해-카카오-우편번호-서비스-웹페이지-만들기">Github Pages 를 사용해 카카오 우편번호 서비스 웹페이지 만들기</h3>
<p>카카오 우편번호 서비스를 웹페이지에 구현할 수 있는 방법은 여러가지가 있겠지만 이번 포스팅에서는 <strong>Github Pages</strong> 를 사용해 웹페이지를 생성하겠습니다. <strong>Github</strong> 에 접속해서 <strong>Repo</strong> 를 하나 만들어주세요. 저는 <code>Kakao-Postcode</code> 라고 생성했습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93218464-363f3d00-f7a5-11ea-8312-00106dea9874.png" alt="Github Repo 생성"></p>
<p>생성된 <strong>Repo</strong> 의 <strong>Setting</strong> 카테고리로 들어가 스크롤을 내리다보면 <strong>Github Pages</strong> 라는 항목이 보일거에요. 이곳에서 <strong>Source</strong> 로 <code>master</code> branch 를 선택하고 <strong>save</strong> 버튼을 눌러줍니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93219126-faf13e00-f7a5-11ea-9044-ea874360c682.png" alt="Github Pages 생성 항목"></p>
<p><strong>Save</strong> 버튼을 누르면 페이지가 리프레시 되는데 다시 <strong>Github Pages</strong> 항목이 있는 곳으로 돌아가보면 우리가 생성한 <strong>웹페이지의 주소</strong>를 얻을 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93219475-63401f80-f7a6-11ea-8a61-9acc5169287e.png" alt="Github Pages 주소 확인"></p>
<p>생성된 주소로 들어가보면 <strong>404 에러 페이지</strong>가 보일거에요. 지금은 우리가 아무 내용도 입력하지 않았으므로 이렇게 뜨는게 정상입니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93219146-ffb5f200-f7a5-11ea-9ca6-d70ea67c1bd2.png" alt="404 Error Page"></p>
<p>다시 <strong>Github</strong> 으로 돌아와 <code>Create new file</code> 을 클릭합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93221502-d185e180-f7a8-11ea-897a-7cb223c8532b.png" alt="Create new file"></p>
<p>그리고 파일의 이름을 정확하게 <code>index.html</code> 이라고 입력해주세요. <strong>Github Pages</strong> 는 <code>index.html</code> 이라는 파일을 자동적으로 찾아서 웹페이지로 생성해줍니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93221486-cc289700-f7a8-11ea-8e79-6f7b53f52fdd.png" alt="index.html 입력 장면"></p>
<p>이제 웹페이지 구현에 필요한 <strong>html</strong>  코드를 입력하면 됩니다. 포스팅 초반에 보았던 <strong>공식 카카오 우편번호 서비스 웹페이지</strong>를 보면 <strong>통합로딩방식</strong> 항목을 찾을 수 있고 이걸 갖다 붙여넣으면 바로 구현이 되긴하지만 <strong>POP-UP</strong> 방식으로 구현된다는 문제점이 있습니다.</p>
<p>그래서 주소를 입력했을 때 팝업 방식이 아닌 페이지가 바로 보일 수 있도록 구현된 코드가 필요합니다. <code>index.html</code> 본문에 아래 코드를 입력하고 저장해주세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>

&lt;<span style="color:#f92672">html</span> <span style="color:#a6e22e">lang</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ko&#34;</span>&gt;
  &lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">title</span>&gt;주소 찾기&lt;/<span style="color:#f92672">title</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UTF-8&#34;</span>&gt;
    &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width,height=device-height,initial-scale=1.0&#34;</span>/&gt;
  &lt;/<span style="color:#f92672">head</span>&gt;
  &lt;<span style="color:#f92672">body</span> <span style="color:#a6e22e">onload</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;execDaumPostcode()&#34;</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id </span><span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;layer&#34;</span> <span style="color:#a6e22e">style </span><span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;display:block; position:absolute; overflow:hidden; z-index:1; -webkit-overflow-scrolling:touch; &#34;</span>&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;
  &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://spi.maps.daum.net/imap/map_js_init/postcode.v2.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
  &lt;<span style="color:#f92672">script</span>&gt;
    window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;message&#34;</span>, <span style="color:#a6e22e">onReceivedPostMessage</span>, <span style="color:#66d9ef">false</span>);

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">onReceivedPostMessage</span>(<span style="color:#a6e22e">event</span>){
      <span style="color:#75715e">//..ex deconstruct event into action &amp; params
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">action</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">action</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">params</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">params</span>;
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;onReceivedPostMessage &#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">event</span>);
    }

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">onReceivedActivityMessageViaJavascriptInterface</span>(<span style="color:#a6e22e">json</span>){
      <span style="color:#75715e">//..ex deconstruct data into action &amp; params
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">json</span>);
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">action</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">action</span>;
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">params</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">params</span>;
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;onReceivedActivityMessageViaJavascriptInterface &#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">event</span>);
    }

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">postMessageToiOS</span>(<span style="color:#a6e22e">postData</span>) {
        window.<span style="color:#a6e22e">webkit</span>.<span style="color:#a6e22e">messageHandlers</span>.<span style="color:#a6e22e">callBackHandler</span>.<span style="color:#a6e22e">postMessage</span>(<span style="color:#a6e22e">postData</span>);
    }

    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">element_layer</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;layer&#39;</span>);
    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">execDaumPostcode</span>() {
      <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">daum</span>.<span style="color:#a6e22e">Postcode</span>({
        <span style="color:#a6e22e">oncomplete</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">data</span>) {
          <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">jibunAddress</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

          <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">jibunAddress</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>) {
            <span style="color:#a6e22e">jibunAddress</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">autoJibunAddress</span>
          } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">autoJibunAddress</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>) {
            <span style="color:#a6e22e">jibunAddress</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">jibunAddress</span>
          }

          <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">postData</span> <span style="color:#f92672">=</span> {
              <span style="color:#a6e22e">roadAddress</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">roadAddress</span>,
              <span style="color:#a6e22e">jibunAddress</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">jibunAddress</span>,
              <span style="color:#a6e22e">zonecode</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">zonecode</span>
          };
          window.<span style="color:#a6e22e">postMessageToiOS</span>(<span style="color:#a6e22e">postData</span>);
        },
        <span style="color:#a6e22e">width</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;100%&#39;</span>,
        <span style="color:#a6e22e">height</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;100%&#39;</span>
      }).<span style="color:#a6e22e">embed</span>(<span style="color:#a6e22e">element_layer</span>);
      <span style="color:#a6e22e">element_layer</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;block&#39;</span>;
      <span style="color:#a6e22e">initLayerPosition</span>();
    }

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initLayerPosition</span>(){
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> (window.<span style="color:#a6e22e">innerWidth</span> <span style="color:#f92672">||</span> document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">clientWidth</span>);
      <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> (window.<span style="color:#a6e22e">innerHeight</span> <span style="color:#f92672">||</span> document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">clientHeight</span>);
      <span style="color:#a6e22e">element_layer</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">width</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;px&#39;</span>;
      <span style="color:#a6e22e">element_layer</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">height</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;px&#39;</span>;
      <span style="color:#a6e22e">element_layer</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">left</span> <span style="color:#f92672">=</span> (((window.<span style="color:#a6e22e">innerWidth</span> <span style="color:#f92672">||</span> document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">clientWidth</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">width</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;px&#39;</span>;
      <span style="color:#a6e22e">element_layer</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">top</span> <span style="color:#f92672">=</span> (((window.<span style="color:#a6e22e">innerHeight</span> <span style="color:#f92672">||</span> document.<span style="color:#a6e22e">documentElement</span>.<span style="color:#a6e22e">clientHeight</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">height</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;px&#39;</span>;
    }
  &lt;/<span style="color:#f92672">script</span>&gt;
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>적용되는데 시간이 조금 필요하기 때문에 잠시 기다리고나서 <strong>Github Pages</strong> 주소로 들어가보면 우리가 구현하고자 했던 <strong>카카오 우편번호 서비스</strong> 화면이 보일거에요!</p>
<p>혹시 계속 기다려봐도 안된다면 <strong>Repo</strong> 의 이름을 한번 변경해주세요. 분명히 잘못된 부분이 없는데 계속 페이지 오류가 뜨길래 <strong>Repo</strong> 이름을 바꿔보니까 이후부터 웹페이지가 정상적으로 뜨기 시작했습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93221498-d054b480-f7a8-11ea-87d9-7be75386d1cc.png" alt="우편번호 서비스 Github Pages"></p>
<p>잘 나오나요~? ㅎㅎ 이제 <strong>Xcode</strong> 에서 <strong>WebKit</strong> 을 이용해 이 페이지를 띄워주면 됩니다.</p>
<hr>
<h3 id="webview-로-카카오-우편번호-서비스-웹페이지-표시하기">WebView 로 카카오 우편번호 서비스 웹페이지 표시하기</h3>
<p><strong>Xcode Project</strong> 를 하나 만들어 실습을 시작해볼게요. 먼저 간단하게 뷰를 세팅하겠습니다.</p>
<hr>
<h4 id="setup-view">Setup View</h4>
<p><strong>View</strong> 위에 <strong>Button</strong> 과 <strong>Label</strong> 을 하나씩 올려놓았어요. <strong>Button</strong> 을 누르면 <strong>카카오 우편번호 서비스</strong> 창이 뜨고, 이곳에서 주소를 입력받은 뒤 <strong>Label</strong> 에 표시될 수 있도록 <strong>데이터를 전달</strong>해 볼거에요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">let</span> button = UIButton(type: .system)
    <span style="color:#66d9ef">let</span> label = UILabel()

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Lifecycle</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setContraints()
        setAttributes()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        button.setTitle(<span style="color:#e6db74">&#34;Button&#34;</span>, <span style="color:#66d9ef">for</span>: .normal)
	button.addTarget(<span style="color:#66d9ef">self</span>, action: <span style="color:#66d9ef">#selector</span>(handleButton(<span style="color:#66d9ef">_</span>:)), <span style="color:#66d9ef">for</span>: .touchUpInside)

        label.text = <span style="color:#e6db74">&#34;Label&#34;</span>
        label.font = UIFont.systemFont(ofSize: <span style="color:#ae81ff">20</span>)
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        [button, label].forEach {
            view.addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        }
        NSLayoutConstraint.activate([
            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button.centerYAnchor.constraint(equalTo: view.centerYAnchor),

            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.bottomAnchor.constraint(equalTo: button.topAnchor, constant: <span style="color:#f92672">-</span><span style="color:#ae81ff">40</span>),
        ])
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Selectors</span>
    <span style="color:#66d9ef">@objc</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleButton</span>(<span style="color:#66d9ef">_</span> sender: UIButton) {
        print(<span style="color:#66d9ef">#function</span>)
    }
}
</code></pre></div><p>코드를 작성하고 <strong>Simulator</strong> 를 실행해보면 이렇게 보입니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93291970-688d8080-f81f-11ea-9c6e-d3596e8e3fa0.png" alt="Simulator 실행화면"></p>
<hr>
<h4 id="카카오-우편번호-서비스-구현하기">카카오 우편번호 서비스 구현하기</h4>
<p>기본적인 뷰 세팅은 마쳤으니 본격적으로 <strong>우편번호 서비스</strong> 구현을 위한 코드를 작성해보도록 할게요. 서비스가 보여질 새로운 <code>UIViewController</code> 를 하나 생성해줍니다. 저는 <code>KakaoZipCodeVC</code> 라고 만들었어요~</p>
<p>이제 이곳에 조금 전 <strong>Github Pages</strong> 를 사용해 미리 만들어둔 페이지를 <strong>WebView</strong> 를 사용해서 띄워줄거에요. 그러니까 <strong>WebView</strong> 를 사용하기 위해 <code>WebKit</code> 을 <strong>import</strong> 해주도록 할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">WebKit</span>
</code></pre></div><p>그리고 <code>WKWebView</code> 인스턴스를 optional 로 미리 하나 생성하고, <strong>webView</strong> 가 로딩될 동안 보여줄 <code>UIActivityIndicatorView</code> 도 인스턴스를 생성하겠습니다. 나중에 사용자가 선택한 주소를 저장할 변수도 하나 생성할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">var</span> webView: WKWebView?
<span style="color:#66d9ef">let</span> indicator = UIActivityIndicatorView(style: .medium)
<span style="color:#66d9ef">var</span> address = <span style="color:#e6db74">&#34;&#34;</span>
</code></pre></div><p>인스턴스 생성까지 마쳤고 <strong>Java Script</strong> 를 읽을 수 있게 도와주는 <code>WKUserContentController</code> 를 생성해야합니다. 처음보는 클래스니까 <strong>공식문서</strong>를 먼저 한번 볼까요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93293054-07b37780-f822-11ea-9d54-7d1b898ac528.png" alt="WKUserContentController 공식문서"></p>
<p>특별한 내용은 없고 <strong>Java Script</strong> 가 메세지를 Post 할 수 있게 도와준다고 나와있네요. 우리가 <strong>Github Pages</strong> 에 작성한 <strong>html</strong> 이 <strong>Java Script</strong> 를 불러오는 내용이니까 이걸 쓰는게 맞을 것 같아요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> contentController = WKUserContentController()
</code></pre></div><p>인스턴스를 생성해줬으니 이제 <strong>Java Script</strong> 가 보내는 메세지를 읽을 수 있어야 합니다. 여기서 메세지란 사용자가 선택한 정보가 무엇인지 우리가 받는 것을 뜻하겠죠?</p>
<p>아무튼 이 메세지를 받으려면 <code>WKUserContentController</code> 가 제공하는 <code>add(_:name:)</code> method 를 사용해야 하는데요.</p>
<p>이 method 를 사용하기 위해서는 <code>WKScriptMessageHandler</code> 프로토콜을 채택해주어야 합니다. 그리고 이 프로토콜을 채택하면 <strong>필수적으로</strong> 구현해야하는 <code>userContentController(_:didReceive:)</code> method 도 구현하도록 할게요.</p>
<p>프로토콜을 채택하기 전에 <code>add(_:name:)</code> method 의 공식문서를 잠시 살펴봤는데&hellip;</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93293806-d76cd880-f823-11ea-9fa1-776b07eb51f0.png" alt="WKUserContentController 의 add method 공식문서"></p>
<p><strong>Script Message Handler</strong> 를 추가한다고 합니다. <strong>Hanlder</strong> 가 있어야 <strong>Java Script</strong> 가 보내는 <strong>Message</strong> 를 정상적으로 수신할 수 있는 것 같아요.</p>
<hr>
<h4 id="wkscriptmessagehandler-프로토콜-채택">WKScriptMessageHandler 프로토콜 채택</h4>
<p><code>WKScriptMessageHandler</code> 를 채택하고 필수함수를 구현했습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">KakaoZipCodeVC</span>: WKScriptMessageHandler {
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">userContentController</span>(<span style="color:#66d9ef">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage) {

    }
}
</code></pre></div><p>직접 실험을 해보니 이 함수가 <strong>호출되는 타이밍</strong>은 유저가 주소를 검색하고 어떤 값을 <strong>최종적으로 선택했을 때</strong> 호출되게 됩니다.</p>
<p>프로토콜을 채택했으니 <code>add(_:name:)</code> method 를 사용할 수 있게 되었어요. 다시 <code>contentController</code> 를 인스턴스화 한곳으로 돌아가 코드를 입력해주세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">contentController.add(<span style="color:#66d9ef">self</span>, name: <span style="color:#e6db74">&#34;callBackHandler&#34;</span>)
</code></pre></div><p>이제 초반에 optional 로 생성해두었던 <code>WKWebView</code> 를 인스턴스화 해주어야하는데요. 그 전에 먼저 방금 생성한 <code>contentController</code> 를 <code>WKWebView</code> 와 연결할 수 있도록 도와주는 <code>WKWebViewConfiguration</code> 이 필요합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> configuration = WKWebViewConfiguration()
configuration.userContentController = contentController
</code></pre></div><p><code>webView</code> 를 인스턴스화 해줍니다. 레이아웃은 아래에서 오토레이아웃으로 잡을거니까 <code>.zero</code> 로 세팅하고 방금 만들어둔 <code>configuration</code> 을 연결합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">webView = WKWebView(frame: .zero, configuration: configuration)
</code></pre></div><p><code>webView</code> 가 로드될 때 <strong>indicator</strong> 를 보여줄 수 있도록 <code>WKNavigationDelegate</code> 프로토콜을 채택하고 코드를 구현해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">KakaoZipCodeVC</span>: WKNavigationDelegate {
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">webView</span>(<span style="color:#66d9ef">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        indicator.startAnimating()
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">webView</span>(<span style="color:#66d9ef">_</span> webView: WKWebView, didFinish navigation: WKNavigation!) {
        indicator.stopAnimating()
    }
}
</code></pre></div><p>함수의 <strong>Parameter</strong> 이름만 봐도 알 수 있듯이</p>
<ul>
<li><code>webView(_:didStartProvisionalNavigation:)</code> 는 <code>webView</code> 의 <strong>로드가 시작될 때</strong></li>
<li><code>webView(_:didFinish:)</code> 는 <code>webView</code> 의 <strong>로드가 끝날 때</strong></li>
</ul>
<p>각각 호출되게 됩니다. 그러니까 <strong>indicator</strong> 는 각각의 함수에 시작과 끝을 세팅하면 되겠죠?</p>
<p><strong>Delegate</strong> 위임도 잊지말고 해주세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">webView?.navigationDelegate = <span style="color:#66d9ef">self</span>
</code></pre></div><p>이제 <code>webView</code> 가 우편번호 서비스 웹페이지를 띄울 수 있도록 <strong>URL</strong> 만 전달해주면 됩니다. <strong>guard</strong> 문을 사용해 optional 을 unwrapping 해주고 <code>URLRequest</code> 를 생성해 <code>webView</code> 가 해당 <strong>URL 을 load</strong> 할 수 있도록 넘겨줍니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://kasroid.github.io/Kakao-Postcode/&#34;</span>),
    <span style="color:#66d9ef">let</span> webView = webView
    <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
<span style="color:#66d9ef">let</span> request = URLRequest(url: url)
webView.load(request)
indicator.startAnimating()
</code></pre></div><p>마지막으로 오토레이아웃을 잡고 <strong>Simulator</strong> 를 실행시켜 보도록할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> webView = webView <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
view.addSubview(webView)
webView.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>

webView.addSubview(indicator)
indicator.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>

NSLayoutConstraint.activate([
    webView.topAnchor.constraint(equalTo: view.topAnchor),
    webView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
    webView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
    webView.bottomAnchor.constraint(equalTo: view.bottomAnchor),

    indicator.centerXAnchor.constraint(equalTo: webView.centerXAnchor),
    indicator.centerYAnchor.constraint(equalTo: webView.centerYAnchor),
])
</code></pre></div><p>한가지 더!! <code>ViewController</code> 로 돌아가 <code>handleButton</code> 함수에 <code>KakaoZipCodeVC</code> 를 <strong>Present</strong> 할 수 있도록 구현합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> nextVC = KakaoZipCodeVC()
present(nextVC, animated: <span style="color:#66d9ef">true</span>)
</code></pre></div><p>이제 <strong>Simulator</strong> 를 실행시키고 <strong>Button</strong> 을 눌러보세요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93296433-29b0f800-f82a-11ea-9ac3-862baa7461e0.png" alt="Simulator 실행 화면"></p>
<p>Success!!</p>
<hr>
<h4 id="데이터-전달하기">데이터 전달하기</h4>
<p>정상적으로 우편번호 서비스를 띄우는데 성공했으니 이제 사용자가 입력한 데이터를 받아올 일만 남았습니다.</p>
<p><code>userContentController(_:didReceive:)</code> 함수 내부에 코드를 구현할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> data = message.body <span style="color:#66d9ef">as</span>? [String: Any] {
    address = data[<span style="color:#e6db74">&#34;roadAddress&#34;</span>] <span style="color:#66d9ef">as</span>? String ?? <span style="color:#e6db74">&#34;&#34;</span>
}
<span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> previousVC = presentingViewController <span style="color:#66d9ef">as</span>? ViewController <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
previousVC.label.text = address
<span style="color:#66d9ef">self</span>.dismiss(animated: <span style="color:#66d9ef">true</span>, completion: <span style="color:#66d9ef">nil</span>)
</code></pre></div><p>지금은 <strong>&ldquo;roadAddress&rdquo;</strong> 라는 항목만 추출했지만 <code>message.body</code> 를 print 해보면 다음과 같은 값들을 가져오는 것을 확인할 수가 있습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#960050;background-color:#1e0010">jibunAddress</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;\Uacbd\Uae30 \Uc131\Ub0a8\Uc2dc \Ubd84\Ub2f9\Uad6c \Uc6b4\Uc911\Ub3d9 1017-3&#34;</span><span style="color:#960050;background-color:#1e0010">;</span>
    <span style="color:#960050;background-color:#1e0010">roadAddress</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;\Uacbd\Uae30 \Uc131\Ub0a8\Uc2dc \Ubd84\Ub2f9\Uad6c \Ud310\Uad50\Ub85c 35&#34;</span><span style="color:#960050;background-color:#1e0010">;</span>
    <span style="color:#960050;background-color:#1e0010">zonecode</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">13467</span><span style="color:#960050;background-color:#1e0010">;</span>
}
</code></pre></div><p>필요에 따라 <strong>지번 주소</strong>, <strong>도로명 주소</strong>, <strong>우편번호</strong>를 가져와서 사용할 수 있어요.</p>
<p>이제 <strong>Simulator</strong> 를 실행하고 원하는 주소를 검색한 뒤에 클릭하면 내가 선택한 데이터가 <code>ViewController</code> 의 <code>label</code> 로 전달되는 것을 확인할 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93297329-05eeb180-f82c-11ea-8417-1d5e5a55cdcc.gif" alt="Simulator 실행화면"></p>
<hr>
<h2 id="wrap-up">Wrap Up</h2>
<p>처음 시도할 떄는 조금 복잡하게 느껴질 수 있지만 한번만 잘 따라해보면 그렇게까지 어려운 내용은 아니에요. <del>워낙 어려운게 많아야지&hellip;</del></p>
<p><strong>Github Pages</strong> 로 한번 구현해두면 계속해서 사용할 수 있으니 꼭 한번 만들어두고 앞으로 다양한 곳에서 활용해보세요. 그럼 오늘도 공부하느라 수고 많으셨습니다!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">WebKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">KakaoZipCodeVC</span>: UIViewController {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">var</span> webView: WKWebView?
    <span style="color:#66d9ef">let</span> indicator = UIActivityIndicatorView(style: .medium)
    <span style="color:#66d9ef">var</span> address = <span style="color:#e6db74">&#34;&#34;</span>

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Lifecycle</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        view.backgroundColor = .white
        setAttributes()
        setContraints()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        <span style="color:#66d9ef">let</span> contentController = WKUserContentController()
        contentController.add(<span style="color:#66d9ef">self</span>, name: <span style="color:#e6db74">&#34;callBackHandler&#34;</span>)

        <span style="color:#66d9ef">let</span> configuration = WKWebViewConfiguration()
        configuration.userContentController = contentController

        webView = WKWebView(frame: .zero, configuration: configuration)
        <span style="color:#66d9ef">self</span>.webView?.navigationDelegate = <span style="color:#66d9ef">self</span>

        <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://kasroid.github.io/Kakao-Postcode/&#34;</span>),
            <span style="color:#66d9ef">let</span> webView = webView
            <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
        <span style="color:#66d9ef">let</span> request = URLRequest(url: url)
        webView.load(request)
        indicator.startAnimating()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> webView = webView <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
        view.addSubview(webView)
        webView.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>

        webView.addSubview(indicator)
        indicator.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>

        NSLayoutConstraint.activate([
            webView.topAnchor.constraint(equalTo: view.topAnchor),
            webView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            webView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            webView.bottomAnchor.constraint(equalTo: view.bottomAnchor),

            indicator.centerXAnchor.constraint(equalTo: webView.centerXAnchor),
            indicator.centerYAnchor.constraint(equalTo: webView.centerYAnchor),
        ])
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">KakaoZipCodeVC</span>: WKScriptMessageHandler {
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">userContentController</span>(<span style="color:#66d9ef">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
        <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> data = message.body <span style="color:#66d9ef">as</span>? [String: Any] {
            address = data[<span style="color:#e6db74">&#34;roadAddress&#34;</span>] <span style="color:#66d9ef">as</span>? String ?? <span style="color:#e6db74">&#34;&#34;</span>
        }
        <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> previousVC = presentingViewController <span style="color:#66d9ef">as</span>? ViewController <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
        previousVC.label.text = address
        <span style="color:#66d9ef">self</span>.dismiss(animated: <span style="color:#66d9ef">true</span>, completion: <span style="color:#66d9ef">nil</span>)
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">KakaoZipCodeVC</span>: WKNavigationDelegate {
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">webView</span>(<span style="color:#66d9ef">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        indicator.startAnimating()
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">webView</span>(<span style="color:#66d9ef">_</span> webView: WKWebView, didFinish navigation: WKNavigation!) {
        indicator.stopAnimating()
    }
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>UIKit - UITableView 셀 크기가 자동으로 세팅되도록 구현하기</title>
            <link>https://kasroid.github.io/posts/ios/20200913-uitableview-self-sizing-cells/</link>
            <pubDate>Tue, 08 Sep 2020 11:14:25 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200913-uitableview-self-sizing-cells/</guid>
            <description>Intro UITableView 를 사용하면서 그동안은 항상 RowHeight 값을 설정하여 높이를 지정해주었었는데요. 이번 프로젝트 진행하면서 셀 크기가 상황에 따라 유동적으로 변하는 케이스가 있어 자동으로 세팅하는 방법에 대해 공부를 해봅니다 ㅎㅎ
 Setup 실습을 위해 UITableViewCell 을 상속받은 CustomTableViewCell 을 생성하고 ViewController 위에 TableView 를 올려놓았습니다.
기본 세팅은 아래 코드를 참고하세요.
ViewController.swift
import UIKit class ViewController: UIViewController { // MARK:- Properties private let tableView = UITableView() override func viewDidLoad() { super.viewDidLoad() configureUI() } // MARK:- UI private func configureUI() { view.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p><strong>UITableView</strong> 를 사용하면서 그동안은 항상 <strong>RowHeight</strong> 값을 설정하여 높이를 지정해주었었는데요. 이번 프로젝트 진행하면서 셀 크기가 상황에 따라 유동적으로 변하는 케이스가 있어 <strong>자동으로 세팅하는 방법</strong>에 대해 공부를 해봅니다 ㅎㅎ</p>
<hr>
<h2 id="setup">Setup</h2>
<p>실습을 위해 <strong>UITableViewCell</strong> 을 상속받은 <strong>CustomTableViewCell</strong> 을 생성하고 ViewController 위에 <strong>TableView</strong> 를 올려놓았습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92996302-8ddf6d80-f545-11ea-9c19-cada61c47b01.png" alt="Simulator Setup"></p>
<p><strong>기본 세팅</strong>은 아래 코드를 참고하세요.</p>
<p><strong>ViewController.swift</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">let</span> tableView = UITableView()
    
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }
    
    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        view.backgroundColor = .blue
        setContraints()
        setAttributes()
    }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        tableView.register(CustomTableViewCell.<span style="color:#66d9ef">self</span>, forCellReuseIdentifier: CustomTableViewCell.identifier)
        tableView.dataSource = <span style="color:#66d9ef">self</span>
        tableView.delegate = <span style="color:#66d9ef">self</span>
    }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        view.addSubview(tableView)
        tableView.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
        ])
    }

}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: UITableViewDataSource {

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">30</span>
    }
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {
        <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, <span style="color:#66d9ef">for</span>: indexPath) <span style="color:#66d9ef">as</span>? CustomTableViewCell <span style="color:#66d9ef">else</span> { fatalError() }
        <span style="color:#66d9ef">return</span> cell
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: UITableViewDelegate {
    
}
</code></pre></div><p><strong>CustomTableViewCell.swift</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomTableViewCell</span>: UITableViewCell {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">let</span> identifier = <span style="color:#e6db74">&#34;CustomTableViewCell&#34;</span>

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Lifecycle</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">init</span>(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        <span style="color:#66d9ef">super</span>.<span style="color:#66d9ef">init</span>(style: style, reuseIdentifier: reuseIdentifier)
        configureUI()
    }

    <span style="color:#66d9ef">required</span> <span style="color:#66d9ef">init</span>?(coder: NSCoder) {
        fatalError(<span style="color:#e6db74">&#34;init(coder:) has not been implemented&#34;</span>)
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setContraints()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {

    }

}
</code></pre></div><hr>
<h2 id="cell-autolayout-구현하기">Cell AutoLayout 구현하기</h2>
<p><strong>TableView</strong> 는 <strong>ScrollView</strong> 를 상속받아서 만들어졌기 때문인지 <strong>ScrollView</strong> 와 비슷한 속성을 지니고 있는데요. <strong>Constraints</strong> 를 확실하게 잡아주면 스크롤이 가능하도록 스스로 크기를 조절하고, <strong>Cell</strong> 역시도 <code>topAnchor</code> 와 <code>bottomAnchor</code> 를 잡고 내부 컨텐츠의 <code>heightAnchor</code> 가 잡혀있다면 스스로 크기를 조절하게 됩니다.</p>
<p>그럼 우리가 생성해놓은 <strong>CustomTableViewCell</strong> 에 색을 입힌 <strong>UIView</strong> 를 2 개 배치하고, 이 View 들의 크기에 따라 <strong>Cell 의 크기가 자동적으로</strong> 변할 수 있도록 구현해보겠습니다.</p>
<p><strong>CustomTableViewCell.swift</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomTableViewCell</span>: UITableViewCell {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">let</span> identifier = <span style="color:#e6db74">&#34;CustomTableViewCell&#34;</span>

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">let</span> upperView = UIView()
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">let</span> lowerView = UIView()

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Lifecycle</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">init</span>(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        <span style="color:#66d9ef">super</span>.<span style="color:#66d9ef">init</span>(style: style, reuseIdentifier: reuseIdentifier)
        configureUI()
    }

    <span style="color:#66d9ef">required</span> <span style="color:#66d9ef">init</span>?(coder: NSCoder) {
        fatalError(<span style="color:#e6db74">&#34;init(coder:) has not been implemented&#34;</span>)
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setContraints()
        setAttributes()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        upperView.backgroundColor = .red
        lowerView.backgroundColor = .blue
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        [upperView, lowerView].forEach {
            <span style="color:#66d9ef">self</span>.addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        }

        NSLayoutConstraint.activate([
            upperView.topAnchor.constraint(equalTo: <span style="color:#66d9ef">self</span>.topAnchor, constant: <span style="color:#ae81ff">20</span>),
            upperView.leadingAnchor.constraint(equalTo: <span style="color:#66d9ef">self</span>.leadingAnchor, constant: <span style="color:#ae81ff">20</span>),
            upperView.trailingAnchor.constraint(equalTo: <span style="color:#66d9ef">self</span>.trailingAnchor, constant: <span style="color:#f92672">-</span><span style="color:#ae81ff">20</span>),
            upperView.heightAnchor.constraint(equalToConstant: <span style="color:#ae81ff">100</span>),

            lowerView.topAnchor.constraint(equalTo: upperView.bottomAnchor, constant: <span style="color:#ae81ff">10</span>),
            lowerView.leadingAnchor.constraint(equalTo: <span style="color:#66d9ef">self</span>.leadingAnchor, constant: <span style="color:#ae81ff">20</span>),
            lowerView.trailingAnchor.constraint(equalTo: <span style="color:#66d9ef">self</span>.trailingAnchor, constant: <span style="color:#f92672">-</span><span style="color:#ae81ff">20</span>),
            lowerView.bottomAnchor.constraint(equalTo: <span style="color:#66d9ef">self</span>.bottomAnchor, constant: <span style="color:#f92672">-</span><span style="color:#ae81ff">20</span>),
            lowerView.heightAnchor.constraint(equalToConstant: <span style="color:#ae81ff">150</span>),
        ])
    }
}
</code></pre></div><p>이렇게 코드를 입력하고 Simulator 를 실행시켜보면 우리가 별도의 설정이나 작업을 하지 않았는데도, 스스로 내부에 위치한 View 들의 높이를 계산하여 Cell 의 높이를 조절한 것을 알 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92999751-6943bf80-f55e-11ea-9d2b-ca3c414c5922.png" alt="Simulator 실행화면"></p>
<p>잘 늘어난게 보이네요 ㅎㅎㅎ 생각보다 너무 쉽지 않았나요? 그동안은 <strong>RowHeight</strong> 를 직접 설정하는 방법으로 <strong>TableView</strong> 를 구현했었지만 이제부터는 <strong>Cell</strong> 이 스스로 높이를 조절하는 방향으로 View 를 짜게될 것 같습니다. 이 방법이 훨씬 편하고 유연성이 있는 것 같아요 ㅎㅎ</p>
<hr>
<h2 id="wrap-up">Wrap Up</h2>
<p>이렇게 <strong>TableView</strong> 를 사용할 때 <strong>Cell 의 크기를 자동으로</strong> 설정할 수 있게하는 방법을 알아보았는데요.</p>
<p>핵심 내용을 정리해보면</p>
<ul>
<li>TableView 에는 별도의 설정이 필요없다.</li>
<li>Cell 내부에 위치한 View 의 <code>topAnchor</code> 와 <code>bottomAnchor</code> 를 확실하게 잡아준다.</li>
<li>View 의 <code>heightAnchor</code> 또한 확실하게 잡는다.</li>
</ul>
<p>이 정도로 요약해볼 수 있을 것 같네요. 무언가 정상적으로 작동하지 않을 때는 위 3 가지를 먼저 확인해보면 좋을 것 같습니다.</p>
]]></content>
        </item>
        
        <item>
            <title>UIKit - UITableView 를 Grouped Style 로 지정했을 때 생기는 Footer 없에기</title>
            <link>https://kasroid.github.io/posts/ios/20200905-uikit-deleting-unwanted-spaces-in-grouped-style-uitableview/</link>
            <pubDate>Sat, 05 Sep 2020 16:17:28 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200905-uikit-deleting-unwanted-spaces-in-grouped-style-uitableview/</guid>
            <description>Intro UITableView 를 별 다른 설정없이 인스턴스화해서 사용해보면 Style 기본값이 .plain 으로 설정되어 있어 Header 를 사용하는 경우 스크롤을 하더라도 바로 사라지는 것이 아니라 계속 남아있게 되는데요. 이것을 해결하려면 tableView 의 Style 을 .grouped 로 지정해주면 Header 가 다른 셀들과 같은 방식으로 스크롤되게 됩니다.
그런데 이렇게 사용하면 문제점이 하나 발생하는데 우리는 Footer 가 필요없고 Header 만 필요한 경우에도 자동적으로 Footer 까지 생성되는 상황이 발생하는거에요. 이것 때문에 골치를 여러번 썩으면서도 공부해서 해결하기보다 바쁘다는 핑계로 여태까지 우회하는 방법으로 해결을 했었거든요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p><strong>UITableView</strong> 를 별 다른 설정없이 인스턴스화해서 사용해보면 Style 기본값이 <code>.plain</code> 으로 설정되어 있어 Header 를 사용하는 경우 스크롤을 하더라도 바로 사라지는 것이 아니라 계속 남아있게 되는데요. 이것을 해결하려면 tableView 의 Style 을 <code>.grouped</code> 로 지정해주면 Header 가 다른 셀들과 같은 방식으로 스크롤되게 됩니다.</p>
<p>그런데 이렇게 사용하면 문제점이 하나 발생하는데 우리는 <strong>Footer 가 필요없고 Header 만 필요한 경우</strong>에도 자동적으로 Footer 까지 생성되는 상황이 발생하는거에요. 이것 때문에 골치를 여러번 썩으면서도 공부해서 해결하기보다 바쁘다는 핑계로 여태까지 우회하는 방법으로 해결을 했었거든요. 그런데 오늘 프로젝트를 진행하면서 같은 상황을 또 마주치게 되어 확실히 해결하는 방법을 공부해보았습니다.</p>
<hr>
<h2 id="preconfigure">Preconfigure</h2>
<p>간단하게 연습해보기 위해 ViewController 에 <strong>Grouped Style</strong> 로 <strong>UITableView</strong> 를 하나 올려놓았어요. 그리고 <code>tableView(_:viewForHeaderInSection:)</code> 를 구현하고 회색 BackgroundColor 를 가진 뷰를 리턴했습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? {
    <span style="color:#66d9ef">let</span> view = UIView()
    view.backgroundColor = .gray
    <span style="color:#66d9ef">return</span> view
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat {
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">10</span>
}
</code></pre></div><p><code>.plain</code> Style 에서 이렇게 구현했다면 Header 만 생성되었을텐데요. Apple 이  기본세팅을 왜 이렇게 해놓았는지 모르겠지만 <code>.grouped</code> Style 에서는 자동적으로 Footer 뷰까지 생성이 됩니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92301833-efca3100-efa1-11ea-98ff-6bcbefa43124.png" alt="Footer 뷰가 자동적으로 생성된 모습"></p>
<p>우리는 분명히 <strong>Header</strong> 를 <strong>회색</strong>으로 지정해 놓았는데 빨간색 화살표로 표시된 부분에 우리는 생성한적 없는 다른 뷰가 하나 있잖아요? 저게 바로 <strong>Footer</strong> 입니다. 자동으로 생성되었어요. 처음에는 저게 Footer 라는 사실을 몰라서 더 많이 헤맸던 것 같아요. 알고나니 해결법이 정말 간단했습니다.</p>
<hr>
<h2 id="solution">Solution</h2>
<p>그럼 코드를 작성해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">tableView.tableFooterView = UIView(frame: .zero)
tableView.sectionFooterHeight = <span style="color:#ae81ff">0</span>
</code></pre></div><p>직접 <strong>UIView</strong> 를 생성해 <strong>Footer 뷰로 지정</strong>해주고 <strong>높이를 0</strong> 으로 바꿔주었어요. 이유는 알 수 없지만 기본적으로 제공되는 Footer 의 높이를 0 으로 바꾸는 방법은 통하지 않더라고요. 이제 이렇게 세팅하고 Simulator 를 실행해 볼게요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92301942-da093b80-efa2-11ea-801f-7a48e6d965fa.png" alt="Footer 뷰가 사라진 모습"></p>
<p>오!! 사라졌어요. 처음부터 기본값이 이렇게 세팅되어 있었다면 더 편했겠지만 굳이 그렇게하지 않은 이유가 분명 Apple 에게는 있을거에요. 그럴거에요.</p>
<hr>
<h2 id="entire-code">Entire Code</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">let</span> tableView = UITableView(frame: .zero, style: .grouped)

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Lifecycle</span>
    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setAttributes()
        setContraints()
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAttributes</span>() {
        tableView.dataSource = <span style="color:#66d9ef">self</span>
        tableView.delegate = <span style="color:#66d9ef">self</span>
        tableView.tableFooterView = UIView(frame: .zero)
        tableView.sectionFooterHeight = <span style="color:#ae81ff">0</span>
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setContraints</span>() {
        view.addSubview(tableView)
        tableView.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: UITableViewDataSource {

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {
        <span style="color:#66d9ef">return</span> UITableViewCell()
    }
}

<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: UITableViewDelegate {

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">numberOfSections</span>(<span style="color:#66d9ef">in</span> tableView: UITableView) -&gt; Int {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">10</span>
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? {
        <span style="color:#66d9ef">let</span> view = UIView()
        view.backgroundColor = .gray
        <span style="color:#66d9ef">return</span> view
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">tableView</span>(<span style="color:#66d9ef">_</span> tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">10</span>
    }
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>CocoaPods - 명령어 알아보기</title>
            <link>https://kasroid.github.io/posts/ios/20200905-cocoapods-basic-commands/</link>
            <pubDate>Sat, 05 Sep 2020 11:06:30 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200905-cocoapods-basic-commands/</guid>
            <description>Intro CocoaPods - 설치 및 라이브러리 적용하기 포스팅에서 간단하게 CocoaPods 를 설치하고 Library 를 적용하는 법가지 알아보았었는데요. 이번에는 CocoaPods 에서 사용할 수 있는 커맨드들을 같이 한번 공부해보도록 하겠습니다.
 Podfile 생성하기 우리가 CocoaPods 를 설치하는 이유는 외부 라이브러리를 적용해서 사용하기 위해서잖아요? 그렇다면 가장 먼저할 일은 당연히 어떤 라이브러리를 설치하고 싶은지 CocoaPods 에게 알려주는 것입니다. 그래서 CocoaPods 는 그 목록을 Podfile 을 통해서 받게되는데요. 다음은 이 Podfile 을 생성하는 명령어입니다.
pod init 설치를 희망하는 프로젝트 폴더 내에서 위 커맨드를 실행해보면 Podfile 이 생성된 것을 확인할 수 있을거에요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p><a href="https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/">CocoaPods - 설치 및 라이브러리 적용하기</a> 포스팅에서 간단하게 <strong>CocoaPods</strong> 를 설치하고 Library 를 적용하는 법가지 알아보았었는데요. 이번에는 CocoaPods 에서 사용할 수 있는 커맨드들을 같이 한번 공부해보도록 하겠습니다.</p>
<hr>
<h2 id="podfile-생성하기">Podfile 생성하기</h2>
<p>우리가 <strong>CocoaPods</strong> 를 설치하는 이유는 외부 라이브러리를 적용해서 사용하기 위해서잖아요? 그렇다면 가장 먼저할 일은 당연히 어떤 라이브러리를 설치하고 싶은지 CocoaPods 에게 알려주는 것입니다. 그래서 CocoaPods 는 그 목록을 <strong>Podfile</strong> 을 통해서 받게되는데요. 다음은 이 Podfile 을 생성하는 명령어입니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">pod <span style="color:#66d9ef">init</span>
</code></pre></div><p>설치를 희망하는 프로젝트 폴더 내에서 위 커맨드를 실행해보면 <strong>Podfile</strong> 이 생성된 것을 확인할 수 있을거에요.</p>
<hr>
<h2 id="library-설치하기">Library 설치하기</h2>
<p>설치는 우리가 이미 한 번 사용해 본 명령어에요. 프로젝트에 설치하고 싶은 Library 목록을 <strong>Podfile</strong> 에 입력하고 macOS 터미널에서 <code>pod install</code> 을 실행해주면 나머지는 CocoaPods 가 알아서 처리해줍니다.</p>
<pre><code class="language-console" data-lang="console">pod install
</code></pre><p>여기서 <strong>중요</strong>하게 알고넘어가야 할 부분이 하나 있습니다. 만약에 우리가 이미 <code>pod intall</code> 을 통해 라이브러리들을 설치했는데 나중에 알고보니 빠뜨린게 있다거나 프로젝트 상황이 바뀌어 추가적으로 라이브러리를 설치해야한다면 어떻게 해야할까요? 그때도 <code>pod instala</code> 하나만 알고 있으면 됩니다.</p>
<p>프로젝트 폴더에서 <strong>Pods 폴더</strong>와 <strong>Podfile.lock</strong> 파일을 삭제하고 <strong>Podfile</strong> 에 추가적으로 설치하고 싶은 Library 를 작성하고(완전히 새롭게 설치하는 개념이니 기존에 설치했었던 라이브러리 목록도 당연히 있어야 합니다.) <code>pod install</code> 을 실해주면 끝입니다. 그리고 CocoaPods 관련 오류가 발생했을 때도 이 방법으로 재설치를 하면 해결되는 경우도 많으니 꼭 기억해두세요!</p>
<hr>
<h2 id="library-버전-업데이트">Library 버전 업데이트</h2>
<p>프로젝트의 진행이 오래되었거나하는 등의 이유로 적용된 Library 의 버전이 구버전이라면 <code>pod update</code> 를 통해 최신 버전으로 업데이트 할 수 있습니다. 그러나 버전이 바뀌게 되면 이전에는 잘 작동했던 코드들이 더 이상 정상적으로 동작하지 않아 손을 많이 봐줘야 할 수도 있다는 점은 꼭 염두해두세요.</p>
<pre><code class="language-console" data-lang="console">pod update
</code></pre><p>그리고 추가적으로 새로운 Library 를 설치하고자할 때는 이 명령어로는 아무것도 할 수 없습니다. <code>pod update</code> 는 이미 설치되어있는 Library 즉 <strong>Podfile.lock</strong> 에 기재되어있는 것들에 대한 버전을 관리하는 명령어일 뿐입니다. 새로운 라이브러리 설치는 <strong>pod install</strong> 을 통해서만 진행할 수 있습니다.</p>
<hr>
<h2 id="repo-업데이트">Repo 업데이트</h2>
<p><strong>CocoaPods</strong> 에는 모든 라이브러리의 리스트를 관리하는 <strong>Repo</strong> 라는 저장소가 있습니다. 그리고 Repo 안에는 <strong>Spec</strong> 이 존재하며 Spec  은 각 라이브러리에 대한 필수정보들을 보관합니다. 그리고 이렇게 Repo 내의 라이브러리 Spec 업데이트를 다음 명령어를 통해 실행할 수 있습니다.</p>
<pre><code class="language-console" data-lang="console">pod repo update
</code></pre><p>이렇게만해서는 무엇을 업데이트 하는건지 아직 잘 감이 오지 않잖아요? 스펙은 각 라이브러리에 대해 아래와 같은 정보들을 보관하고 있습니다. 이 내용들을 최신 버전으로 만드는 것이 pod repo update 명령어라고 생각해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbk4dd3%2FbtqGrBr0Xud%2FG4Kr8YsDLlGJWOYwG3uKu1%2Fimg.png" alt="Pod Spec File"></p>
<p>그래서 이걸 언제사용하느냐? 저도 아직 정확히는 모릅니다 ㅎㅎㅎ;;;</p>
<p>그러니까 일단 지금은 <strong>CocoaPods 관련 오류</strong>가 발생했을 때 실행해주면 해결되는 경우가 있다 이렇게 알려드릴게요.</p>
<hr>
<h2 id="내-시스템에-설치된-cocoapods-버전-확인하기">내 시스템에 설치된 CocoaPods 버전 확인하기</h2>
<p>협업을 하면서 여러가지 오류를 마주치다보면 협업하는 사람과 내 CocoaPods 의 버전이 달라서 발생하는 오류인 경우도 있습니다. 이럴 때는 서로 <strong>같은 버전</strong>의 CocoaPods 를 사용하고 있는지 확인해 주세요.</p>
<pre><code class="language-console" data-lang="console">pod --version
</code></pre><hr>
<h2 id="library-검색하기">Library 검색하기</h2>
<p>CocoaPods 의 홈페이지에서만 라이브러리의 목록을 확인할 수 있는 것은 아닙니다. 터미널에서도 손쉽게 Library 확인이 가능합니다.</p>
<pre><code class="language-console" data-lang="console">pod search QUERY
</code></pre><p><strong>QUERY</strong> 라고 써진 자리에 우리가 검색하고 싶은 Library 의 이름을 입력하면 Terminal 에서 결과를 확인할 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAaSwu%2FbtqGkjNgZD8%2F8yJKkpCH1wqnwH7us5f4q1%2Fimg.png" alt="Terminal 에서 Library 검색"></p>
<p>이렇게 결과가 표시됩니다. 각 검색결과의 3번째 줄에 우리가 <strong>Podfile</strong> 의 입력에 필요한 정보가 있고 이외에도 꼭 필요한 정보들만 보여주니 터미널에서 검색하는게 훨씬 더 직관적이고 편리한 느낌이네요.</p>
<hr>
<h2 id="cache-확인하기">Cache 확인하기</h2>
<p>우리가 설치했던 라이브러리의 캐시를 확인할 수 있는 명령어 입니다. 저도 이 포스팅을 작성하려고 공부하면서 처음 알게된 명령어에요. 그냥 이런게 있다 정도만 알아두고 솔직히 별로 쓸 일은 없지 않을까 그런 생각을 합니다.</p>
<pre><code class="language-console" data-lang="console">pod cache list
</code></pre><hr>
<h2 id="cache-청소하기">Cache 청소하기</h2>
<p>위에서 확인한 캐시 목록에 있는 데이터를 전부 지우는 명령어입니다. 그래서 이걸 굳이 왜지울까요?? 캐시의 특성상 특별히 오류가 발생하지 않거나 용량을 무지막지하게 잡아먹는 상황이 아니라면 그냥 놔두는게 더 좋을 것 같아요.</p>
<pre><code class="language-console" data-lang="console">pod cache clean --all
</code></pre><hr>
<p>이렇게 <strong>CocoaPods</strong> 에서 제공하는 CLI 커맨드를 공부해보았습니다. 필수로 사용하거나 자주 쓸만한 명령어들도 있었고 거의 사용하지 않을 것 같은 명령어들도 있었던 것 같아요. 이외에도 수많은 명령어들이 있지만 지금 당장 우리한테 필요하지 않기 때문에 나중에 차차 공부할 일이 있다면 이 곳에 업데이트 하도록 하겠습니다.</p>
]]></content>
        </item>
        
        <item>
            <title>Firebase - Sign in with Google 구현하기 with UIKit</title>
            <link>https://kasroid.github.io/posts/ios/20200904-sign-in-with-google-uikit/</link>
            <pubDate>Fri, 04 Sep 2020 22:22:20 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200904-sign-in-with-google-uikit/</guid>
            <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다. · Swift 5.2.4 · Firebase 6.29.0
 Intro 이번에는 Google 아이디로 로그인할 수 있도록 구현해볼거에요. Apple 로그인은 Xcode 에서 Native 로 지원이 되지만 Google 로그인은 그렇지 않기 때문에 Firebase 를 사용해야 해서 조금 더 복잡한 편입니다. 그래도 천천히 따라해보시면 문제없을 거에요!
CocoaPods 설치 만약에 여러분이 CocoaPods 를 설치한 적이 없다면 Xcode 프로젝트에 Firebase 를 연동하기 위해 CocoaPods 가 우선적으로 설치되어 있어야합니다. 설치 방법은 CocoaPods - 설치 및 라이브러리 적용하기 포스팅을 참고해주세요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 이하 버전을 기준으로 작성되었습니다.
· Swift 5.2.4
· Firebase 6.29.0</p>
</blockquote>
<h2 id="intro">Intro</h2>
<p>이번에는 Google 아이디로 로그인할 수 있도록 구현해볼거에요. Apple 로그인은 Xcode 에서 Native 로 지원이 되지만 Google 로그인은 그렇지 않기 때문에 Firebase 를 사용해야 해서 조금 더 복잡한 편입니다. 그래도 천천히 따라해보시면 문제없을 거에요!</p>
<h3 id="cocoapods-설치">CocoaPods 설치</h3>
<p>만약에 여러분이 CocoaPods 를 설치한 적이 없다면 Xcode 프로젝트에 Firebase 를 연동하기 위해 CocoaPods 가 우선적으로 설치되어 있어야합니다. 설치 방법은 <a href="https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/">CocoaPods - 설치 및 라이브러리 적용하기</a> 포스팅을 참고해주세요.</p>
<h3 id="importing-firebase">Importing Firebase</h3>
<p>기초적인 Firebase 와 Xcode 의 연동방법은 <a href="https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/">Firebase - Xcode 프로젝트와 연동하기</a> 포스팅을 통해 공부했었습니다. 그래서 이번 포스팅에서는 지난 글과 달라지는 부분에 대해서만 공부해보도록 할게요. Firebase 연동과정에서 Pod 를 설치하라는 메세지가 나오는 부분에까지 진행해주세요.</p>
<hr>
<h2 id="pod-libraries-설치하기">Pod Libraries 설치하기</h2>
<p>Terminal 에서 Xcode 에 Firebase 파일 설치를 위해 터미널에서 내 프로젝트가 있는 폴더 내부로 이동해주세요. 이동을 완료했다면 <code>pod init</code> 을 진행해주세요. 그러면 새롭게 <strong>Podfile</strong> 이 생성되었을 거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcqjmPU%2FbtqGdEDvpDs%2FJdkYOimUDKEvWR13xRONB0%2Fimg.png" alt="Terminal 에서 pod init"></p>
<p><strong>Podfile</strong> 을 열고 아래처럼 입력해주세요. 우리가 입력한 부분은 총 3가지에요.</p>
<ul>
<li>pod &lsquo;Firebase/Analytics&rsquo;</li>
<li>pod &lsquo;Firebase/Auth&rsquo;</li>
<li>pod &lsquo;GoogleSignIn&rsquo;</li>
</ul>
<p>이 중 첫번째 <strong>Firebase/Analytics</strong> 는 우리가 처음에 프로젝트 설정할 때 Analytics 를 등록했으니까 설치 해주는 것이고 Google 로그인에 필수 항목은 아닙니다. 혹시 체크 해제하고 진행하신 분들은 첫번째 항목은 설치할 필요가 없어요~</p>
<pre><code class="language-console" data-lang="console"># Uncomment the next line to define a global platform for your project
# platform :ios, '9.0'

target 'SignInWithGoogle_Example' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!

  # Pods for SignInWithGoogle_Example
  pod 'Firebase/Analytics'
  pod 'Firebase/Auth'
  pod 'GoogleSignIn'

end
</code></pre><p><strong>Podfile</strong> 수정 후 꼭 저장하고 다시 터미널로 돌아가서 <code>pod install</code> 을 진행해 주세요. 인스톨을 마치고 폴더를 열어보면 기존 Xcode 프로젝트 파일과는 조금 다른 흰색 <code>.workspace</code> 파일이 생성되어 있습니다. 앞으로 우리는 기존 파일이 아닌 이 파일에서 코드 작업을 진행할 거에요. 그럼 기존 파일을 종료하고 새로운 파일을 열어볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FsOBKL%2FbtqGc8ykNAc%2FNgqqDbzpMOYXtD6wcsyI71%2Fimg.png" alt="Finder 의 workspace 파일"></p>
<p>파일을 실행하고 <strong>Firebase 홈페이지</strong>로 돌아가 Next 를 누르면 다음과 같은 화면을 볼 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FskVh0%2FbtqGfaaqioU%2FCbqRXgBenJygPe35E7qsOK%2Fimg.png" alt="Firebase 홈페이지 AppDelegate 화면"></p>
<p>먼저 <strong>AppDelegate</strong> 파일에서 <strong>Firebase</strong> 와 <strong>GoogleSignIn</strong> 을 import 해주도록 합시다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Firebase</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">GoogleSignIn</span>
</code></pre></div><p>그 다음에는 기본제공 함수 중 첫번째 내부에 <code>FirebaseApp.configure()</code> 함수를 입력해 주세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">application</span>(<span style="color:#66d9ef">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
    <span style="color:#75715e">// Override point for customization after application launch.</span>
    FirebaseApp.configure()
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p>마지막으로 ViewController 로 돌아가 다시 한번 <strong>Firebase</strong> 와 <strong>GoogleSignIn</strong> 을 import 해줍니다. 이제 몇 가지 설정만 더하면 됩니다 ㅎㅎ</p>
<p>다시 Firebase 로 돌아가 Next 를 누르면 마지막으로 아래와 같은 화면이 뜰텐데 Xcode 에서 시뮬레이터를 실행하고 잠시 기다리시면 <strong>Continue to console</strong> 버튼이 활성화 될거에요. 만약에 계속 활성화되지 않으면 <strong>Skip this step</strong> 버튼으로 그냥 넘어가주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcn7Szc%2FbtqGfsvor5k%2FUuWVRYDSvULq0Kg9FS3QDK%2Fimg.png" alt="Firebase Verification"></p>
<p>자 다들 이제 이렇게 생긴 Firebase 프로젝트 내의 메인화면으로 오셨죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbJz3Gi%2FbtqGdEXNcjC%2FJzaKd63COxABwRxECaiji0%2Fimg.png" alt="Firebase 프로젝트 메인화면"></p>
<p>여기서 좌측의 <strong>Authentication</strong> 버튼을 누르고 <strong>Sign-in method</strong> 탭을 클릭합니다. 리스트에서 <strong>Google</strong> 을 선택하고 <strong>Enabled</strong> 로 바꿔주세요. 참고로 상태를 바꾸려면 이메일을 반드시 선택해야 합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcLPQHu%2FbtqGfuteUoK%2FoQ5vlBK07aetFftfy40syK%2Fimg.png" alt="Firebase Google 활성화"></p>
<hr>
<h2 id="google-로그인-프로세스-구현하기">Google 로그인 프로세스 구현하기</h2>
<p>이제 Firebase 홈페이지에서 세팅은 모두 마쳤습니다. 다음으로는 Xcode 로 다시 돌아와 <strong>GoogleService-Info.plist</strong> 파일의 <strong>REVERSED_CLIENT_ID</strong> 의 항목을 복사합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FmKAQy%2FbtqGdzJiPQ4%2FEnHmeffYQJ1k9POT8qkx31%2Fimg.png" alt="Xcode GoogleService-Info.plist"></p>
<p>복사가 되었으면 좌측의 Navigator 에서 프로젝트 파일을 클릭하고 <strong>Info</strong> 탭으로 들어가보면 하단에 <strong>URL Types</strong> 가 있습니다. 이 곳을 펼치고 <strong>+</strong> 버튼을 눌러 <strong>URL Schemes</strong> 칸에 복사한 <strong>REVERSED_CLIENT_ID</strong> 값을 붙여넣어 주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlvykU%2FbtqGdzJiUs4%2FDkZN9MBSkxxd3RXMfRDnc0%2Fimg.png" alt="Xcode Info Tab"></p>
<p>다음으로는 이제 <strong>GIDSignInDelegate</strong> 를 <strong>AppDelegate</strong> 로 돌아가 채택해주어야 합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AppDelegate</span>: UIResponder, UIApplicationDelegate, GIDSignInDelegate
</code></pre></div><p>그리고 <strong>GIDSignInDelegate</strong> 의 필수구현 method 인 <code>sign()</code> 도 함께 구현해줍니다. 함수의 내부 코드는 다른 부분부터 먼저 끝내고 마지막에 입력해주도록 할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sign</span>(<span style="color:#66d9ef">_</span> signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error!) {   

}
</code></pre></div><p>이제부터 우리는 <strong>GIDSignIn</strong> 이라는 인스턴스를 사용할 수 있게되는데 이것은 사용자가 구글 아이디로 로그인할 수 있도록 도와주는 인스턴스입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FclC0GB%2FbtqGgE3gbdO%2FARmjkbjb1ODxqPHaFjLUu0%2Fimg.png" alt="GIDSignIn Summary"></p>
<p>다음으로 기본제공 함수인 <code>application:didFinishLaunchingWithOptions:</code> 안에 우리가 조금 전 작성해놓은 <code>FirebaseApp.configure()</code> 코드 아래 다음 내용을 작성합니다. 두번째 줄은 우리가 프로토콜을 채택했으니 당연히 delegate 설정을 해주어야 하는 부분이고, 첫번째 줄은 sign-in method 가 동작하기 위해 반드시 필요한 코드라고하네요. 그냥 외워버리거나 자주 안쓴다면 필요할 때마다 찾아서 쓰는걸로&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">GIDSignIn.sharedInstance().clientID = FirebaseApp.app()?.options.clientID
GIDSignIn.sharedInstance().delegate = <span style="color:#66d9ef">self</span>
</code></pre></div><p>추가적으로 <code>application:openURL:options:</code> 함수를 구현하고 내부에 <code>handle()</code> method 를 구현합니다. 이 method 는 <strong>GIDSignIn</strong> 인스턴스의 <code>handleURL</code> method 를 호출하여 인증 프로세스가 끝날 때 애플리케이션이 수신하는 URL을 적절히 처리해준다고 합니다. 인증 프로세스의 결과에 따라 다른 URL 을 받는건지 어쩐건지&hellip; 알 수 없지만 아무튼 해야한다니까 그냥 구현해줍니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">@available(iOS <span style="color:#ae81ff">9.0</span>, <span style="color:#f92672">*</span>)
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">application</span>(<span style="color:#66d9ef">_</span> app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&gt; Bool {
    <span style="color:#66d9ef">return</span> GIDSignIn.sharedInstance().handle(url)
}
</code></pre></div><p>위 함수는 대놓고 <strong>iOS 9.0</strong> 이상에서만 구현이 된다고 써있잖아요? 만약에 거의 쓸 일은 없겠지만 정말 만약에 <strong>iOS 8.0</strong> 이상부터 지원해야할 일이 있다면 다음 함수도 구현해주세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">application</span>(<span style="color:#66d9ef">_</span> application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -&gt; Bool {
    <span style="color:#66d9ef">return</span> GIDSignIn.sharedInstance().handle(url)
}
</code></pre></div><p>그리고 사용자가 앱에서 disconnect 되었을 때 호출되는 함수인 <code>sign:didDisconnectWith</code> 함수도 구현해 줍니다. 우리는 지금 <strong>Google 로그인</strong>을 구현하는 것이 목적이므로, 일단 함수를 구현만 하고 이곳에는 코드를 따로 작성하지 않겠습니다. 앱이 disconnect 되었을 때 추가적인 action 이 필요하다면 이곳에 작성해주세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sign</span>(<span style="color:#66d9ef">_</span> signIn: GIDSignIn!, didDisconnectWith user: GIDGoogleUser!, withError error: Error!) {
    <span style="color:#75715e">// Perform any operations when the user disconnects from app here.</span>
}
</code></pre></div><p>마지막으로 우리가 초반에 작성해 놓았던 필수구현 함수 <strong>sign()</strong> 의 내부 코드를 작성해볼게요. 에러가 날 경우 print 와 함께 함수가 종료되도록했고, 성공적으로 로그인 했을 경우에는 <strong>credential</strong> 이 print 될 수 있도록 작성했습니다. 여러분은 이곳에서 로그인 결과에 따라 원하는 ViewController 로 이동하거나 하는 등의 액션을 추가한다거나 하는 코드를 입력해봐도 좋을 것 같아요 ㅎㅎ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sign</span>(<span style="color:#66d9ef">_</span> signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error?) {
    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> error = error {
        print(error)
        <span style="color:#66d9ef">return</span>
    }

    <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> authentication = user.authentication <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
    <span style="color:#66d9ef">let</span> credential = GoogleAuthProvider.credential(withIDToken: authentication.idToken,
                                                   accessToken: authentication.accessToken)
    print(credential.provider)
}
</code></pre></div><p>이제 거의 다 끝났으니까 조금만 더 힘내서 마무리 해볼게요!!</p>
<hr>
<h2 id="google-로그인-버튼-생성하기">Google 로그인 버튼 생성하기</h2>
<p>드디어 이것으로 <strong>AppDelegate</strong> 에서 작성할 코드는 모두 끝났고 이제 ViewController 로 넘어가서 나머지 작업과 버튼을 추가해서 실제로 <strong>Google 로그인</strong>이 동작하는지 확인해보도록 할게요. 거의 다 왔으니까 조금만 더 힘내봅시다!!</p>
<p>먼저 <code>viewDidLoad()</code> 에 다음 코드를 작성해볼게요. 첫번째 줄의 코드는 <strong>GIDSignIn</strong> 객체의 프레젠테이션 뷰 컨트롤러를 설정하고(Google 로그인 안내창을 어떤 뷰 컨트롤러에 띄울지 설정), 두번째 줄의 코드는 가능한 경우 자동으로 로그인을 할 수 있도록 도와주는 코드입니다. 두번째 줄의 코드는 자동 로그인이 필요하지 않다면 구현해주지 않아도 무방합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">GIDSignIn.sharedInstance()?.presentingViewController = <span style="color:#66d9ef">self</span>
GIDSignIn.sharedInstance().signIn()
</code></pre></div><p>다음으로 Google 로그인 버튼을 생성하고 View 의 가운데에 위치하도록 배치해 보겠습니다. 당연히 일반 버튼을 사용하면 안되고 <strong>GIDSignInButton()</strong> 을 상속받아 사용해야 합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> googleLoginButton = GIDSignInButton()
</code></pre></div><p>ViewController 에 적힌 코드는 아래와 같습니다. 우리가 작업을 미리 다른 곳에서 많이 해둬서인지 Controller 에서 구현할 부분은 많지 않네요 ㅎㅎ</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Firebase</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">GoogleSignIn</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#66d9ef">let</span> googleLoginButton = GIDSignInButton()

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
        GIDSignIn.sharedInstance()?.presentingViewController = <span style="color:#66d9ef">self</span>
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        view.addSubview(googleLoginButton)
        googleLoginButton.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>

        NSLayoutConstraint.activate([
            googleLoginButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            googleLoginButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
}
</code></pre></div><p>이제 실행시켜보면 버튼이 보이고 눌러보면 구글 로그인하는 화면이 보일거에요~ 해냈다!!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FddvGZV%2FbtqGgwKTjwy%2F3IYOtCbcTqBQXy3E552hF0%2Fimg.gif" alt="Simulator GoogleSignIn"></p>
<hr>
<h2 id="firebase-에-로그인-데이터-저장하기">Firebase 에 로그인 데이터 저장하기</h2>
<p>하지만 아직 끝이 아니에요. 사용자가 정상적으로 로그인 했을 때 그 정보를 우리가 저장해야하니까요. <strong>AppDelegate</strong> 로 돌아가 <code>sign:didSignInFor</code> 함수에 <code>Auth.auth().signIn(with: credential)</code> method 를 작성해야 합니다.</p>
<p>Auth 함수에서 else 쪽으로 빠지면 Firebase 에 로그인 데이터가 저장되게 됩니다. 가져올 수 있는 데이터는 사용자의 email 주소가 전부인 것 같네요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sign</span>(<span style="color:#66d9ef">_</span> signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error?) {
    <span style="color:#75715e">// ...</span>
    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> error = error {
        print(error)
        <span style="color:#66d9ef">return</span>
    }

    <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> authentication = user.authentication <span style="color:#66d9ef">else</span> { <span style="color:#66d9ef">return</span> }
    <span style="color:#66d9ef">let</span> credential = GoogleAuthProvider.credential(withIDToken: authentication.idToken,
                                                   accessToken: authentication.accessToken)
    Auth.auth().signIn(with: credential) { (authResult, error) <span style="color:#66d9ef">in</span>
        <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> error = error {
            print(error.localizedDescription)
        } <span style="color:#66d9ef">else</span> {
            print(<span style="color:#e6db74">&#34;Login Successful&#34;</span>)
        }
    }
}
</code></pre></div><p>마지막으로 로그아웃을 도와주는 method 입니다. 로그인을 했으니까 당연히 로그아웃이 있어야하잖아요? ㅎㅎ 근데 오늘은 구현하지 않을거에요. 그냥 버튼하나 만들어서 <strong>@objc</strong> method 로 넘겨주면 잘 작동될겁니다!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> firebaseAuth = Auth.auth()
<span style="color:#66d9ef">do</span> {
    <span style="color:#66d9ef">try</span> firebaseAuth.signOut()
} <span style="color:#66d9ef">catch</span> <span style="color:#66d9ef">let</span> signOutError <span style="color:#66d9ef">as</span> NSError {
    print (<span style="color:#e6db74">&#34;Error signing out: %@&#34;</span>, signOutError)
}
</code></pre></div><p>이번 포스팅은 내용이 정말 많이 길어졌네요. 여기까지 따라오신 분들 정말 수고많으셨습니다!! 그럼 이만~</p>
]]></content>
        </item>
        
        <item>
            <title>System - Sign in With Apple 구현하기 with UIKit</title>
            <link>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-uikit/</link>
            <pubDate>Sat, 29 Aug 2020 11:00:14 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-uikit/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 이번 새로운 프로젝트 진행 중에 소셜 로그인 서비스를 제공하기로 결정되었는데요. 앱에서 소셜 로그인을 하나라도 제공하게 되면 Apple 로그인도 반드시 지원해야 합니다. 요즘 로그인이 필요한 앱들은 웬만하면 소셜 로그인도 지원하는 추세니까 Apple 로그인도 구현해야되고&amp;hellip; 그러니까 지금 구현하는 방법을 알아두면 쓸 일이 많을거에요. 그럼 같이 한번 공부해볼까요~~
 Apple Developer Documentation 처음 접하는 내용은 무엇보다 공식문서를 먼저 살펴봐야겠죠!
이런저런 내용이 있긴한데 우리에게 필요한 부분은 App 과 Services 에 유저가 쉽게 로그인 할 수 있도록 도와주는 Framework 라는 정도인 것 같아요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>이번 새로운 프로젝트 진행 중에 소셜 로그인 서비스를 제공하기로 결정되었는데요. 앱에서 소셜 로그인을 하나라도 제공하게 되면 Apple 로그인도 반드시 지원해야 합니다. 요즘 로그인이 필요한 앱들은 웬만하면 소셜 로그인도 지원하는 추세니까 Apple 로그인도 구현해야되고&hellip; 그러니까 지금 구현하는 방법을 알아두면 쓸 일이 많을거에요. 그럼 같이 한번 공부해볼까요~~</p>
<hr>
<h2 id="apple-developer-documentation">Apple Developer Documentation</h2>
<p>처음 접하는 내용은 무엇보다 공식문서를 먼저 살펴봐야겠죠!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdNp10r%2FbtqGbjztlvZ%2FrKTcRAC7q3tuRBCHBKdlk0%2Fimg.png" alt="Apple 공식문서의 AuthenticationServices"></p>
<p>이런저런 내용이 있긴한데 우리에게 필요한 부분은 App 과 Services 에 유저가 쉽게 로그인 할 수 있도록 도와주는 Framework 라는 정도인 것 같아요. 코드 구현에 유용한 정보는 없어보이니 공식 문서는 이정도로 넘어가는걸로하고 그냥 직접 구현하면서 알아보도록 할게요!</p>
<hr>
<h2 id="entitlement-파일-생성하기">Entitlement 파일 생성하기</h2>
<p>먼저 새로운 프로젝트를 만들고 <strong>Signing &amp; Capabilities</strong> 카테고리로 넘어와 아래 이미지에서 빨간색 화살표로 표시된 <strong>+</strong> 버튼을 클릭해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQ9xAs%2FbtqGe9vtmiM%2FPUSCeM3D4iJRlYtFnL37UK%2Fimg.png" alt="Entitlement 파일 생성 버튼"></p>
<p>그러면 뭔가 익숙한 느낌의 새로운 창이 하나 뜹니다 ㅎㅎ 그러면 Sign 으로 검색하고 <strong>Sign In with Apple</strong> 을 찾아서 클릭해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbX2AwO%2FbtqGbHN03xM%2Fgw9fns2jabKRU0wrUPbjD0%2Fimg.png" alt="Sign In with Apple 검색"></p>
<p>참고로 Apple 에 개발자로 등록되지 않은 분들은 Sign In with Apple 이 검색되지 않을 수도 있어요. 이럴때는 <strong>Team</strong> 을 <strong>None</strong> 으로 설정하고 검색하면 보일거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FCMq8p%2FbtqGiTUi4DT%2F3DwenpNzuxvcg2knHXrx8K%2Fimg.png" alt="Team 설정"></p>
<p>이제 .entitlements 확장자를 가진 새로운 파일이 하나 생겼을 거에요. 뭔가 생소한 파일이죠?? 다행히 이곳에서 추가로 작업할 내용은 없습니다 ㅎㅎㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb8r5Je%2FbtqGfNyWHmo%2FbVicWmEJervLR9kmDMLGgk%2Fimg.png" alt="entitlement 파일 스크린샷"></p>
<hr>
<h2 id="import-authenticationservices">Import AuthenticationServices</h2>
<p>가장 먼저 우리가 해야할 일은 Apple 에서 로그인을 지원하기 위해 만든 인스턴스에 접근할 수 있도록 <strong>AuthenticationServices</strong> 를 import 해주어야 합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">AuthenticationServices</span>
</code></pre></div><hr>
<h2 id="sign-in-with-apple-버튼-생성하기">Sign In with Apple 버튼 생성하기</h2>
<p>이제 ViewController 에 <strong>Sign In with Apple</strong> 버튼을 생성해보도록 할게요. 여기서는 일반 UIButton 을 사용하는게 아니라 <code>ASAuthorizationAppleIDButton</code> 으로 인스턴스를 생성해야 합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> authorizationAppleIDButton = ASAuthorizationAppleIDButton()
</code></pre></div><p>처음보는 코드니까 당연히 공식문서를 보고 넘어가야겠죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbUAOZc%2FbtqGchhnEQp%2FQNIIp0nE7sDyZVrj1PJgpK%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDButton"></p>
<p>유저가 <strong>Sign In with Apple</strong> 을 시작할 수 있게 해주는 control 이라고 하네요. UIButton 처럼 <strong>UIControl</strong> 을 상속받고 있습니다. 그렇다면 어느정도 비슷한 성질을 가졌을 것 같네요. 이번엔 문서 아래쪽에 알아두면 좋을만한 내용이 있어 추가로 가져와봤어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fby4wXT%2FbtqGcgJwtvl%2FbWF4zHNX90xWDbzdbPdxZK%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDButton 2"></p>
<p>중간쯤에 Styling the Button 카테고리가 보이죠? 개발자가 <strong>cornerRadius</strong> 나 버튼의 <strong>style</strong> 을 일정 부분 수정할 수 있게 해놓은 것 같습니다. 이 부분은 나중에 시간날 때 직접 실험을 해보고 업데이트 하도록 할게요.</p>
<p>그럼 이제 버튼을 화면의 중앙에 오도록 배치해봅시다. <code>ASAuthorizationAppleIDButton</code> 도 결국 버튼의 일종이므로 <code>.addTarget</code> method 를 사용해 원하는 Action 을 구현할 수 있도록 <code>@objc</code> method 와 연결해 주었습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">AuthenticationServices</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">let</span> authorizationAppleIDButton = ASAuthorizationAppleIDButton()

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }
    
    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setAdditionalPropertyAttributes()
        setConstraints()
    }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAdditionalPropertyAttributes</span>() {
        authorizationAppleIDButton.addTarget(<span style="color:#66d9ef">self</span>, action: <span style="color:#66d9ef">#selector</span>(handleAuthorizationAppleIDButton(<span style="color:#66d9ef">_</span>:)), <span style="color:#66d9ef">for</span>: .touchUpInside)
    }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setConstraints</span>() {
        view.addSubview(authorizationAppleIDButton)
        authorizationAppleIDButton.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        
        NSLayoutConstraint.activate([
            authorizationAppleIDButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            authorizationAppleIDButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Selectors</span>
    <span style="color:#66d9ef">@objc</span> <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleAuthorizationAppleIDButton</span>(<span style="color:#66d9ef">_</span> sender: ASAuthorizationAppleIDButton) {
        print(<span style="color:#66d9ef">#function</span>)
    }
}
</code></pre></div><p>여기까지 코드를 작성하고 시뮬레이터를 실행해보면 이렇게 중앙에 버튼이 배치되고 정상적으로 <code>handleAuthorizationAppleIDButton</code> 함수 내부에 구현해둔 print 가 실행되는 것을 볼 수 있을거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fnpd9X%2FbtqGdD5leqo%2FhodOCdFMtz8KpL1WuPZxOK%2Fimg.png" alt="Simulator 실행화면"></p>
<hr>
<h2 id="login-process-구현하기">Login Process 구현하기</h2>
<p>이제 UI작업은 마쳤으니 실제로 로그인이 데이터 처리에 필요한 코드를 작성해 보겠습니다. 당연한 얘기지만 로그인 과정은 버튼이 눌렸을 때 실행되도록 하면 되니까 <code>handleAuthorizationAppleIDButton()</code> 함수에 코드를 작성할거에요.</p>
<p>로그인 과정을 처리하기 위해서 우리가 필수로 생성하고 접근해야하는 인스턴스는 <code>ASAuthorizationAppleIDProvider</code> 입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbiQElo%2FbtqGeufLNXc%2FO06TV2DYskSjliKPjZByt0%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDProvider"></p>
<p>Apple ID 를 사용해서 로그인 인증 요청을 생성해주는 메커니즘이라고하네요. 이번에는 Overview 부분도 주의깊게 봐야합니다. 우리가 생성해야할 <strong>provider</strong>, <strong>request</strong>, <strong>controller</strong> 에 대한 정보들이 있거든요. 그럼 이 정보들을 바탕으로 코드를 한번 작성해봅시다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">@objc</span> <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleAuthorizationAppleIDButton</span>(<span style="color:#66d9ef">_</span> sender: ASAuthorizationAppleIDButton) {
    <span style="color:#66d9ef">let</span> provider = ASAuthorizationAppleIDProvider()
    <span style="color:#66d9ef">let</span> request = provider.createRequest()
    request.requestedScopes = [.fullName, .email]
    <span style="color:#66d9ef">let</span> controller = ASAuthorizationController(authorizationRequests: [request])
    controller.performRequests()
}
</code></pre></div><p>그냥 공식문서에 있는 것과 똑같이 작성했어요 ㅎㅎ Provider 를 통해 Request 를 생성하고 생성된 Request 를 Controller 에게 전달해줘서 Controller 가 요청을 실행하는 개념입니다.</p>
<p>중간에 있는 <code>.requestedScopes</code> 는 우리가 유저로부터 전달받을 최소한의 정보를 요청할 수 있게 도와주는 method 입니다. 내부에 들어가보면 <strong>fullname</strong> 과 <strong>email</strong> 이렇게 최대 2가지만 요청할 수 있게 만들어져 있어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcbMXgx%2FbtqGbrkxlPF%2FkyLMKbilgArt77K5EFp6SK%2Fimg.png" alt=".requestedScopes 의 내부코드"></p>
<p>물론 이 2가지마저도 사용자가 거부하면 우리가 받을 수 있는 것은 유저의 identifier 뿐으로 이것으로 최소한의 식별만 가능하게 됩니다. 역시 개인의 보안을 중시하는 애플이에요 ㅎㅎ</p>
<p>하지만 이것으로 끝은 아닙니다. 아직 유저가 로그인에 성공하거나 실패했을 때 처리를 하지 않았고, 로그인 요청 창을 띄울 페이지도 설정해주지 않았거든요. 이 부분을 처리하기 위해서는 <code>ASAuthorizationControllerDelegate</code> 와 <code>ASWebAuthenticationPresentationContextProviding</code> 을 채택해야합니다.</p>
<p><code>ASAuthorizationControllerDelegate</code> 를 채택하고 나면 로그인이 성공적으로 처리되었을 때 호출될 <code>didCompleteWithAuthorization</code> 함수와 실패했을 때 호출될 <code>didCompleteWithError</code> 함수를 불러올 수 있게 됩니다.</p>
<p>그리고 <code>ASWebAuthenticationPresentationContextProviding</code> 에는 필수 구현 함수인 <code>presentationAnchor()</code> 에서 사용자에게 로그인 요청을 띄울 윈도우를 설정해줄 수 있습니다. 우리는 현재 View 의 Window 에서 바로 실행되도록 만들거에요. 자 그럼 지금까지 얘기한 내용들을 바로 코드로 구현해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: ASAuthorizationControllerDelegate {
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
    }
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithError error: Error) {
    }
}


<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: ASAuthorizationControllerPresentationContextProviding {
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">presentationAnchor</span>(<span style="color:#66d9ef">for</span> controller: ASAuthorizationController) -&gt; ASPresentationAnchor {
        <span style="color:#66d9ef">return</span> view.window!
    }
}
</code></pre></div><p>이전에 만들어 두었던 <code>handleAuthorizationAppleIDButton()</code> 함수 내부의 controller 에게 <strong>delegate</strong> 와 <strong>provider</strong> 위임도 빼먹지 말고 꼭 해주세요!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">controller.delegate = <span style="color:#66d9ef">self</span>
controller.presentationContextProvider = <span style="color:#66d9ef">self</span>
</code></pre></div><p>이제 거의 끝이 보입니다!</p>
<p>먼저 로그인 정보가 성공적으로 들어왔을 때에 대한 처리 코드를 작성해볼게요. 당연히 <code>didCompleteWithAuthorization</code> 함수에 작성해야겠죠? 이 함수는 호출되면 <strong>ASAuthorization</strong> 타입을 가진 parameter 와 함께 실행됩니다. 잠깐 <strong>ASAuthorization</strong> 에 대해 알아보자면&hellip;</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCgyLl%2FbtqGebAC1fT%2FbJ3fc7my35fmd1tVd58IoK%2Fimg.png" alt="Apple 공식문서의 ASAuthorization"></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbPztcT%2FbtqGevS85Ix%2FfXlJdcPlgNF9OHEoDpQODk%2Fimg.png" alt="Apple 공식문서의 ASAuthorization 2"></p>
<p>Controller 가 성공적으로 인증을 진행했을 때 캡슐화해서 전달해주는 정보라고하네요. 내부에 <strong>credential</strong> 이라고하는 property 가 있고 이것은 성공적으로 인증된 사용자의 정보라고 합니다.. 지금은 캡슐화가 되어있는 상태이므로 <strong>credential</strong> 정보에 접근하기 위해 <strong>ASAuthorizationAppleIDCredential</strong> 타입으로 캐스팅이 필요합니다. 생소한 타입이죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAfI3n%2FbtqGe8XK9qT%2FUt5K1fhfdgYw86ola0aCkk%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDCredential"></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbyG1aA%2FbtqGdthHid0%2Fef21K8UmkKpUkyitmZkGWk%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDCredential 2"></p>
<p>설명을 보면 encapsulation 이라는 단어가 사라지고 Apple ID 를 사용해 성공적으로 인증된 결과라고 써져있어요. 이것으로 타입 캐스팅을하면 캡슐이 해제되고 우리가 원하는 정보들에 접근할 수 있게됩니다. 문서의 Getting Contact Information 카테고리에 <code>fullName</code> 과 <code>email</code> 이 적혀있고 우리가 접근할 수 있을 것 같아요. 그리고 <code>user</code> 라는 property 가 매우 중요한데 일종의 <strong>identifier</strong> 로 우리가 무조건 받을 수 있는 소중한 정보입니다. 이 값으로 우리는 유저가 누구인지 판단을 해야하거든요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> appleIDCredential = authorization.credential <span style="color:#66d9ef">as</span>? ASAuthorizationAppleIDCredential {
        <span style="color:#75715e">// Create an account in your system.</span>
        <span style="color:#66d9ef">let</span> userIdentifier = appleIDCredential.user
        <span style="color:#66d9ef">let</span> userFirstName = appleIDCredential.fullName?.givenName
        <span style="color:#66d9ef">let</span> userLastName = appleIDCredential.fullName?.familyName
        <span style="color:#66d9ef">let</span> userEmail = appleIDCredential.email
}
</code></pre></div><p>그리고 <code>fullName</code> 은 <code>.givenName</code> 과 <code>.familyName</code> 으로 나눠서 받을 수도 있어요. 이렇게 첫 가입절차에서 사용자의 정보를 가져오는 코드를 완성했습니다. 이제 사용자가 최초 가입 후 로그인을 마치고 다음 로그인 시부터 우리가 사용자를 식별하여 로그인을 수 있도록 도와주는 코드를 작성해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> appleIDProvider = ASAuthorizationAppleIDProvider()
appleIDProvider.getCredentialState(forUserID: userIdentifier) { (credentialState, error) <span style="color:#66d9ef">in</span>
    <span style="color:#66d9ef">switch</span> credentialState {
    <span style="color:#66d9ef">case</span> .authorized:
        <span style="color:#75715e">// The Apple ID credential is valid. Show Home UI Here</span>
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">case</span> .revoked:
        <span style="color:#75715e">// The Apple ID credential is revoked. Show SignIn UI Here.</span>
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">case</span> .notFound:
        <span style="color:#75715e">// No credential was found. Show SignIn UI Here.</span>
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">default</span>:
        <span style="color:#66d9ef">break</span>
    }
}
</code></pre></div><p><strong>authorized</strong> - 사용자의 identifier 가 <strong>정상적으로</strong> 인식되었을 경우<br>
<strong>revoked</strong>- 사용자의 identifier 가 <strong>유효하지 않은</strong> 경우<br>
<strong>notFoun</strong> - 사용자의 identifier 를 <strong>찾지 못한</strong> 경우</p>
<p><strong>CredentialState</strong> 에는 경우의 수가 총 3가지가 있고 상황에 맞는 코드를 각 case 에 작성해주면 됩니다. 우리는 추가 작업이 필요하지 않으므로 따로 작성하지 않겠습니다.</p>
<p>에러처리는 따로 작성해주지 않아도 무방하지만 그래도 에러발생 시 우리가 알 수 있도록 print 를 하나 남겨두겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithError error: Error) {
    print(error)
}
</code></pre></div><p>이제 앱을 한번 실행해볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQav98%2FbtqGc8rpXao%2FLkKCEUV8dYrF1MplHwXM11%2Fimg.png" alt="Simulator 실행화면"></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fk1XaG%2FbtqGdEpVPLE%2F4KgZrwmU8MBhNkQoGJbqIk%2Fimg.png" alt="Simulator 실행화면 2"></p>
<p>이렇게 가입이 정상적으로 진행됩니다. Print 로 내가 가입 시 제공한 정보(이메일 및 이름)들과 <strong>identifier</strong> 가 console 에 출력될거에요. 하지만 첫번째를 제외한 이후 로그인 부터는 <strong>identifier</strong> 만 print 되고 나머지는 <strong>nil</strong> 값이 들어옵니다. 그럼 이번 포스팅은 이것으로 마치겠습니다.</p>
<hr>
<h2 id="함께-참고하면-좋은-포스트">함께 참고하면 좋은 포스트</h2>
<p><img src="" alt="Apple Sign In: 계정 로그아웃하기"></p>
]]></content>
        </item>
        
        <item>
            <title>CocoaPods - 설치 및 라이브러리 적용하기</title>
            <link>https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/</link>
            <pubDate>Sun, 23 Aug 2020 19:14:16 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/</guid>
            <description>오늘은 CocoaPods 가 무엇인지 알아보도록 하겠습니다.
개발을 할 때 모든 것을 스스로 만드는 것도 좋지만 필요에 따라 Library 를 써서 시간과 노력을 절약하고 다른 곳에 좀 더 신경을 쓰는 것이 좋을 때도 있을겁니다. 하지만 그렇게 Library 사용 빈도가 점점 늘게되면 나중에는 Library 를 찾거나 관리하는데 시간이 많이 소모되게 됩니다. 그럼 아무래도 Library 를 쓰는 의미가 많이 퇴색되겠죠? 그래서 Xcode 에서 이런 Library 관리를 쉽게 할 수 있도록 도와주는 것이 CocoaPods 입니다.</description>
            <content type="html"><![CDATA[<p>오늘은 CocoaPods 가 무엇인지 알아보도록 하겠습니다.</p>
<p>개발을 할 때 모든 것을 스스로 만드는 것도 좋지만 필요에 따라 Library 를 써서 시간과 노력을 절약하고 다른 곳에 좀 더 신경을 쓰는 것이 좋을 때도 있을겁니다. 하지만 그렇게 Library 사용 빈도가 점점 늘게되면 나중에는 Library 를 찾거나 관리하는데 시간이 많이 소모되게 됩니다. 그럼 아무래도 Library 를 쓰는 의미가 많이 퇴색되겠죠? 그래서 Xcode 에서 이런 Library 관리를 쉽게 할 수 있도록 도와주는 것이 CocoaPods 입니다.</p>
<p>즉 한마디로 CocoaPods 는 Library 관리 툴입니다. 각종 Libarary 를 설치, 삭제, 그리고 버전 관리를 할 수 있습니다. 개인 프로젝트에서도 충분히 그 역할을 다하지만, 여러 사람이 한 프로젝트를 공유하여 협업할 때 CocoaPods 내의 Library List (Podfile.lock) 파일만 전달해도 모두가 동일한 버전의 라이브러리를 손쉽게 설치할 수 있도록 도와주기도 합니다.</p>
<p>최근에는 Apple 이 공식적으로 지원하고 설치 및 관리가 더 편한 Swift Package Manager 가 등장하긴 했지만 SPM 에는 없는 Library 들이 CocoaPods 로는 존재하는만큼 Library 사용에 있어 절대로 빼놓을 수 없는 것이 CocoaPods 입니다.</p>
<p>그럼 이제 설치부터 사용방법까지 같이 한번 알아보도록 해요.</p>
<hr>
<h2 id="공식-홈페이지에서-cocoapods-설치하기">공식 홈페이지에서 CocoaPods 설치하기</h2>
<p>먼저 CocoaPods <a href="https://cocoapods.org">공식 홈페이지</a>에 들어가보세요. 접속해서 스크롤을 조금만 내려보면 다음과 같은 페이지를 볼 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FctQclR%2FbtqGp1Sb86x%2FVr2aM67JGol03cxmVfzCVk%2Fimg.png" alt="Official Website"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">sudo gem install cocoapods
</code></pre></div><p>그럴리 없겠지만 만약에 홈페이지에 접속이 안되거나 명령어를 찾지 못하는 분들은 위 코드를 복사해서 붙여넣으셔도 됩니다 ㅎㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFhYYm%2FbtqGmPLoMCG%2Fqm2l0KV5KqacO5w89ksu3k%2Fimg.png" alt="Intallation Screenshot"></p>
<p>자 이렇게 하고 Return 키를 누르면 자동으로 설치가 완료됩니다. 자물쇠 모양이 뜬다면 맥북에 설정해 놓은 비밀번호를 치고 다시 한번 Return 키를 눌러주세요. 참고로 비밀번호 칠 때 아무것도 안쳐지는 것처럼 보일 수 있는데 그냥 치면 됩니다 ㅎㅎ</p>
<p>이렇게 CocoaPods 에 설치를 마쳤어요. 정말 간단했죠?</p>
<hr>
<h2 id="homebrew-로-cocoapods-설치하기">Homebrew 로 CocoaPods 설치하기</h2>
<p>macOS Catalina 부터 CocoaPods 가 정상적으로 설치되지 않는 경우가 있다고 하네요. 저도 방금 맥북이 꼬여서 포맷 후에 CocoaPods 를 설치하는 과정에서 문제가 생겨서 많이 헤매다가 결국 Homebrew 를 통해 설치하는 방법으로 해결했습니다.</p>
<p>오히려 위에서 안내드렸던 방법보다 설치 및 삭제 관리까지 더 용이하기 때문에 저는 개인적으로 이제부터는 항상 Homebrew 를 통해서 설치하게 될 것 같아요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">brew install cocoapods
</code></pre></div><p>혹시 아직 Homebrew 를 설치하지 않은 분들은 다음 포스팅을 참고하여 먼저 설치를 진행해 주세요.</p>
<hr>
<h2 id="프로젝트에-cocoapods-적용하기">프로젝트에 CocoaPods 적용하기</h2>
<p>자 그럼 실습을 위해 새로운 Xcode 프로젝트를 시작해볼게요. 프로젝트 생성 후에 해당 폴더 내로 들어가보면 아래와 같은 화면을 볼 수 있을거에요. 폴더 하나와 .xcodeproj 파일이 하나 있네요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb5ex6P%2FbtqGmPYW2SG%2FifzgjKkGvbAcphAj8kWNhK%2Fimg.png" alt="Finder Screenshot"></p>
<p>이제 이 곳에 CocoaPods 를 적용해보겠습니다. macOS 터미널에서 방금 전 만든 폴더가 있는 곳으로 들어간 뒤에 다음 명령어를 입력해주세요.</p>
<pre><code class="language-Console" data-lang="Console">pod init
</code></pre><p>아래 스크린샷을 보면 처음에는 파인더에서 보았듯이 파일이 딱 2개만 있었는데 CocoaPods 를 프로젝트 폴더에 적용한 뒤에는 Podfile 이라는 새로운 파일이 하나 더 생긴 모습을 볼 수가 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FMawt6%2FbtqGpzhk9fx%2F8gVSkmtQStQ2g4TEaXYqP0%2Fimg.png" alt="Terminal Screenshot"></p>
<hr>
<h2 id="library-적용하기">Library 적용하기</h2>
<p>이렇게 새로운 Library 를 설치할 준비가 되었습니다. 그렇다면 라이브러리는 어떻게 설치할 수 있을까요? 조금 전에 우리가 방문했었던 CocoaPods 홈페이지로 돌아가 검색창에 SnapKit 을 입력해보세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FBO9XI%2FbtqGrfIZQ3Q%2Fb7jLyQjSOkGMWPSBDvN4CK%2Fimg.png" alt="Searching Cocoapods"></p>
<p>이런식으로 결과가 보일거에요. 이중 제일 위의 SnapKit 을 클릭해서 들어가보도록 할게요. 우측에 옅은 회색으로 보이는 숫자는 현재 제가 설치하는 시점에서 가장 최신 버전이 5.0.1 이라는 뜻입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbSjJEo%2FbtqGpzIng6Y%2FKmkFWDj7zbhKm2IaTxqC8K%2Fimg.png" alt="Installation Guideline"></p>
<p>스크롤을 조금만 내려보면 Installation 이라는 문구가 보일거에요. 이곳에 CocoaPods 라고 써져있네요. 딱 봐도 이곳을 살펴보면 될 것 같은 느낌이 들죠? 첫번째로 보이는 명령어는 우리가 이미 진행한 CocoaPods 의 설치법이고 우리에게 지금 필요한 것은 두번째 코드 블럭입니다. 처음보면 뭔가 복잡해보일 수 있지만 우리가 필요한 코드는 밑에서 두번째 줄에 위치한 pod 로 시작하는 명령어 단 한줄이에요. SnapKit 라이브러리의 5.0.0 version 이상을 설치하겠다는 의미입니다.</p>
<pre><code class="language-Console" data-lang="Console">pod 'SnapKit', '~&gt; 5.0.0'
</code></pre><p>그럼 조금 전 우리가 생성한 Podfile 을 열어주세요. 기본 텍스트 편집기도 좋고 Vim 도 좋고 그냥 텍스트 에디터 중 어떤 것으로 열어도 괜찮습니다. 저는 VSCode 로 작성해보겠습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FLQGDR%2FbtqGmQjgWjr%2FrMOhwF6McvnpFLyDAY2REk%2Fimg.png" alt="VScode Screenshot"></p>
<p>이제 SnapKit 을 설치할 준비가 모두 끝났습니다! 파일을 저장하고 닫은 뒤 터미널로 돌아가 설치 명령어를 입력해보도록 할게요 설치니까 당연히 install 이라고 치면되겠죠?</p>
<pre><code class="language-Console" data-lang="Console">pod install
</code></pre><p>명령어를 실행하고 나면 다음과 같은 화면이 보이게 됩니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqvMHI%2FbtqGiqMDEq6%2FRQ2UU0pJATQa69Y8wBa0kK%2Fimg.png" alt="Terminal Screenshot"></p>
<p>그럼 초반에 열어둔 Xcode 프로젝트 파일이 있던 파인더를 다시 한번 봐볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc1DLt7%2FbtqGpxcplX3%2FhZWdioAtSTguqNDFpwJ7K1%2Fimg.png" alt="Finder Screenshot"></p>
<p>무언가 파일들이 엄청 많이 생겼어요 ㅎㅎㅎ 이게 전부 다 CocoaPods 관련 파일들이랍니다. Podfile 은 우리가 프로젝트에 설치하기 원하는 라이브러리를 찾아 이름과 버전을 적었던 파일이었던거 기억하시죠? 그럼 다른 파일들은 무엇인지 잠깐 알아보도록 할게요.</p>
<p>먼저 Podfile.lock 파일은 Podfile 에 적혀있던 목록들을 설치하고나면 이 프로젝트에 설치되어 있는 라이브러리의 목록과 버전을 정확하게 보관하고 있는 파일입니다. 우리가 방금 SnapKit 을 설치했을 때는 최신 버전이 5.0.0 대 였지만 먼 훗날 언제가 우리가 이 파일을 누군가에게 전달하고 그 사람이 SnapKit 을 설치할 때는 최신 버전이 6.0.0 대 일 수 있잖아요? 그럼 라이브러리 호환성으로 인한 충돌이 발생할 수 있기 때문에 이런 상황을 방지하고자 CocoaPods 는 Podfile.lock 에 본인이 설치한 라이브러리들의 대한 정보를 정확히 기록해두는 거에요. 즉 이 파일만 공유하면 프로젝트에 설치된 라이브러리의 버전을 협업하는 사람들과 항상 동일하게 유지할 수 있게됩니다.</p>
<p>Pods 폴더는 실제 라이브러리에 관련된 데이터가 들어가있는 곳이에요. 무언가 문제가 생겨 처음부터 다시 설치하고자할 때는 이 폴더를 통째로 삭제하고 pod install 을 통해 라이브러리를 다시 설치할 수 있습니다.</p>
<p>그리고 이전에는 볼 수 없었던 흰색 Xcode 파일이 생겼습니다. 확장자는 .xcworkspace 로 CocoaPods 가 설치된 이후부터는 프로젝트 실행 시 xcodeproj 대신 이 파일을 사용해야 합니다. 기존 xcodeproj 파일과 완전히 동일하고 한쪽을 수정하게되면 다른 한쪽도 수정되지만 xcodeproj 에서는 CocoaPods 로 설치한 라이브러리들을 정상적으로 인식할 수 없으므로 사실상 작업이 불가능합니다. 그러니까 CocoaPods 로 Xcode 프로젝트에 라이브러리를 설치했다? 그럼 .xcworkspace 파일만 사용한다 이렇게 생각해주세요.</p>
<p>그럼 이제 workspace 파일을 실행시켜서 SnapKit 을 import 해보겠습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxFd1d%2FbtqGiTHOjs5%2FpPmAuCNLCNEU9komYfgXSK%2Fimg.png" alt="Xcode Screenshot"></p>
<p>좌측 Navigator 에 기존에는 볼 수 없었던 새로운 파일들이 많이 생긴 것을 볼 수 있습니다. 우리가 특별히 건들 필요가 없는 파일들이니까 겁먹지 않아도 됩니다 ㅎㅎㅎ 그리고 정상적으로 SnapKit 이 import 된 것도 확인할 수 있습니다. 혹시라도 에러가 발생한다거나하는 문제가 있는 분들은 Xcode 를 완전히 껏다가 다시 한번 실행해주세요.</p>
<p>이렇게 CocoaPods 를 설치하고 간단하게 Library 를 적용하는 방법까지 알아보았습니다. 터미널이랑 웹페이지 등을 왔다갔다 해야되서 조금 복잡해보일 수도 있지만 다른 라이브러리들도 모두 동일한 방식으로 사용가능하니까 조금만 반복해보면 금방 익숙해질 수 있을거에요.</p>
]]></content>
        </item>
        
        <item>
            <title>Firebase - Xcode 프로젝트와 연동하기</title>
            <link>https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/</link>
            <pubDate>Mon, 10 Aug 2020 01:19:46 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/</guid>
            <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다.
· Firebase 6.29.0
· Swift 5.2.4
 Intro Firebase 한 번쯤 들어보지 않으셨나요? 초보 개발자가 모바일 앱을 개발하고 개인 앱 서버를 운영하는데 있어 빠질 수 없는 것이 Firebase 가 아닐까 합니다. 속도에 조금 불만이 있긴 하지만 사실 백엔드를 모르는 개발자가 이렇게 쉽고 간편하게 회원가입부터 데이터 관리까지 할 수 있는 서버를 그것도 일정수준까지는 무료로 운영할 수 있게 해주는 서비스가 또 어디있을까요? 이 서비스가 없었으면 저는 지금 Python 도 같이 배우고 있었을 것 같네요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 이하 버전을 기준으로 작성되었습니다.<br>
· Firebase 6.29.0<br>
· Swift 5.2.4</p>
</blockquote>
<h2 id="intro">Intro</h2>
<p><strong>Firebase</strong> 한 번쯤 들어보지 않으셨나요? 초보 개발자가 모바일 앱을 개발하고 개인 앱 서버를 운영하는데 있어 빠질 수 없는 것이 <strong>Firebase</strong> 가 아닐까 합니다. 속도에 조금 불만이 있긴 하지만 사실 백엔드를 모르는 개발자가 이렇게 쉽고 간편하게 회원가입부터 데이터 관리까지 할 수 있는 서버를 그것도 일정수준까지는 무료로 운영할 수 있게 해주는 서비스가 또 어디있을까요? 이 서비스가 없었으면 저는 지금 Python 도 같이 배우고 있었을 것 같네요. ~~ 물론 결국엔 배우는게 목표지만&hellip;~~</p>
<p>아무튼 <strong>Firebase</strong> 는 모바일 앱 개발자에게 백엔드 과정을 지원해주는 플랫폼 입니다. 그럼 오늘은 Xcode 프로젝트와 Firebase 를 연동하는 방법을 알아보도록 하겠습니다. 이 포스팅을 작성하는 시점에서는 Firebase 가 Swift Package Manager 를 지원하지 않아 CocoaPods 를 통해 설치하게되므로 CocoaPods 에 익숙하지 않은 분들은 <a href="https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/">CocoaPods - 설치 및 라이브러리 적용하기</a> 포스팅을 먼저 읽어보세요.</p>
<hr>
<h2 id="firebase-와-친해지기">Firebase 와 친해지기</h2>
<p><strong><a href="https://firebase.google.com">Firebase</a></strong> 는 Google 아이디만 있으면 특별히 가입할 필요도 없이 누구나 쉽게 사용할 수 있어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fvf8Bs%2FbtqGqWQ7iVw%2FccvCdS3f3xAcMLlKS2BGnK%2Fimg.png" alt="Firebase 홈페이지"></p>
<p>홈페이지에 접속하고 나면 이런 화면을 볼 수 있을거에요. 구글 아이디로 로그인이 되어있다면 우측 상단에는 본인의 프로필 사진도 보이게 됩니다 ㅎㅎ 만약에 정말 혹시라도 만약에 구글 아이디가 없으신 분들은 계정을 하나 만드세요&hellip;</p>
<p>그리고 프로필 사진 옆을 잘 보시면 <strong>콘솔로 이동</strong>이라는 항목이 보이시죠? 이걸 클릭해서 Firebase 프로젝트가 보이는 화면으로 들어가 봅시다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFhSiP%2FbtqGqahD4vV%2FlcRt5W5EawLI2icFZb0PJk%2Fimg.png" alt="콘솔로 이동"></p>
<p>저는 이미 Firebase 를 통해 여러 프로젝트를 진행했기 때문에 2개의 프로젝트가 보이지만 여러분은 아마 + 버튼 하나만 보일거에요. 이 버튼으로 Firebase 의 프로젝트를 생성하고 Xcode 프로젝트의 <strong>Bundle Identifier</strong> 를 이용해서 연결해주는 방식입니다. 연결이 되고나면 Xcode 프로젝트가 코드를 통해 Firebase 를 찾아가라는 명령을 받고 자신의 Bundle Identifier 로 등록된 Firebase 의 프로젝트를 찾아가는 것이라고나 할까나&hellip;</p>
<p>프로젝트를 만드는 순서는 지금 당장 <strong>+</strong> 버튼을 눌러 Firebase 프로젝트 생성을 시작하고 중간에 Xcode 프로젝트의 Bundle Identifier 가 필요한 시점에 Xcode 프로젝트를 생성해도 되지만 어자피 이렇게 하면 프로젝트를 왔다갔다해야되서 번거로우니 저는 그냥 Xcode 프로젝트부터 생성하고 Firebase 를 생성하는 것을 선호합니다.</p>
<hr>
<h2 id="bundle-identifier-복하사기">Bundle Identifier 복하사기</h2>
<p>그럼 Xcode 프로젝트를 생성하고 <strong>Bundle Identifier</strong> 를 복사해둘게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHii4j%2FbtqGrh1DSnM%2FYcO2c87Ru8EdM2b8efry5k%2Fimg.png" alt="Xcode 프로젝트 첫화면"></p>
<hr>
<h2 id="firebase-프로젝트-생성하기">Firebase 프로젝트 생성하기</h2>
<p>그럼 이제 + 버튼을 눌러 프로젝트를 생성해볼게요. 첫 화면은 프로젝트 명을 생성하는 화면입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkS7P7%2FbtqGnZOPAm7%2FtCZkntJF702kKkbzeYIye0%2Fimg.png" alt="Firebase 프로젝트명 생성화면"></p>
<p><strong>Xcode</strong> 프로젝트명과 달라도 괜찮습니다. 단순히 Firebase 홈페이지 내부적으로 관리하기 위한 이름이에요. 그래도 두 프로젝트가 서로 어느정도는 이름이 비슷해야 나중에 알아보기 쉬우니까 저는 똑같이 만들도록 할게요.</p>
<p>그 다음으로는 <strong>Google Analytics</strong> 를 설정하는 페이지가 뜰거에요. 이걸 사용하게되면 내 앱에 접속하는 사용자의 다양한 정보들을 그래프와 수치로 받아볼 수 있게됩니다. 서버 운영에 반드시 사용해야하는 기능은 아니니까 필요없는 상황에서는 그냥 끄고 사용하는 것도 괜찮습니다.</p>
<p>지금은 튜토리얼이니까 켜고 진행하도록 할게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fvr8Kt%2FbtqGqbARtJ7%2F1k0oAK1IrPKhoedHb4ce8k%2Fimg.png" alt="Firebase Google Analytics 설정화면"></p>
<p>다음 화면에서는 <strong>Google Analytics</strong> 에 어떤 계정을 사용할꺼냐 묻는데 어자피 하나밖에 없습니다. <strong>Defualt Account for Firebase</strong> 를 선택해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbjPMjg%2FbtqGmQKWlMo%2FC22UxDvxgHU7GKqG1b0F70%2Fimg.png" alt="Defualt Account 설정화면"></p>
<p>그리고 <strong>프로젝트 생성</strong>을 누르면 잠시 로딩을 하고 프로젝트 내부화면으로 넘어가게 됩니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdOVlft%2FbtqGkWYZfyz%2F4hiwZ670vWw95VOZtKkZuK%2Fimg.png" alt="Firebase 로딩 화면"></p>
<hr>
<h2 id="xcode-프로젝트와-연동하기">Xcode 프로젝트와 연동하기</h2>
<p>최초로 <strong>Firebase</strong> 에서 프로젝트를 만든 경우에는 저하고 화면이 조금 다를 수 있지만 별로 어려운 부분은 없으니 잘 넘어오셔서 아래와 같은 화면에서 <strong>iOS</strong> 를 클릭해주세요. 우리는 iOS 앱을 개발하는 것이므로 iOS 를 선택하는 것입니다 ㅎㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbgBm7j%2FbtqGmQjW7pL%2FyO5XS6cW6MBe1sm2gLPhkk%2Fimg.png" alt="Firebase iOS 선택화면"></p>
<p>이제 드디어 Xcode 프로젝트의 <strong>Bundle Identifier</strong> 가 필요한 시점이 왔어요. 가장 첫 텍스트필드에 값을 넣어주고 <strong>Register App</strong> 을 눌러줍니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhIxri%2FbtqGpxKX38N%2F4nhZKuCv5UVfqRA9LZ88Ik%2Fimg.png" alt="Bundle Identifier 입력화면"></p>
<p>그리고 이제 다음 화면에서 <strong>GoogleService-Info.plist</strong> 을 다운받아주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FosTE8%2FbtqGqQiX6RL%2FTCPsFP5Y3kfDEZ0Jvf8rLk%2Fimg.png" alt="GoogleService-Info.plist 다운로드 화면"></p>
<p>그리고 다운받은 파일을 <strong>Xcode 프로젝트</strong>에 드래그해서 아래 이미지처럼 옮겨줍니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcfkUuh%2FbtqGqbt6YgL%2F8HRaK0ueyYCvsw6ZQdWSW1%2Fimg.png" alt="Xcode 프로젝트 화면"></p>
<p>이때 알림창이 하나 뜨게되는데 꼭 첫번째 칸을 체크해주세요. <strong>Xcode 프로젝트</strong>의 폴더 내부로 실제 <strong>plist 파일을 복사</strong>한다는 의미입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcAcny2%2FbtqGnITu7j4%2FCw8D3O87v4DnNNcVh0W7fK%2Fimg.png" alt="Xcode 프로젝트 파일복사 설정화면"></p>
<p>다시 Firebase 홈페이지로 돌아와서 Next 를 누르면 이제 <strong>CocoaPods</strong> 을 통해 Firebase 사용에 필요한 파일들을 다운로드 받으라고 안내합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQZxwt%2FbtqGmPkYglb%2Fe62ufnkDw35kZtNmOKuc70%2Fimg.png" alt="CocoaPods 다운로드 안내"></p>
<p>Xcode 프로젝트 폴더 내의 Podfile 에 pod &lsquo;Firebase&rsquo; 을 입력해주세요. 여기서 막히는 분들은 위의 CocoaPods 튜토리얼을 참고해주세요.</p>
<pre><code class="language-console" data-lang="console">pod 'Firebase'
</code></pre><p>이렇게 CocoaPods 설치를 마쳤다면 다시 Next 를 눌러줍니다. 이제 Xcode 프로젝트의 <strong>Appdelegate</strong> 에서 우리가 필수적으로 작업해야 할 내용들을 안내하고 있네요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWLc1p%2FbtqGrdE7gUj%2F7zJy0IGsEal661No3QP2uK%2Fimg.png" alt="AppDelegate 입력안내"></p>
<p>더 이상 xcodeproj 파일은 사용할 수 없으므로 <strong>xcworkspace</strong> 파일을 열고 새롭게 생긴 파일들을 잘 인식할 수 있돌고 빌드를 한번 해줍니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Foe8x8%2FbtqGrjSG0TY%2FIWH9ES1MAZoMs3ZWke4lO1%2Fimg.png" alt="Finder 의 xcworkspace 파일"></p>
<p>그리고 프로젝트 상단에 Firebase 를 import 해보면 오류없이 잘 인식하는 것을 확인할 수 있습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Firebase</span>
</code></pre></div><p>그리고<code>application(didFinishLaunchingWithOptions)</code>함수 내부에 <code>FirebaseApp.configure()</code> 코드를 구현해줍니다.</p>
<pre><code class="language-console" data-lang="console">func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
    FirebaseApp.configure()
    return true
}
</code></pre><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdIkcCA%2FbtqGtDbQ8yB%2FQrQnd33Wx1diRnxM54WaFK%2Fimg.png" alt="Xcode 의 AppDelegate 파일"></p>
<p>다시 <strong>Firebase 홈페이지</strong>에서 Next 를 누르면 이런 화면이 뜨게되는데 이제 Xcode 에서 앱을 한번 실행합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpPIkY%2FbtqGpxEaaYA%2Fu1QhRYIbaV0Vkhv8HZeb6K%2Fimg.png" alt="Firebase 프로젝트 설정 마지막 화면"></p>
<p>혹시라도 <code>FirebaseApp.configure()</code> 을 찾을 수 없다고 오류가 뜨는 분이 있다면 Xcode 를 먼저 껏다 켜주시고 그래도 안된다면 아래 코드를 추가로 import 해보세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">FirebaseCore</span>
</code></pre></div><p>그리고 Firebase 가 정상적으로 연결되었다면 <strong>Xcode 콘솔</strong>에서 다음과 비슷한 메세지를 확인할 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQFFR0%2FbtqGmPL4xjK%2Fd6HjKn5kBc8Z5AaytVKOVK%2Fimg.png" alt="Firebase Console 화면"></p>
<p>시뮬레이터가 실행되고 조금 기다리다보면 이렇게 초록색 안내가 뜨며 아래 버튼들이 활성화되는데 만약 아무리 기다려봐도 로딩이 끝나지 않는다면 그냥 넘어가도 아무문제 없습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcAI1IK%2FbtqGtD3ZwDg%2FhmU7UuCxU0FcMlOLgprUQ1%2Fimg.png" alt="Firebase 연결 성공화면"></p>
<p>계속 이 화면에서 넘어가지지 않는다면 <strong>Skip this page</strong> 를 눌러 다음 화면으로 넘어가주세요. 전혀 문제없습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcM8wbx%2FbtqGmQjXDhJ%2Fj6t4uJSLSrlZclWo2ts7mk%2Fimg.png" alt="Firebase 연결 실패화면"></p>
<p>자 이것으로 <strong>Firebase</strong> 연동을 완전히 끝냈습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbPCpUD%2FbtqGtf3mohv%2FxzWXJqo4sTFnHGjSNltQC0%2Fimg.png" alt="Firebase 홈"></p>
<p>개인 앱을 만드는 분들은 앞으로 많은 곳에서 <strong>Firebase</strong> 를 사용하게 될 수 있으니까 지금 이 과정은 눈감고도 할 수 있을만큼 익숙하게 알아두시는 것을 추천합니다!</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics - Button 과 List 생성하기</title>
            <link>https://kasroid.github.io/posts/ios/20200802-swiftui-basics-button-list/</link>
            <pubDate>Sun, 02 Aug 2020 01:42:41 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200802-swiftui-basics-button-list/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 이번 포스팅에서는 Button 과 List (UIKit 의 UITableView 와 동일) 를 생성하는 방법을 공부해보도록 할게요. SwiftUI 에서는 Button 과 List 를 구현하는 코드도 단 몇 줄이면 충분합니다. 이게 다 오토레이아웃이 자동 적용되서 그런것 같아요.
 Button 이전에 공부할 때 Text 가 View 라고했었으니까 Button 도 당연히 View 의 일종일거라 생각하고 따로 찾아보진 않으려고 했거든요? 근데 그래도 공식문서를 한번쯤 보는게 예의가 아닐까 싶어 찾아보니 View 가 아니였습니다.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>이번 포스팅에서는 Button 과 List (UIKit 의 UITableView 와 동일) 를 생성하는 방법을 공부해보도록 할게요. SwiftUI 에서는 Button 과 List 를 구현하는 코드도 단 몇 줄이면 충분합니다. 이게 다 오토레이아웃이 자동 적용되서 그런것 같아요.</p>
<hr>
<h2 id="button">Button</h2>
<p>이전에 공부할 때 Text 가 View 라고했었으니까 Button 도 당연히 View 의 일종일거라 생각하고 따로 찾아보진 않으려고 했거든요? 근데 그래도 공식문서를 한번쯤 보는게 예의가 아닐까 싶어 찾아보니 View 가 아니였습니다. 안찾아봤으면 어쩔뻔!</p>
<p>Button 자체는 View 가 아니라 Control 이더라고요. 다만 Button 내의 Label 이 Generic 타입으로 구현되어 있고 이 Label 이 View 로 인식이 되는 형태입니다. 뭐 그래서 결국 Button 이 View 의 일종이 되는거긴 하지만 공식문서의 구분에서 control 로 구분하고 있어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWGY1B%2FbtqF8vtMHos%2FnebTHkKrwtSXTxYAmWFFLK%2Fimg.png" alt="Apple 공식문서의 Button"></p>
<p>버튼 생성은 Text 처럼 parenthesis(괄호) 안에 원하는 타이틀을 입력하고 brace(중괄호) 안에 버튼이 눌렸을 때 동작하기 원하는 코드를 작성하면 됩니다. 일단 우리는 버튼이 잘 동작하는지만 확인하면 되니까 버튼이 눌리면 &ldquo;Button Pressed&rdquo; 가 print 되는 코드를 구현해보록 하겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-SWift" data-lang="SWift"><span style="color:#66d9ef">var</span> body: some View {
    Button(<span style="color:#e6db74">&#34;Button&#34;</span>) {
        print(<span style="color:#e6db74">&#34;Button Pressed&#34;</span>)
    }
}
</code></pre></div><p>아래 결과를 보면 이번에도 코드 단 몇 줄만으로 Button 이 중앙에 잘 표시되고 있죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fnm6o0%2FbtqGdtnfXTi%2FxQ4bBNkKkrjlLk08ijNJiK%2Fimg.png" alt="버튼이 정상적으로 표시되고 있는 화면"></p>
<p>Preview 에서는 단순히 Button 의 위치를 확인하는 것 뿐 아니라 어떤 입력을 받을 때 특정 코드가 실행되는 것을 확인할 수 있습니다.</p>
<p>그렇다고 바로 누르면 되는건 아니고 Preview 를 기준으로 우측 하단에 위치한 두 개의 버튼 중 첫번째 버튼인 Live Preview 를 우클릭하면 좌측 이미지와 같은 창이 하나 뜨는데 이 중 두번째 메뉴인 Debug Preview 를 클릭해 봅시다.</p>
<!-- raw HTML omitted -->
<p>잠시 로딩을 기다린 뒤 정상적으로 Debug Preview 가 활성화 된 상태에서 버튼을 눌러보면!! Button 액션으로 구현된 print 까지 console 에 printing 되는 것을 확인할 수 있습니다.</p>
<p>여기서 추가적으로 궁금증이 생겼는데 Preview 에서 Animation 까지 확인해 볼 수 있는 건지 궁금해졌어요. 이렇게 button action 까지 실행되는 것 보면 가능할 것 같기도 하고요 ㅎㅎㅎ 하지만 오늘은 기초적인 것들만 알아볼거니까 추가로 확인해보진 않을거에요 ㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdPobHJ%2FbtqGe7eee2I%2Fl3xkIexJWyiH00PvckOLxK%2Fimg.gif" alt="&ldquo;Button Pressd&rdquo; 가 print 되는 모습"></p>
<p>대신 버튼에 텍스트말고 이미지와 SF Symbol 을 넣을 수 있는 방법을 알아보도록 할게요.</p>
<p>HStack 을 사용해 Button 2개를 가로로 배치하고 첫번째 버튼에는 SwiftUI 이미지를, 두번째 버튼에는  SF Symbol &ldquo;play.circle&rdquo; 아이콘을 넣었어요.</p>
<p>주의해야할 점 하나가 있는데 SwiftUI 에서는 Button 이미지의  renderingMode 기본 값이 .template 으로 되어 있어 다운로드 받은 이미지의 경우 .original 로 변경을 해주어야 이미지가 정상적으로 보이게됩니다. SFSymbol 을 삽입한 경우에는 오히려 기본값이 .template 이라 별 다른 추가작업 없이도 색상이 변경가능하지만요!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
        HStack(spacing: <span style="color:#ae81ff">20</span>) {
            Button(action: { print(<span style="color:#e6db74">&#34;Button 1&#34;</span>) }) {
                Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
                    .renderingMode(.original)
                    .resizable()
                    .frame(width: <span style="color:#ae81ff">120</span>, height: <span style="color:#ae81ff">120</span>)
            }
            Button(action: { print(<span style="color:#e6db74">&#34;Button 1&#34;</span>) }) {
                Image(systemName: <span style="color:#e6db74">&#34;play.circle&#34;</span>)
                    .imageScale(.large)
                    .font(.largeTitle)
            }
            .accentColor(.green)
        }
    }
</code></pre></div><p>위 코드를 입력하면 다음과 같은 결과를 확인해 볼 수 있습니다. 참고로 .accentColor 는 UIKit 의 tintColor 의 역할을 대신하며 색상을 바꿔주는 코드에요. 지금은 .green 을 적용해서 오른쪽 play.circle 이미지가 초록색으로 변했습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhRObn%2FbtqGdDp4dHn%2F8asFKojLZnKlNvtF5k19iK%2Fimg.png" alt="Button 에 이미지를 삽입"></p>
<hr>
<h2 id="list">List</h2>
<p>List 가 뭘까요? UIKit 에서는 없던 이름이에요. UITableView 가 SwiftUI 에서 List 라는 이름으로 완전히 바뀌었습니다. 왜 굳이 Table 이 아니라 List 라고 했는지는 조금 의아하지만 아무튼 List 도 직관적이고 좋은 것 같아요 ㅎㅎ 근데 이러면 아직 SwiftUI 로는 지원되지 않는 UICollectionView 이름은 어떻게 정해질지 궁금해지네요.</p>
<p>위에서 Button 공식 문서를 봤더니 버튼 자체는 control 이지만 버튼 내부의 Label 이 View 타입이었던 것 기억하시죠? 이처럼 List 자체는 다른 타입이지만 내부의 어떤 것 때문에 View 로 인정되는 것 수 있을 것 같다는 의심이 들어 공식문서를 먼저 살펴보았습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FyoDrT%2FbtqGdD4DDan%2FnjPwkeocg6KAlhbWLtYWUK%2Fimg.png" alt="Apple 공식문서의 List"></p>
<p>역시나!! List 는 View 가 아니라 data 를 row 의 형태로 나타낼 수 있는 container라고 하네요. 그럼 body 가 어떻게 View 로 받을 수 있느냐&hellip; 위 스크린샷에서 Generic 타입으로 SelectionValue 랑 Content 2가지가 있는걸 확인할 수 있는데요. 짤려서 보이지 않지만 이 중 content 가 View 타입입니다.</p>
<p>그럼 List 를 생성해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    List{
        Text(<span style="color:#e6db74">&#34;1&#34;</span>)
    }
}
</code></pre></div><p>네 이게 끝입니다. 정말로 List 가 생성이 되었다구요! UITableView 를 만들어보신 분들은 이게 얼마나 놀랍도록 간단한건지 느낄거에요!!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbaiSvA%2FbtqGbqyrQMU%2Fgk5KubIB0Vh7j4vTwuAXN0%2Fimg.png" alt="List 가 생성된 모습"></p>
<p>이전에 없던 옅은 선들이 보이시죠? 이게 바로 List 입니다. List 역시 Button 과 같은 방법으로 Preview 에서 스크롤을 실험해 볼 수 있습니다.</p>
<p>그런데 그냥 이렇게 빈 칸으로 두면 허전하니까 각 줄에 데이터를 몇가지 넣어보도록 할게요. List brace 안쪽으로 원하는 View 를 구현하면 각 instance 가 순서대로 List 의 row 에 추가되게 됩니다. 한번 확인해볼까요?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    List {
        Text(<span style="color:#e6db74">&#34;List&#34;</span>).font(.largeTitle)
        Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        Circle().frame(width: <span style="color:#ae81ff">100</span>, height: <span style="color:#ae81ff">100</span>)
        Color(.red).frame(width: <span style="color:#ae81ff">100</span>, height: <span style="color:#ae81ff">100</span>)
    }
}
</code></pre></div><p>위 코드를 입력해보세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FvgT9q%2FbtqGbIenip6%2FanGK8q56kregPlrRlKW0s0%2Fimg.png" alt="Result"></p>
<p>정말 그냥 적힌 순서대로 각 instance 가 List 의 row 에 추가됩니다. 다만 최대로 입력할 수 있는 instance 의 갯수는 10개라는거 기억하세요</p>
<p>당연히 데이터가 10개를 넘더라도 정상적으로 표시할 수 있는 방법이 있습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    List(<span style="color:#ae81ff">0.</span>.&lt;<span style="color:#ae81ff">100</span>) {
        Text(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">\(</span>$0<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
    }
}
</code></pre></div><p>위 코드를 입력해보세요. 이런식으로 원하는 데이터를 마음껏 넣어줄 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxKIUu%2FbtqGbbPpixm%2FzhMYYlCQaQKgRN2mmsZDtk%2Fimg.png" alt="Result"></p>
<p>마지막으로 UITableView 하면 빼놓을 수 없는 것 중 Header 와 Footer 가 있었죠? 얘네를 List 에서 추가할 수 있는 방법을 알아보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">List {
        Section (
            header: Text(<span style="color:#e6db74">&#34;Header1&#34;</span>),
            footer: Text(<span style="color:#e6db74">&#34;Footer1&#34;</span>)
        ) {
            Text(<span style="color:#e6db74">&#34;1&#34;</span>)
            Text(<span style="color:#e6db74">&#34;2&#34;</span>)
            Text(<span style="color:#e6db74">&#34;3&#34;</span>)
            Text(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        }
        Section (
            header: Text(<span style="color:#e6db74">&#34;Header2&#34;</span>),
            footer: HStack { Spacer(); Text(<span style="color:#e6db74">&#34;Footer2&#34;</span>) }
        ) {
            Text(<span style="color:#e6db74">&#34;Section2&#34;</span>)
            Text(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        }
    }
    .listStyle(GroupedListStyle())
}
</code></pre></div><p>List 내부에 Section 항목을 먼저 추가하고 header 와 footer 를 입력합니다. 그 다음 brace 를 열어 해당 Section 에 속하는 데이터들을 입력해주면 끝입니다. header 와 footer 는 기본적으로 좌정렬 되어 있으니까 우측에 표시하고 싶을 때는 HStack 을 사용해 Spacer 를 추가한 뒤 Text 를 입력해주면 됩니다.</p>
<p>추가적으로 .listStyle 이라는 코드가 보이죠? 얘는 GroupedListStyle 또는 DefualtListStyle 중에 선택할 수 있고, 결과에 따라 header 나 footer 가 List 가 스크롤 될 때 함께 스크롤 될지 아니면 남아있을지 설정할 수 있는 옵션입니다. 직접 한번 실험 해보시면 확실히 이해가 되실거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAaAYX%2FbtqGbPdHdat%2FFF3DA2wRwissXF0E77X5L1%2Fimg.png" alt="Result"></p>
<p>이렇게 기본적인 List 의 생성 방법을 알아보았어요. UIKit 과 많이 달라진 방식이 아직은 서툴지만 또 쓰다보면 금방 익숙해질거에요. 그러니까 SwiftUI 도 미리미리 같이 공부해보자구요~~</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics - Stacks 와 Spacer 사용하기</title>
            <link>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-stacks-spacer/</link>
            <pubDate>Fri, 31 Jul 2020 11:33:35 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-stacks-spacer/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 SwiftUI 에서는 자동으로 뷰의 레이아웃을 잡아주는 기능이 매우 강화되면서 Stacks 의 사용이 더 중요해졌습니다. Stack 은 현재 총 3종류가 있으며 HStack, VStack, ZStack 으로 구성됩니다. 함께 공식 개발자 문서를 보려고 했는데 너무 간단하게 나와있어서 의미가 없을 것 같아요 ㅎ 그냥 하나씩 알아보죠 ㅎㅎㅎ
 HStack HStack 은 Horizontal Stack 으로 우리가 뷰를 가로로 배치할 수 있게 도와주는 View 입니다. 사용법도 이보다 쉬울 수가 없어요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>SwiftUI 에서는 자동으로 뷰의 레이아웃을 잡아주는 기능이 매우 강화되면서 Stacks 의 사용이 더 중요해졌습니다. Stack 은 현재 총 3종류가 있으며 HStack, VStack, ZStack 으로 구성됩니다. 함께 공식 개발자 문서를 보려고 했는데 너무 간단하게 나와있어서 의미가 없을 것 같아요 ㅎ 그냥 하나씩 알아보죠 ㅎㅎㅎ</p>
<hr>
<h2 id="hstack">HStack</h2>
<p>HStack 은 Horizontal Stack 으로 우리가 뷰를 가로로 배치할 수 있게 도와주는 View 입니다. 사용법도 이보다 쉬울 수가 없어요. 그냥 HStack 을 중괄호로 열고 그 안에 원하는 내용을 넣으면 됩니다. 그러면 각 Object 들이 좌측부터 순서대로 배치가 됩니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">HStack {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>따로 레이아웃을 잡은게 없는데도 중앙에 잘 표시가 되네요. 코드 3줄로 뷰를 완성했습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FctNP9J%2FbtqF7Kxv0k5%2Fqe64Bl700TNEeAPc26Kk11%2Fimg.png" alt="HStack 결과"></p>
<hr>
<h2 id="vstack">VStack</h2>
<p>HStack 이 Horizontal Stack 이라고 했으니까 VStack 은 뭔지 감이 딱 오죠?? 바로 Vertical Stack 이겠네요. 그리고 본인 내부에 위치한 Object 들을 세로로 배치해 줄 것 같습니다. 그럼 기존에 작성해놓은 코드에서 알파벳 하나만 바꿔서 어떻게 되는지 볼까요?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">VStack {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>짜잔!!! 딱 한글자만 바꿨는데 뷰의 구성은 완전히 바뀌었어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdJOBgi%2FbtqGba9zHg4%2FyLfngLYIpkVckLj3zXbIg0%2Fimg.png" alt="VStack 결과"></p>
<hr>
<h2 id="zstack">ZStack</h2>
<p>HStack 은 가로, VStack 이 세로면 다 끝난 것 같은데 아직 하나가 더 남았어요. ZStack 은 뭐의 줄임말인지 모르겠지만 View 를 위로 쌓는 개념입니다. 아마도 x, y, z 축에서 z 를 뜻하는 의미가 아닌가 싶어요. 이미지가 위로 쌓이게 되면 상태를 확인할 수 없으니까 이번에는 아래쪽에 오는 이미지를 크게 만들어 놓고 해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    ZStack {
        Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
            .resizable()
            .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
        Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
    }
}
</code></pre></div><p>코드에서 먼저 구현된 Image 가 Preview 에서는 아래쪽에 위치하는 것을 확인할 수가 있네요. 그냥 순서대로 하나씩 올려놓는다고 생각하면 헷갈릴 것도 없고 당연한 개념이기는 합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdqKJjL%2FbtqGbbm9aVd%2FHCImD8AdE4herQi2glw6Lk%2Fimg.png" alt="ZStack 결과"></p>
<hr>
<h2 id="spacer">Spacer</h2>
<p>이렇게 SwiftUI 에 존재하는 3가지 Stack 을 모두 알아보았고 이제 마지막으로 Spacer 에 대해서 알아보도록 할게요.</p>
<p>Spacer 는 이름에서부터 알 수 있듯 어떤 빈 공간을 만들어줍니다. 이 빈 공간은 다른 Object 의 크기에 Priority 를 두고 그 크기가 변하지 않는 선에서 본인의 크기를 최대한으로 늘리고자하는 성질을 갖고 있습니다. 코드를 조금 바꿔서 Spacer 를 구현해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">VStack {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        .resizable()
        .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
    Spacer()
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>각 이미지가 완전히 멀찌감치 떨어져서 배치되었네요. 이미지의 크기는 유지되었고 그 사이 공간에 Spacer 가 본인의 크기를 최대한으로 키우고 들어왔습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FuNOCQ%2FbtqF9mo8GA3%2FdgYQtkMQ95pK5kLgw2Lf3k%2Fimg.png" alt="Spacer 결과"></p>
<p>그렇다면 Spacer 를 두 이미지보다 위쪽에 배치하면 어떻게 될까요? Spacer 의 위치를 코드의 최상위에 배치해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">VStack {
    Spacer()
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        .resizable()
        .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>이미지들이 아래로 몰려버렸네요. 하지만 역시 이미지의 크기는 유지시킨채 Spacer 가 늘어날 수 있는 최대한의 크기만큼 늘어난 것을 확인할 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc3y4y3%2FbtqGchmDjg3%2FAJIXTQdRGgJqPEWx750dTk%2Fimg.png" alt="Spacer 결과"></p>
<p>Spacer 는 이렇게 본인을 빈 공간에 맞게 최대한 늘어나는 성질을 갖고 있습니다. 아직은 어떻게 활용할 수 있을지 감이 오지 않지만 그 활용도가 무궁무진할 것 같다는 생각이 따~악 드네요! Stacks 와 Spacer 를 완벽히 이해하고 사용한다면 거의 웬만한 모든 뷰들은 손쉽게 만들어 낼 수 있을 것 같습니다!</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics - Text 와 Image 생성하기</title>
            <link>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-text-image/</link>
            <pubDate>Fri, 31 Jul 2020 10:38:35 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-text-image/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 이번 포스팅에서는 Text, Image, Stack, Button, List 를 SwiftUI 환경에서 생성하는 법을 간단하게 알아보도록 하겠습니다. SwiftUI 의 코드가 얼마나 간결해졌냐면 저 instance 들을 생성하기 위해 우리가 알아야하는 단어는 정말 저게 끝이에요. 저 단어들과 괄호를 조합하여 간단하게 instance 를 생성할 수 있습니다. 레이아웃도 자동으로 잡아주고요!
 Text 텍스트를 생성하는 법은 Xcode 를 실행하자마자 바로 알 수 있습니다. 기본적으로 &amp;ldquo;Hello World&amp;rdquo; 가 써져있으니까요.
그럼 텍스트를 표시하기 위해 필요한 과정을 UIKit 과 한번 비교해볼까요?</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>이번 포스팅에서는 Text, Image, Stack, Button, List 를 SwiftUI 환경에서 생성하는 법을 간단하게 알아보도록 하겠습니다. SwiftUI 의 코드가 얼마나 간결해졌냐면 저 instance 들을 생성하기 위해 우리가 알아야하는 단어는 정말 저게 끝이에요. 저 단어들과 괄호를 조합하여 간단하게 instance 를 생성할 수 있습니다. 레이아웃도 자동으로 잡아주고요!</p>
<hr>
<h2 id="text">Text</h2>
<p>텍스트를 생성하는 법은 Xcode 를 실행하자마자 바로 알 수 있습니다. 기본적으로 &ldquo;Hello World&rdquo; 가 써져있으니까요.</p>
<p>그럼 텍스트를 표시하기 위해 필요한 과정을 UIKit 과 한번 비교해볼까요? UIKit 에서는 UILabel 을 생성하고 생성된 instance 에 원하는 텍스트를 붙이고 View 에 올린 다음 레이아웃까지 따로 잡아줘야 하잖아요? 그런데 이 모든 과정이 SwiftUI 에서는 Text(&ldquo;Hello World&rdquo;) 한 문장으로 끝납니다. 🙀</p>
<p>그럼 이제 조금 더 깊게 들어가볼게요. 다음 코드를 같이 살펴봅시다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">SwiftUI</span>

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView</span>: View {
    <span style="color:#66d9ef">var</span> body: some View {
        Text(<span style="color:#e6db74">&#34;Netflix&#34;</span>)
            .font(.custom(<span style="color:#e6db74">&#34;AppleGothic-bold&#34;</span>, size: <span style="color:#ae81ff">50</span>))
            .foregroundColor(.red)
            .kerning(<span style="color:#ae81ff">5</span>)
    }
}

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView_Previews</span>: PreviewProvider {
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: some View {
        ContentView().preferredColorScheme(.dark)
    }
}
</code></pre></div><p>Text 로 화면에 Netflix 가 표시되도록 구현했고 추가로 폰트 종류와 색상, 자간 크기도 조절을 했습니다. UIKit 에서는 이런 세부 조절과정을 method 를 사용해 진행했다면, SwiftUI 에서는 modifier 를 사용해 조절한다고 표현합니다. 내부적으로 구현되는 방법이 달라지고 적용 순서가 더 중요해졌지만 결과적으로 코드 내에서 맡는 역할은 method 와 modifier 가 비슷합니다. 일단은 거의 같다고 생각하면 될 것 같아요</p>
<p>Preview 에서 텍스트는 좌측 이미지와 같이 표시됩니다. 이쯤되면 웬만한 개발환경에서 처음에 Hello Wolrd Print 찍고 Console 에서 입력된 내용 확인하는 것과 비슷한 난이도가 아닐까 싶어요. 이보다 더 쉬워질 수가 있을까요?</p>
<p>마지막으로 PreviewProvider 부분에서 .preferredColorScheme(.dark) 를 지정해놓고 실제 넷플릭스 화면처럼 배경을 어둡게 만들어줬어요. 다만 이건 실제 배경이 검은색으로 변한게 아니라 단순히 다크모드가 적용된 것이니까 light 모드에서도 검은 화면을 만드려면 다른 방법을 써야합니다. 이건 나중에.</p>
<!-- raw HTML omitted -->
<hr>
<h2 id="image">Image</h2>
<p>이미지를 넣는 방법도 정말 간단합니다. 먼저 준비된 이미지를 Preview Assets.xcassets 에 드래그 해서 붙여 넣습니다. 저는 이미지의 크기가 큰 편이라 3x 에 넣었어요. 작은 이미지를 준비했다면 1x 에 넣어주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqsSK3%2FbtqF9lwXVit%2F4YK31FBZbDtOgDPWyQdK41%2Fimg.png" alt="Preview Assets.xcassets 화면"></p>
<p>그러고보니 위 폴더도 UIKit 에 없던거에요. 이곳은 개발 중에만 사용하게되는 이미지를 넣어두는데 사용된다고 하네요. 기존부터 사용해 익숙한 Assets.xcassets 폴더에 넣어도 전혀 문제 없습니다.</p>
<p>아래 코드를 입력하면 이미지가 Preview 에 이미지가 생성됩니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>이미지를 넣는 것도 단 한줄로 끝났어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdEvKF9%2FbtqF9CSJQiI%2FDER7goFo44jNiSu8JkOUO0%2Fimg.png" alt="Image 삽입 결과"></p>
<p>다만 Image 의 Attributes 를 조절해야할 때 반드시 알아야하는 부분이 있어요. 이미지에 frame 을 늘리고 색상을 넣어볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
        .background(Color.green)
}
</code></pre></div><p>결과를 봅시다. 이미지의 크기는 그대로고 정말로 frame 그 자체만 커졌어요. 보통 우리가 frame 을 늘린다는 것은 이렇게 사용하겠다는 의미가 아니잖아요? 그럼 이미지를 실제로 크게 만들려면 어떻게 해야할까요?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4sbVi%2FbtqF8uH38vm%2FXojxvsJQHk2WfcauvdrlL0%2Fimg.png" alt="Result Image"></p>
<p>간단합니다. .resizable() modifier 한줄만 추가해주면 돼요! 단 순서가 중요합니다. frame 을 먼저 설정해버리면 resizable 을 적용할 수가 없거든요. 왜 그런지 이유를 한번 알아볼까요?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fmc78M%2FbtqF7tbKqxW%2F2a6b92IgM41SluCCz0urok%2Fimg.png" alt=".frame 의 Description"></p>
<p>frame 의 Description 을 살펴보면 반환 타입으로 View 를 돌려준다는 것을 알 수 있습니다. 하지만 우리가 조절하려는 것은 이미지의 크기지 frame 이 아니잖아요? 애초에 View 은 resizable modifier 가 지원되지 않기 때문에 뒤에 넣으면 에러가 발생하기도 하고요~ 아무튼 이러한 이유로 .resizable 이 먼저 입력되어야 합니다. 이제 결과를 보면!!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDAWwz%2FbtqGbN0murC%2FhynH4bfzsO8oaAXkAk8gF0%2Fimg.png" alt="Result Image"></p>
<p>정상적으로 이미지 크기가 수정되었습니다!! 어렵지 않죠??</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics - 프로젝트 생성 및 기본제공 코드 분석</title>
            <link>https://kasroid.github.io/posts/ios/20200730-swiftui-basics-create-project-analyze-code/</link>
            <pubDate>Thu, 30 Jul 2020 23:56:35 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200730-swiftui-basics-create-project-analyze-code/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 SwiftUI 에서 사용자가 확인할 화면을 생성하는 것은 UIKit 과 다르게 확연히 간단해졌습니다.
첫 눈에 바로 들어오는 특징으로는 인스턴스를 생성 시에 더 이상 UI 접두사를 붙이지 않아도 된다는 것이네요. 그리고 내부적으로 바뀐 큰 차이점은 UIKit 의 인스턴스들은 대부분 class 형태로 구성되어있던 것과 다르게 SwiftUI 의 인스턴스들은 대부분 struct 형태로 구현되어있습니다.
그럼 프로젝트를 생성하고 달라진 점들을 직접 살펴보는 것이 좋겠어요. 프로젝트 생성 시 User Interface 를 SwiftUI 로 설정하고 시작하게 되면 다음과 같은 화면이 보입니다.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>SwiftUI 에서 사용자가 확인할 화면을 생성하는 것은 UIKit 과 다르게 확연히 간단해졌습니다.</p>
<p>첫 눈에 바로 들어오는 특징으로는 인스턴스를 생성 시에 더 이상 UI 접두사를 붙이지 않아도 된다는 것이네요. 그리고 내부적으로 바뀐 큰 차이점은 UIKit 의 인스턴스들은 대부분 class 형태로 구성되어있던 것과 다르게 SwiftUI 의 인스턴스들은 대부분 struct 형태로 구현되어있습니다.</p>
<p>그럼 프로젝트를 생성하고 달라진 점들을 직접 살펴보는 것이 좋겠어요. 프로젝트 생성 시 User Interface 를 SwiftUI 로 설정하고 시작하게 되면 다음과 같은 화면이 보입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcCRN8A%2FbtqGbOrehS5%2FOujyzIXf0LLRbDmAYyZWV1%2Fimg.png" alt="프로젝트를 생성하면 가장 처음 마주치는 화면"></p>
<p>우측 상단에 위치한 Resume 버튼을 누르거나 Command + Option + P 를 누르면 SwiftUI 의 핵심기능 중 하나인 Preview 를 활성화 시킬 수 있습니다. 활성화가 정상적으로 되었다면 아이폰 화면 위에 &ldquo;Hello World&rdquo; 가 출력된 것을 볼 수 있습니다. 놀랍지 않나요?</p>
<p>기존 Storyboard 처럼 단순히 Layout 을 생성 및 확인하는 것뿐만 아니라 실시간으로 코드와 반응하며 UI 가 변화합니다. 다음 포스트에서 함께 보겠지만 심지어 버튼을 눌러 Print 까지 출력이 가능합니다. <del>Wow</del></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTBlYa%2FbtqGbaVQMPl%2FBJogbKg9zhKhb3GktLZZBk%2Fimg.png" alt="Preview 가 활성화 된 모습"></p>
<hr>
<h2 id="view">View</h2>
<p>그럼 이제 코드를 한번 살펴볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">SwiftUI</span>

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView</span>: View {
    <span style="color:#66d9ef">var</span> body: some View {
        Text(<span style="color:#e6db74">&#34;Hello, World!&#34;</span>)
    }
}

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView_Previews</span>: PreviewProvider {
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: some View {
        ContentView()
    }
}
</code></pre></div><p>UIKit 과 달라도 너무 다르네요. 하지만 저는 위에서 본 Preview 의 성능에 감동을 받은 상태이니 새로운 것을 배울 마음의 준비가 되었습니다. 첫 줄을 보면 ContentView 는 View 를 상속받고 있습니다. 왠지 UIView 와 익숙할 것 같지만 혹시 모르니까 무엇인지 한번 알아보도록 하죠.
<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FehkB31%2FbtqF7ug8I99%2FeQcsTKc0MQ0dnOKNgvjrpk%2Fimg.png" alt="Apple 공식 문서의 View"></p>
<p>불과 3개월 전 처음 iOS 개발을 배우기 시작했을 때는 이 문서 보는게 정말 싫었습니다. 봐도 뭐가 뭔지 모르겠고 그냥 다른 블로그 찾아보는게 더 빠르고 쉬웠었거든요. 물론 지금도 이 문서 읽는 것만으로는 사용법을 완전히 익히기에는 부족하지만 그래도 모르는 것이 나타나면 일단 무조건 공식문서부터 찾아보는 습관을 들이고 있습니다. 계속 익숙해지려고 노력하니 조금씩 문서의 구성이나 읽는 방법을 알아가는 것 같아요. 좋은 iOS 개발자가 되려면 그 무엇보다 이 화면과 친해져야 할 것 같아요.</p>
<p>아무튼!! 충격적인게 View 가 Class 도 아니고 Struct 도 아닌 Protocol 이었어요. 아니 어떻게 Protocol 을 저런식으로 사용하지?
근데 또 곰곰히 생각해보면 ContentView 가 Struct 잖아요? 그럼 상속을 받지 못하는게 당연하니 Protocol 일 수 밖에 없었네요. UIKit 의 사용법에만 익숙한 상태라 생소하지만 아무튼 View 는 Protocol 이에요.</p>
<p>Protocol 을 채택했다는건 무언가 필수로 구현해야하는게 있을 수도 있다는 소리잖아요? 그게 바로 저 body 부분입니다. body 부분은 computed property 의 형태로 되어있고 some View 타입을 return 받아야 한다고 알려주고 있어요. 지금 당장 some View 가 무엇인지 전부 파헤치기는 어려우니 뭐가 되었든 View 의 종류들이면 다 괜찮아라고 이해하고 넘어갈게요.</p>
<p>body 의 return 값이 View 의 종류라면 괜찮다고 했는데 Text(&ldquo;Hello World&rdquo;) 부분이 오류가 나지않고 정상적으로 Preview 에 표시되었으니까 Text 도 View 의 일종이라는 것입니다. 확실하지 않으니까 이번에도 개발자 문서를 한번 보고 넘어가볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbT0MOt%2FbtqF7KqxqVX%2FkqiXm3pfzK8sORVijMBAk0%2Fimg.png" alt="Apple 공식 문서의 Text"></p>
<p>좌측 상단을 잘 보시면 Views and Controls 라고 적혀있죠? 즉 Text 는 View 나 Control 중 하나라는 뜻입니다. 그리고 설명을 보면 &ldquo;A view that displays one or more lines of read-only text&rdquo; 라고 명시하고 있습니다. 읽기 전용으로 쓸 수 있는 텍스트를 표시하는 View 라고 하네요. 상속을 받지도 Protocol 을 채택한 것도 아닌 것이 어떻게 View 로 구분될 수 있는건지는 잘 모르겠지만 공식 문서에서 View 라고 하니 일단 그렇게 알고 넘어가도록 합시다.</p>
<hr>
<h2 id="previewprovider">PreviewProvider</h2>
<p>이제 두번째 문단을 살펴보도록 할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView_Previews</span>: PreviewProvider {
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: some View {
        ContentView()
    }
}
</code></pre></div><p>또 생소한 것들 투성입니다. 뭔지 모르겠으니까 제일 먼저 등장하는 PreviewProvider 를 찾아봅시다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdGRdYl%2FbtqF9lQ679z%2F4YQ8zIkOphSo4JBYpOVu9K%2Fimg.png" alt="Apple 공식 문서의 PreviewProvider">
이번에도 Protocol 입니다. 어느새 조금 당연해졌죠??</p>
<p>Xcode 에서 previews 를 생성하는 타입이라고 하네요. 정확히는 모르겠지만 우측의 Preview 에 관여하는 코드인 것은 확실합니다. 하지만 이것만으로는 조금 부족한 것 같으니까 PreviewProvider 가 어떤 방식으로 만들어진건지 내부 코드를 봐야할 것 같아요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">@available(iOS <span style="color:#ae81ff">13.0</span>, OSX <span style="color:#ae81ff">10.15</span>, tvOS <span style="color:#ae81ff">13.0</span>, watchOS <span style="color:#ae81ff">6.0</span>, <span style="color:#f92672">*</span>)
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">protocol</span> <span style="color:#a6e22e">PreviewProvider</span> : _PreviewProvider {

    <span style="color:#75715e">/// The type of the previews variable.</span>
    associatedtype Previews : View

    <span style="color:#75715e">/// Generates a collection of previews.</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">/// Example:</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">///     struct MyPreviews : PreviewProvider {</span>
    <span style="color:#75715e">///         static var previews: some View {</span>
    <span style="color:#75715e">///             return Group {</span>
    <span style="color:#75715e">///                 GreetingView(&#34;Hello&#34;),</span>
    <span style="color:#75715e">///                 GreetingView(&#34;Guten Tag&#34;),</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">///                 ForEach(otherGreetings, id: \.self) {</span>
    <span style="color:#75715e">///                     GreetingView($0)</span>
    <span style="color:#75715e">///                 }</span>
    <span style="color:#75715e">///             }</span>
    <span style="color:#75715e">///             .previewDevice(&#34;iPhone X&#34;)</span>
    <span style="color:#75715e">///         }</span>
    <span style="color:#75715e">///     }</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: <span style="color:#66d9ef">Self</span>.Previews { <span style="color:#66d9ef">get</span> }

    <span style="color:#75715e">/// Returns which platform to run the provider on.</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">/// When `nil`, Xcode infers the platform based on the file the</span>
    <span style="color:#75715e">/// `PreviewProvider` is defined in. This should only be provided when the</span>
    <span style="color:#75715e">/// file is in targets that support multiple platforms.</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> platform: PreviewPlatform? { <span style="color:#66d9ef">get</span> }
}
</code></pre></div><p>Property 로 previews 와 platform 을 갖고 있어요. 오늘은 충분히 많은 새로운 내용을 배웠으니 platform 은 다음에 알아보는 것으로 하고 이번에는 previews 만 살펴보도록 할게요. 사용 예시가 나와있네요.</p>
<p>Group 으로 View 들을 묶어 여러개를 표시할 수도 있고 .previewDevice modifier 를 사용해 표시되는 기기를 바꿔줄 수 도 있나봅니다. 이곳에 나와있지는 않지만 여러개의 previews 를 만들어 놓고 하나는 light 다른 하나는 dark 모드로 UI 를 확인해가며 작업하는 것도 가능합니다.</p>
<p>이렇게 SwiftUI 를 시작하는데 있어 가장 기초적인 부분들을 훌어보았는데요. 다음 포스트에서는 SwiftUI 에 여러가지 View 를 추가하는 방법을 알아보도록 하겠습니다.</p>
]]></content>
        </item>
        
    </channel>
</rss>
