<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>iOS on Mastering iOS</title>
        <link>https://kasroid.github.io/posts/ios/</link>
        <description>Recent content in iOS on Mastering iOS</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 25 Aug 2020 01:25:02 +0900</lastBuildDate>
        <atom:link href="https://kasroid.github.io/posts/ios/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Sign in With Apple 구현하기: UIKit</title>
            <link>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-uikit/</link>
            <pubDate>Sat, 29 Aug 2020 11:00:14 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-uikit/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 이번 새로운 프로젝트 진행 중에 소셜 로그인 서비스를 제공하기로 결정되었는데요. 앱에서 소셜 로그인을 하나라도 제공하게 되면 Apple 로그인도 반드시 지원해야 합니다. 요즘 로그인이 필요한 앱들은 웬만하면 소셜 로그인도 지원하는 추세니까 Apple 로그인도 구현해야되고&amp;hellip; 그러니까 지금 구현하는 방법을 알아두면 쓸 일이 많을거에요. 그럼 같이 한번 공부해볼까요~~
 Apple Developer Documentation 처음 접하는 내용은 무엇보다 공식문서를 먼저 살펴봐야겠죠!
이런저런 내용이 있긴한데 우리에게 필요한 부분은 App 과 Services 에 유저가 쉽게 로그인 할 수 있도록 도와주는 Framework 라는 정도인 것 같아요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>이번 새로운 프로젝트 진행 중에 소셜 로그인 서비스를 제공하기로 결정되었는데요. 앱에서 소셜 로그인을 하나라도 제공하게 되면 Apple 로그인도 반드시 지원해야 합니다. 요즘 로그인이 필요한 앱들은 웬만하면 소셜 로그인도 지원하는 추세니까 Apple 로그인도 구현해야되고&hellip; 그러니까 지금 구현하는 방법을 알아두면 쓸 일이 많을거에요. 그럼 같이 한번 공부해볼까요~~</p>
<hr>
<h2 id="apple-developer-documentation">Apple Developer Documentation</h2>
<p>처음 접하는 내용은 무엇보다 공식문서를 먼저 살펴봐야겠죠!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdNp10r%2FbtqGbjztlvZ%2FrKTcRAC7q3tuRBCHBKdlk0%2Fimg.png" alt="Apple 공식문서의 AuthenticationServices"></p>
<p>이런저런 내용이 있긴한데 우리에게 필요한 부분은 App 과 Services 에 유저가 쉽게 로그인 할 수 있도록 도와주는 Framework 라는 정도인 것 같아요. 코드 구현에 유용한 정보는 없어보이니 공식 문서는 이정도로 넘어가는걸로하고 그냥 직접 구현하면서 알아보도록 할게요!</p>
<hr>
<h2 id="entitlement-파일-생성하기">Entitlement 파일 생성하기</h2>
<p>먼저 새로운 프로젝트를 만들고 <strong>Signing &amp; Capabilities</strong> 카테고리로 넘어와 아래 이미지에서 빨간색 화살표로 표시된 <strong>+</strong> 버튼을 클릭해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQ9xAs%2FbtqGe9vtmiM%2FPUSCeM3D4iJRlYtFnL37UK%2Fimg.png" alt="Entitlement 파일 생성 버튼"></p>
<p>그러면 뭔가 익숙한 느낌의 새로운 창이 하나 뜹니다 ㅎㅎ 그러면 Sign 으로 검색하고 <strong>Sign In with Apple</strong> 을 찾아서 클릭해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbX2AwO%2FbtqGbHN03xM%2Fgw9fns2jabKRU0wrUPbjD0%2Fimg.png" alt="Sign In with Apple 검색"></p>
<p>참고로 Apple 에 개발자로 등록되지 않은 분들은 Sign In with Apple 이 검색되지 않을 수도 있어요. 이럴때는 <strong>Team</strong> 을 <strong>None</strong> 으로 설정하고 검색하면 보일거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FCMq8p%2FbtqGiTUi4DT%2F3DwenpNzuxvcg2knHXrx8K%2Fimg.png" alt="Team 설정"></p>
<p>이제 .entitlements 확장자를 가진 새로운 파일이 하나 생겼을 거에요. 뭔가 생소한 파일이죠?? 다행히 이곳에서 추가로 작업할 내용은 없습니다 ㅎㅎㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb8r5Je%2FbtqGfNyWHmo%2FbVicWmEJervLR9kmDMLGgk%2Fimg.png" alt="entitlement 파일 스크린샷"></p>
<hr>
<h2 id="import-authenticationservices">Import AuthenticationServices</h2>
<p>가장 먼저 우리가 해야할 일은 Apple 에서 로그인을 지원하기 위해 만든 인스턴스에 접근할 수 있도록 <strong>AuthenticationServices</strong> 를 import 해주어야 합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">AuthenticationServices</span>
</code></pre></div><hr>
<h2 id="sign-in-with-apple-버튼-생성하기">Sign In with Apple 버튼 생성하기</h2>
<p>이제 ViewController 에 <strong>Sign In with Apple</strong> 버튼을 생성해보도록 할게요. 여기서는 일반 UIButton 을 사용하는게 아니라 <code>ASAuthorizationAppleIDButton</code> 으로 인스턴스를 생성해야 합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> authorizationAppleIDButton = ASAuthorizationAppleIDButton()
</code></pre></div><p>처음보는 코드니까 당연히 공식문서를 보고 넘어가야겠죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbUAOZc%2FbtqGchhnEQp%2FQNIIp0nE7sDyZVrj1PJgpK%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDButton"></p>
<p>유저가 <strong>Sign In with Apple</strong> 을 시작할 수 있게 해주는 control 이라고 하네요. UIButton 처럼 <strong>UIControl</strong> 을 상속받고 있습니다. 그렇다면 어느정도 비슷한 성질을 가졌을 것 같네요. 이번엔 문서 아래쪽에 알아두면 좋을만한 내용이 있어 추가로 가져와봤어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fby4wXT%2FbtqGcgJwtvl%2FbWF4zHNX90xWDbzdbPdxZK%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDButton 2"></p>
<p>중간쯤에 Styling the Button 카테고리가 보이죠? 개발자가 <strong>cornerRadius</strong> 나 버튼의 <strong>style</strong> 을 일정 부분 수정할 수 있게 해놓은 것 같습니다. 이 부분은 나중에 시간날 때 직접 실험을 해보고 업데이트 하도록 할게요.</p>
<p>그럼 이제 버튼을 화면의 중앙에 오도록 배치해봅시다. <code>ASAuthorizationAppleIDButton</code> 도 결국 버튼의 일종이므로 <code>.addTarget</code> method 를 사용해 원하는 Action 을 구현할 수 있도록 <code>@objc</code> method 와 연결해 주었습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">UIKit</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">AuthenticationServices</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ViewController</span>: UIViewController {

    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Properties</span>
    <span style="color:#66d9ef">let</span> authorizationAppleIDButton = ASAuthorizationAppleIDButton()

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
        <span style="color:#66d9ef">super</span>.viewDidLoad()
        configureUI()
    }
    
    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - UI</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">configureUI</span>() {
        setAdditionalPropertyAttributes()
        setConstraints()
    }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setAdditionalPropertyAttributes</span>() {
        authorizationAppleIDButton.addTarget(<span style="color:#66d9ef">self</span>, action: <span style="color:#66d9ef">#selector</span>(handleAuthorizationAppleIDButton(<span style="color:#66d9ef">_</span>:)), <span style="color:#66d9ef">for</span>: .touchUpInside)
    }
    
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">setConstraints</span>() {
        view.addSubview(authorizationAppleIDButton)
        authorizationAppleIDButton.translatesAutoresizingMaskIntoConstraints = <span style="color:#66d9ef">false</span>
        
        NSLayoutConstraint.activate([
            authorizationAppleIDButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            authorizationAppleIDButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    <span style="color:#75715e">// </span><span style="color:#75715e">MARK:</span><span style="color:#75715e"> - Selectors</span>
    <span style="color:#66d9ef">@objc</span> <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleAuthorizationAppleIDButton</span>(<span style="color:#66d9ef">_</span> sender: ASAuthorizationAppleIDButton) {
        print(<span style="color:#66d9ef">#function</span>)
    }
}
</code></pre></div><p>여기까지 코드를 작성하고 시뮬레이터를 실행해보면 이렇게 중앙에 버튼이 배치되고 정상적으로 <code>handleAuthorizationAppleIDButton</code> 함수 내부에 구현해둔 print 가 실행되는 것을 볼 수 있을거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fnpd9X%2FbtqGdD5leqo%2FhodOCdFMtz8KpL1WuPZxOK%2Fimg.png" alt="Simulator 실행화면"></p>
<hr>
<h2 id="login-process-구현하기">Login Process 구현하기</h2>
<p>이제 UI작업은 마쳤으니 실제로 로그인이 데이터 처리에 필요한 코드를 작성해 보겠습니다. 당연한 얘기지만 로그인 과정은 버튼이 눌렸을 때 실행되도록 하면 되니까 <code>handleAuthorizationAppleIDButton()</code> 함수에 코드를 작성할거에요.</p>
<p>로그인 과정을 처리하기 위해서 우리가 필수로 생성하고 접근해야하는 인스턴스는 <code>ASAuthorizationAppleIDProvider</code> 입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbiQElo%2FbtqGeufLNXc%2FO06TV2DYskSjliKPjZByt0%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDProvider"></p>
<p>Apple ID 를 사용해서 로그인 인증 요청을 생성해주는 메커니즘이라고하네요. 이번에는 Overview 부분도 주의깊게 봐야합니다. 우리가 생성해야할 <strong>provider</strong>, <strong>request</strong>, <strong>controller</strong> 에 대한 정보들이 있거든요. 그럼 이 정보들을 바탕으로 코드를 한번 작성해봅시다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">@objc</span> <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleAuthorizationAppleIDButton</span>(<span style="color:#66d9ef">_</span> sender: ASAuthorizationAppleIDButton) {
    <span style="color:#66d9ef">let</span> provider = ASAuthorizationAppleIDProvider()
    <span style="color:#66d9ef">let</span> request = provider.createRequest()
    request.requestedScopes = [.fullName, .email]
    <span style="color:#66d9ef">let</span> controller = ASAuthorizationController(authorizationRequests: [request])
    controller.performRequests()
}
</code></pre></div><p>그냥 공식문서에 있는 것과 똑같이 작성했어요 ㅎㅎ Provider 를 통해 Request 를 생성하고 생성된 Request 를 Controller 에게 전달해줘서 Controller 가 요청을 실행하는 개념입니다.</p>
<p>중간에 있는 <code>.requestedScopes</code> 는 우리가 유저로부터 전달받을 최소한의 정보를 요청할 수 있게 도와주는 method 입니다. 내부에 들어가보면 <strong>fullname</strong> 과 <strong>email</strong> 이렇게 최대 2가지만 요청할 수 있게 만들어져 있어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcbMXgx%2FbtqGbrkxlPF%2FkyLMKbilgArt77K5EFp6SK%2Fimg.png" alt=".requestedScopes 의 내부코드"></p>
<p>물론 이 2가지마저도 사용자가 거부하면 우리가 받을 수 있는 것은 유저의 identifier 뿐으로 이것으로 최소한의 식별만 가능하게 됩니다. 역시 개인의 보안을 중시하는 애플이에요 ㅎㅎ</p>
<p>하지만 이것으로 끝은 아닙니다. 아직 유저가 로그인에 성공하거나 실패했을 때 처리를 하지 않았고, 로그인 요청 창을 띄울 페이지도 설정해주지 않았거든요. 이 부분을 처리하기 위해서는 <code>ASAuthorizationControllerDelegate</code> 와 <code>ASWebAuthenticationPresentationContextProviding</code> 을 채택해야합니다.</p>
<p><code>ASAuthorizationControllerDelegate</code> 를 채택하고 나면 로그인이 성공적으로 처리되었을 때 호출될 <code>didCompleteWithAuthorization</code> 함수와 실패했을 때 호출될 <code>didCompleteWithError</code> 함수를 불러올 수 있게 됩니다.</p>
<p>그리고 <code>ASWebAuthenticationPresentationContextProviding</code> 에는 필수 구현 함수인 <code>presentationAnchor()</code> 에서 사용자에게 로그인 요청을 띄울 윈도우를 설정해줄 수 있습니다. 우리는 현재 View 의 Window 에서 바로 실행되도록 만들거에요. 자 그럼 지금까지 얘기한 내용들을 바로 코드로 구현해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: ASAuthorizationControllerDelegate {
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
    }
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithError error: Error) {
    }
}


<span style="color:#66d9ef">extension</span> <span style="color:#a6e22e">ViewController</span>: ASAuthorizationControllerPresentationContextProviding {
    
    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">presentationAnchor</span>(<span style="color:#66d9ef">for</span> controller: ASAuthorizationController) -&gt; ASPresentationAnchor {
        <span style="color:#66d9ef">return</span> view.window!
    }
}
</code></pre></div><p>이전에 만들어 두었던 <code>handleAuthorizationAppleIDButton()</code> 함수 내부의 controller 에게 <strong>delegate</strong> 와 <strong>provider</strong> 위임도 빼먹지 말고 꼭 해주세요!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">controller.delegate = <span style="color:#66d9ef">self</span>
controller.presentationContextProvider = <span style="color:#66d9ef">self</span>
</code></pre></div><p>이제 거의 끝이 보입니다!</p>
<p>먼저 로그인 정보가 성공적으로 들어왔을 때에 대한 처리 코드를 작성해볼게요. 당연히 <code>didCompleteWithAuthorization</code> 함수에 작성해야겠죠? 이 함수는 호출되면 <strong>ASAuthorization</strong> 타입을 가진 parameter 와 함께 실행됩니다. 잠깐 <strong>ASAuthorization</strong> 에 대해 알아보자면&hellip;</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCgyLl%2FbtqGebAC1fT%2FbJ3fc7my35fmd1tVd58IoK%2Fimg.png" alt="Apple 공식문서의 ASAuthorization"></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbPztcT%2FbtqGevS85Ix%2FfXlJdcPlgNF9OHEoDpQODk%2Fimg.png" alt="Apple 공식문서의 ASAuthorization 2"></p>
<p>Controller 가 성공적으로 인증을 진행했을 때 캡슐화해서 전달해주는 정보라고하네요. 내부에 <strong>credential</strong> 이라고하는 property 가 있고 이것은 성공적으로 인증된 사용자의 정보라고 합니다.. 지금은 캡슐화가 되어있는 상태이므로 <strong>credential</strong> 정보에 접근하기 위해 <strong>ASAuthorizationAppleIDCredential</strong> 타입으로 캐스팅이 필요합니다. 생소한 타입이죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAfI3n%2FbtqGe8XK9qT%2FUt5K1fhfdgYw86ola0aCkk%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDCredential"></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbyG1aA%2FbtqGdthHid0%2Fef21K8UmkKpUkyitmZkGWk%2Fimg.png" alt="Apple 공식문서의 ASAuthorizationAppleIDCredential 2"></p>
<p>설명을 보면 encapsulation 이라는 단어가 사라지고 Apple ID 를 사용해 성공적으로 인증된 결과라고 써져있어요. 이것으로 타입 캐스팅을하면 캡슐이 해제되고 우리가 원하는 정보들에 접근할 수 있게됩니다. 문서의 Getting Contact Information 카테고리에 <code>fullName</code> 과 <code>email</code> 이 적혀있고 우리가 접근할 수 있을 것 같아요. 그리고 <code>user</code> 라는 property 가 매우 중요한데 일종의 <strong>identifier</strong> 로 우리가 무조건 받을 수 있는 소중한 정보입니다. 이 값으로 우리는 유저가 누구인지 판단을 해야하거든요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> appleIDCredential = authorization.credential <span style="color:#66d9ef">as</span>? ASAuthorizationAppleIDCredential {
        <span style="color:#75715e">// Create an account in your system.</span>
        <span style="color:#66d9ef">let</span> userIdentifier = appleIDCredential.user
        <span style="color:#66d9ef">let</span> userFirstName = appleIDCredential.fullName?.givenName
        <span style="color:#66d9ef">let</span> userLastName = appleIDCredential.fullName?.familyName
        <span style="color:#66d9ef">let</span> userEmail = appleIDCredential.email
}
</code></pre></div><p>그리고 <code>fullName</code> 은 <code>.givenName</code> 과 <code>.familyName</code> 으로 나눠서 받을 수도 있어요. 이렇게 첫 가입절차에서 사용자의 정보를 가져오는 코드를 완성했습니다. 이제 사용자가 최초 가입 후 로그인을 마치고 다음 로그인 시부터 우리가 사용자를 식별하여 로그인을 수 있도록 도와주는 코드를 작성해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">let</span> appleIDProvider = ASAuthorizationAppleIDProvider()
appleIDProvider.getCredentialState(forUserID: userIdentifier) { (credentialState, error) <span style="color:#66d9ef">in</span>
    <span style="color:#66d9ef">switch</span> credentialState {
    <span style="color:#66d9ef">case</span> .authorized:
        <span style="color:#75715e">// The Apple ID credential is valid. Show Home UI Here</span>
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">case</span> .revoked:
        <span style="color:#75715e">// The Apple ID credential is revoked. Show SignIn UI Here.</span>
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">case</span> .notFound:
        <span style="color:#75715e">// No credential was found. Show SignIn UI Here.</span>
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">default</span>:
        <span style="color:#66d9ef">break</span>
    }
}
</code></pre></div><p><strong>authorized</strong> - 사용자의 identifier 가 <strong>정상적으로</strong> 인식되었을 경우<br>
<strong>revoked</strong>- 사용자의 identifier 가 <strong>유효하지 않은</strong> 경우<br>
<strong>notFoun</strong> - 사용자의 identifier 를 <strong>찾지 못한</strong> 경우</p>
<p><strong>CredentialState</strong> 에는 경우의 수가 총 3가지가 있고 상황에 맞는 코드를 각 case 에 작성해주면 됩니다. 우리는 추가 작업이 필요하지 않으므로 따로 작성하지 않겠습니다.</p>
<p>에러처리는 따로 작성해주지 않아도 무방하지만 그래도 에러발생 시 우리가 알 수 있도록 print 를 하나 남겨두겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">authorizationController</span>(controller: ASAuthorizationController, didCompleteWithError error: Error) {
    print(error)
}
</code></pre></div><p>이제 앱을 한번 실행해볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQav98%2FbtqGc8rpXao%2FLkKCEUV8dYrF1MplHwXM11%2Fimg.png" alt="Simulator 실행화면"></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fk1XaG%2FbtqGdEpVPLE%2F4KgZrwmU8MBhNkQoGJbqIk%2Fimg.png" alt="Simulator 실행화면 2"></p>
<p>이렇게 가입이 정상적으로 진행됩니다. Print 로 내가 가입 시 제공한 정보(이메일 및 이름)들과 <strong>identifier</strong> 가 console 에 출력될거에요. 하지만 첫번째를 제외한 이후 로그인 부터는 <strong>identifier</strong> 만 print 되고 나머지는 <strong>nil</strong> 값이 들어옵니다. 그럼 이번 포스팅은 이것으로 마치겠습니다.</p>
<hr>
<h2 id="함께-참고하면-좋은-포스트">함께 참고하면 좋은 포스트</h2>
<p><img src="" alt="Apple Sign In: 계정 로그아웃하기"></p>
]]></content>
        </item>
        
        <item>
            <title>CocoaPods: 설치 및 라이브러리 적용하기</title>
            <link>https://kasroid.github.io/posts/ios/20200823-cocoapods-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
            <pubDate>Sun, 23 Aug 2020 19:14:16 +2430</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200823-cocoapods-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
            <description>오늘은 CocoaPods 가 무엇인지 알아보도록 하겠습니다.
개발을 할 때 모든 것을 스스로 만드는 것도 좋지만 필요에 따라 Library 를 써서 시간과 노력을 절약하고 다른 곳에 좀 더 신경을 쓰는 것이 좋을 때도 있을겁니다. 하지만 그렇게 Library 사용 빈도가 점점 늘게되면 나중에는 Library 를 찾거나 관리하는데 시간이 많이 소모되게 됩니다. 그럼 아무래도 Library 를 쓰는 의미가 많이 퇴색되겠죠? 그래서 Xcode 에서 이런 Library 관리를 쉽게 할 수 있도록 도와주는 것이 CocoaPods 입니다.</description>
            <content type="html"><![CDATA[<p>오늘은 CocoaPods 가 무엇인지 알아보도록 하겠습니다.</p>
<p>개발을 할 때 모든 것을 스스로 만드는 것도 좋지만 필요에 따라 Library 를 써서 시간과 노력을 절약하고 다른 곳에 좀 더 신경을 쓰는 것이 좋을 때도 있을겁니다. 하지만 그렇게 Library 사용 빈도가 점점 늘게되면 나중에는 Library 를 찾거나 관리하는데 시간이 많이 소모되게 됩니다. 그럼 아무래도 Library 를 쓰는 의미가 많이 퇴색되겠죠? 그래서 Xcode 에서 이런 Library 관리를 쉽게 할 수 있도록 도와주는 것이 CocoaPods 입니다.</p>
<p>즉 한마디로 CocoaPods 는 Library 관리 툴입니다. 각종 Libarary 를 설치, 삭제, 그리고 버전 관리를 할 수 있습니다. 개인 프로젝트에서도 충분히 그 역할을 다하지만, 여러 사람이 한 프로젝트를 공유하여 협업할 때 CocoaPods 내의 Library List (Podfile.lock) 파일만 전달해도 모두가 동일한 버전의 라이브러리를 손쉽게 설치할 수 있도록 도와주기도 합니다.</p>
<p>최근에는 Apple 이 공식적으로 지원하고 설치 및 관리가 더 편한 Swift Package Manager 가 등장하긴 했지만 SPM 에는 없는 Library 들이 CocoaPods 로는 존재하는만큼 Library 사용에 있어 절대로 빼놓을 수 없는 것이 CocoaPods 입니다.</p>
<p>그럼 이제 설치부터 사용방법까지 같이 한번 알아보도록 해요.</p>
<hr>
<h2 id="공식-홈페이지에서-cocoapods-설치하기">공식 홈페이지에서 CocoaPods 설치하기</h2>
<p>먼저 CocoaPods <a href="https://cocoapods.org">공식 홈페이지</a>에 들어가보세요. 접속해서 스크롤을 조금만 내려보면 다음과 같은 페이지를 볼 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FctQclR%2FbtqGp1Sb86x%2FVr2aM67JGol03cxmVfzCVk%2Fimg.png" alt="Official Website"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">sudo gem install cocoapods
</code></pre></div><p>그럴리 없겠지만 만약에 홈페이지에 접속이 안되거나 명령어를 찾지 못하는 분들은 위 코드를 복사해서 붙여넣으셔도 됩니다 ㅎㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFhYYm%2FbtqGmPLoMCG%2Fqm2l0KV5KqacO5w89ksu3k%2Fimg.png" alt="Intallation Screenshot"></p>
<p>자 이렇게 하고 Return 키를 누르면 자동으로 설치가 완료됩니다. 자물쇠 모양이 뜬다면 맥북에 설정해 놓은 비밀번호를 치고 다시 한번 Return 키를 눌러주세요. 참고로 비밀번호 칠 때 아무것도 안쳐지는 것처럼 보일 수 있는데 그냥 치면 됩니다 ㅎㅎ</p>
<p>이렇게 CocoaPods 에 설치를 마쳤어요. 정말 간단했죠?</p>
<hr>
<h2 id="homebrew-로-cocoapods-설치하기">Homebrew 로 CocoaPods 설치하기</h2>
<p>macOS Catalina 부터 CocoaPods 가 정상적으로 설치되지 않는 경우가 있다고 하네요. 저도 방금 맥북이 꼬여서 포맷 후에 CocoaPods 를 설치하는 과정에서 문제가 생겨서 많이 헤매다가 결국 Homebrew 를 통해 설치하는 방법으로 해결했습니다.</p>
<p>오히려 위에서 안내드렸던 방법보다 설치 및 삭제 관리까지 더 용이하기 때문에 저는 개인적으로 이제부터는 항상 Homebrew 를 통해서 설치하게 될 것 같아요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">brew install cocoapods
</code></pre></div><p>혹시 아직 Homebrew 를 설치하지 않은 분들은 다음 포스팅을 참고하여 먼저 설치를 진행해 주세요.</p>
<hr>
<h2 id="프로젝트에-cocoapods-적용하기">프로젝트에 CocoaPods 적용하기</h2>
<p>자 그럼 실습을 위해 새로운 Xcode 프로젝트를 시작해볼게요. 프로젝트 생성 후에 해당 폴더 내로 들어가보면 아래와 같은 화면을 볼 수 있을거에요. 폴더 하나와 .xcodeproj 파일이 하나 있네요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb5ex6P%2FbtqGmPYW2SG%2FifzgjKkGvbAcphAj8kWNhK%2Fimg.png" alt="Finder Screenshot"></p>
<p>이제 이 곳에 CocoaPods 를 적용해보겠습니다. macOS 터미널에서 방금 전 만든 폴더가 있는 곳으로 들어간 뒤에 다음 명령어를 입력해주세요.</p>
<pre><code class="language-Console" data-lang="Console">pod init
</code></pre><p>아래 스크린샷을 보면 처음에는 파인더에서 보았듯이 파일이 딱 2개만 있었는데 CocoaPods 를 프로젝트 폴더에 적용한 뒤에는 Podfile 이라는 새로운 파일이 하나 더 생긴 모습을 볼 수가 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FMawt6%2FbtqGpzhk9fx%2F8gVSkmtQStQ2g4TEaXYqP0%2Fimg.png" alt="Terminal Screenshot"></p>
<hr>
<h2 id="library-적용하기">Library 적용하기</h2>
<p>이렇게 새로운 Library 를 설치할 준비가 되었습니다. 그렇다면 라이브러리는 어떻게 설치할 수 있을까요? 조금 전에 우리가 방문했었던 CocoaPods 홈페이지로 돌아가 검색창에 SnapKit 을 입력해보세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FBO9XI%2FbtqGrfIZQ3Q%2Fb7jLyQjSOkGMWPSBDvN4CK%2Fimg.png" alt="Searching Cocoapods"></p>
<p>이런식으로 결과가 보일거에요. 이중 제일 위의 SnapKit 을 클릭해서 들어가보도록 할게요. 우측에 옅은 회색으로 보이는 숫자는 현재 제가 설치하는 시점에서 가장 최신 버전이 5.0.1 이라는 뜻입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbSjJEo%2FbtqGpzIng6Y%2FKmkFWDj7zbhKm2IaTxqC8K%2Fimg.png" alt="Installation Guideline"></p>
<p>스크롤을 조금만 내려보면 Installation 이라는 문구가 보일거에요. 이곳에 CocoaPods 라고 써져있네요. 딱 봐도 이곳을 살펴보면 될 것 같은 느낌이 들죠? 첫번째로 보이는 명령어는 우리가 이미 진행한 CocoaPods 의 설치법이고 우리에게 지금 필요한 것은 두번째 코드 블럭입니다. 처음보면 뭔가 복잡해보일 수 있지만 우리가 필요한 코드는 밑에서 두번째 줄에 위치한 pod 로 시작하는 명령어 단 한줄이에요. SnapKit 라이브러리의 5.0.0 version 이상을 설치하겠다는 의미입니다.</p>
<pre><code class="language-Console" data-lang="Console">pod 'SnapKit', '~&gt; 5.0.0'
</code></pre><p>그럼 조금 전 우리가 생성한 Podfile 을 열어주세요. 기본 텍스트 편집기도 좋고 Vim 도 좋고 그냥 텍스트 에디터 중 어떤 것으로 열어도 괜찮습니다. 저는 VSCode 로 작성해보겠습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FLQGDR%2FbtqGmQjgWjr%2FrMOhwF6McvnpFLyDAY2REk%2Fimg.png" alt="VScode Screenshot"></p>
<p>이제 SnapKit 을 설치할 준비가 모두 끝났습니다! 파일을 저장하고 닫은 뒤 터미널로 돌아가 설치 명령어를 입력해보도록 할게요 설치니까 당연히 install 이라고 치면되겠죠?</p>
<pre><code class="language-Console" data-lang="Console">pod install
</code></pre><p>명령어를 실행하고 나면 다음과 같은 화면이 보이게 됩니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqvMHI%2FbtqGiqMDEq6%2FRQ2UU0pJATQa69Y8wBa0kK%2Fimg.png" alt="Terminal Screenshot"></p>
<p>그럼 초반에 열어둔 Xcode 프로젝트 파일이 있던 파인더를 다시 한번 봐볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc1DLt7%2FbtqGpxcplX3%2FhZWdioAtSTguqNDFpwJ7K1%2Fimg.png" alt="Finder Screenshot"></p>
<p>무언가 파일들이 엄청 많이 생겼어요 ㅎㅎㅎ 이게 전부 다 CocoaPods 관련 파일들이랍니다. Podfile 은 우리가 프로젝트에 설치하기 원하는 라이브러리를 찾아 이름과 버전을 적었던 파일이었던거 기억하시죠? 그럼 다른 파일들은 무엇인지 잠깐 알아보도록 할게요.</p>
<p>먼저 Podfile.lock 파일은 Podfile 에 적혀있던 목록들을 설치하고나면 이 프로젝트에 설치되어 있는 라이브러리의 목록과 버전을 정확하게 보관하고 있는 파일입니다. 우리가 방금 SnapKit 을 설치했을 때는 최신 버전이 5.0.0 대 였지만 먼 훗날 언제가 우리가 이 파일을 누군가에게 전달하고 그 사람이 SnapKit 을 설치할 때는 최신 버전이 6.0.0 대 일 수 있잖아요? 그럼 라이브러리 호환성으로 인한 충돌이 발생할 수 있기 때문에 이런 상황을 방지하고자 CocoaPods 는 Podfile.lock 에 본인이 설치한 라이브러리들의 대한 정보를 정확히 기록해두는 거에요. 즉 이 파일만 공유하면 프로젝트에 설치된 라이브러리의 버전을 협업하는 사람들과 항상 동일하게 유지할 수 있게됩니다.</p>
<p>Pods 폴더는 실제 라이브러리에 관련된 데이터가 들어가있는 곳이에요. 무언가 문제가 생겨 처음부터 다시 설치하고자할 때는 이 폴더를 통째로 삭제하고 pod install 을 통해 라이브러리를 다시 설치할 수 있습니다.</p>
<p>그리고 이전에는 볼 수 없었던 흰색 Xcode 파일이 생겼습니다. 확장자는 .xcworkspace 로 CocoaPods 가 설치된 이후부터는 프로젝트 실행 시 xcodeproj 대신 이 파일을 사용해야 합니다. 기존 xcodeproj 파일과 완전히 동일하고 한쪽을 수정하게되면 다른 한쪽도 수정되지만 xcodeproj 에서는 CocoaPods 로 설치한 라이브러리들을 정상적으로 인식할 수 없으므로 사실상 작업이 불가능합니다. 그러니까 CocoaPods 로 Xcode 프로젝트에 라이브러리를 설치했다? 그럼 .xcworkspace 파일만 사용한다 이렇게 생각해주세요.</p>
<p>그럼 이제 workspace 파일을 실행시켜서 SnapKit 을 import 해보겠습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxFd1d%2FbtqGiTHOjs5%2FpPmAuCNLCNEU9komYfgXSK%2Fimg.png" alt="Xcode Screenshot"></p>
<p>좌측 Navigator 에 기존에는 볼 수 없었던 새로운 파일들이 많이 생긴 것을 볼 수 있습니다. 우리가 특별히 건들 필요가 없는 파일들이니까 겁먹지 않아도 됩니다 ㅎㅎㅎ 그리고 정상적으로 SnapKit 이 import 된 것도 확인할 수 있습니다. 혹시라도 에러가 발생한다거나하는 문제가 있는 분들은 Xcode 를 완전히 껏다가 다시 한번 실행해주세요.</p>
<p>이렇게 CocoaPods 를 설치하고 간단하게 Library 를 적용하는 방법까지 알아보았습니다. 터미널이랑 웹페이지 등을 왔다갔다 해야되서 조금 복잡해보일 수도 있지만 다른 라이브러리들도 모두 동일한 방식으로 사용가능하니까 조금만 반복해보면 금방 익숙해질 수 있을거에요.</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics: Button 과 List 생성하기</title>
            <link>https://kasroid.github.io/posts/ios/20200802-swiftui-basics-button-%EA%B3%BC-list-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</link>
            <pubDate>Sun, 02 Aug 2020 01:42:41 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200802-swiftui-basics-button-%EA%B3%BC-list-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 이번 포스팅에서는 Button 과 List (UIKit 의 UITableView 와 동일) 를 생성하는 방법을 공부해보도록 할게요. SwiftUI 에서는 Button 과 List 를 구현하는 코드도 단 몇 줄이면 충분합니다. 이게 다 오토레이아웃이 자동 적용되서 그런것 같아요.
 Button 이전에 공부할 때 Text 가 View 라고했었으니까 Button 도 당연히 View 의 일종일거라 생각하고 따로 찾아보진 않으려고 했거든요? 근데 그래도 공식문서를 한번쯤 보는게 예의가 아닐까 싶어 찾아보니 View 가 아니였습니다.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>이번 포스팅에서는 Button 과 List (UIKit 의 UITableView 와 동일) 를 생성하는 방법을 공부해보도록 할게요. SwiftUI 에서는 Button 과 List 를 구현하는 코드도 단 몇 줄이면 충분합니다. 이게 다 오토레이아웃이 자동 적용되서 그런것 같아요.</p>
<hr>
<h2 id="button">Button</h2>
<p>이전에 공부할 때 Text 가 View 라고했었으니까 Button 도 당연히 View 의 일종일거라 생각하고 따로 찾아보진 않으려고 했거든요? 근데 그래도 공식문서를 한번쯤 보는게 예의가 아닐까 싶어 찾아보니 View 가 아니였습니다. 안찾아봤으면 어쩔뻔!</p>
<p>Button 자체는 View 가 아니라 Control 이더라고요. 다만 Button 내의 Label 이 Generic 타입으로 구현되어 있고 이 Label 이 View 로 인식이 되는 형태입니다. 뭐 그래서 결국 Button 이 View 의 일종이 되는거긴 하지만 공식문서의 구분에서 control 로 구분하고 있어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWGY1B%2FbtqF8vtMHos%2FnebTHkKrwtSXTxYAmWFFLK%2Fimg.png" alt="Apple 공식문서의 Button"></p>
<p>버튼 생성은 Text 처럼 parenthesis(괄호) 안에 원하는 타이틀을 입력하고 brace(중괄호) 안에 버튼이 눌렸을 때 동작하기 원하는 코드를 작성하면 됩니다. 일단 우리는 버튼이 잘 동작하는지만 확인하면 되니까 버튼이 눌리면 &ldquo;Button Pressed&rdquo; 가 print 되는 코드를 구현해보록 하겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-SWift" data-lang="SWift"><span style="color:#66d9ef">var</span> body: some View {
    Button(<span style="color:#e6db74">&#34;Button&#34;</span>) {
        print(<span style="color:#e6db74">&#34;Button Pressed&#34;</span>)
    }
}
</code></pre></div><p>아래 결과를 보면 이번에도 코드 단 몇 줄만으로 Button 이 중앙에 잘 표시되고 있죠?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fnm6o0%2FbtqGdtnfXTi%2FxQ4bBNkKkrjlLk08ijNJiK%2Fimg.png" alt="버튼이 정상적으로 표시되고 있는 화면"></p>
<p>Preview 에서는 단순히 Button 의 위치를 확인하는 것 뿐 아니라 어떤 입력을 받을 때 특정 코드가 실행되는 것을 확인할 수 있습니다.</p>
<p>그렇다고 바로 누르면 되는건 아니고 Preview 를 기준으로 우측 하단에 위치한 두 개의 버튼 중 첫번째 버튼인 Live Preview 를 우클릭하면 좌측 이미지와 같은 창이 하나 뜨는데 이 중 두번째 메뉴인 Debug Preview 를 클릭해 봅시다.</p>
<!-- raw HTML omitted -->
<p>잠시 로딩을 기다린 뒤 정상적으로 Debug Preview 가 활성화 된 상태에서 버튼을 눌러보면!! Button 액션으로 구현된 print 까지 console 에 printing 되는 것을 확인할 수 있습니다.</p>
<p>여기서 추가적으로 궁금증이 생겼는데 Preview 에서 Animation 까지 확인해 볼 수 있는 건지 궁금해졌어요. 이렇게 button action 까지 실행되는 것 보면 가능할 것 같기도 하고요 ㅎㅎㅎ 하지만 오늘은 기초적인 것들만 알아볼거니까 추가로 확인해보진 않을거에요 ㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdPobHJ%2FbtqGe7eee2I%2Fl3xkIexJWyiH00PvckOLxK%2Fimg.gif" alt="&ldquo;Button Pressd&rdquo; 가 print 되는 모습"></p>
<p>대신 버튼에 텍스트말고 이미지와 SF Symbol 을 넣을 수 있는 방법을 알아보도록 할게요.</p>
<p>HStack 을 사용해 Button 2개를 가로로 배치하고 첫번째 버튼에는 SwiftUI 이미지를, 두번째 버튼에는  SF Symbol &ldquo;play.circle&rdquo; 아이콘을 넣었어요.</p>
<p>주의해야할 점 하나가 있는데 SwiftUI 에서는 Button 이미지의  renderingMode 기본 값이 .template 으로 되어 있어 다운로드 받은 이미지의 경우 .original 로 변경을 해주어야 이미지가 정상적으로 보이게됩니다. SFSymbol 을 삽입한 경우에는 오히려 기본값이 .template 이라 별 다른 추가작업 없이도 색상이 변경가능하지만요!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
        HStack(spacing: <span style="color:#ae81ff">20</span>) {
            Button(action: { print(<span style="color:#e6db74">&#34;Button 1&#34;</span>) }) {
                Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
                    .renderingMode(.original)
                    .resizable()
                    .frame(width: <span style="color:#ae81ff">120</span>, height: <span style="color:#ae81ff">120</span>)
            }
            Button(action: { print(<span style="color:#e6db74">&#34;Button 1&#34;</span>) }) {
                Image(systemName: <span style="color:#e6db74">&#34;play.circle&#34;</span>)
                    .imageScale(.large)
                    .font(.largeTitle)
            }
            .accentColor(.green)
        }
    }
</code></pre></div><p>위 코드를 입력하면 다음과 같은 결과를 확인해 볼 수 있습니다. 참고로 .accentColor 는 UIKit 의 tintColor 의 역할을 대신하며 색상을 바꿔주는 코드에요. 지금은 .green 을 적용해서 오른쪽 play.circle 이미지가 초록색으로 변했습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhRObn%2FbtqGdDp4dHn%2F8asFKojLZnKlNvtF5k19iK%2Fimg.png" alt="Button 에 이미지를 삽입"></p>
<hr>
<h2 id="list">List</h2>
<p>List 가 뭘까요? UIKit 에서는 없던 이름이에요. UITableView 가 SwiftUI 에서 List 라는 이름으로 완전히 바뀌었습니다. 왜 굳이 Table 이 아니라 List 라고 했는지는 조금 의아하지만 아무튼 List 도 직관적이고 좋은 것 같아요 ㅎㅎ 근데 이러면 아직 SwiftUI 로는 지원되지 않는 UICollectionView 이름은 어떻게 정해질지 궁금해지네요.</p>
<p>위에서 Button 공식 문서를 봤더니 버튼 자체는 control 이지만 버튼 내부의 Label 이 View 타입이었던 것 기억하시죠? 이처럼 List 자체는 다른 타입이지만 내부의 어떤 것 때문에 View 로 인정되는 것 수 있을 것 같다는 의심이 들어 공식문서를 먼저 살펴보았습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FyoDrT%2FbtqGdD4DDan%2FnjPwkeocg6KAlhbWLtYWUK%2Fimg.png" alt="Apple 공식문서의 List"></p>
<p>역시나!! List 는 View 가 아니라 data 를 row 의 형태로 나타낼 수 있는 container라고 하네요. 그럼 body 가 어떻게 View 로 받을 수 있느냐&hellip; 위 스크린샷에서 Generic 타입으로 SelectionValue 랑 Content 2가지가 있는걸 확인할 수 있는데요. 짤려서 보이지 않지만 이 중 content 가 View 타입입니다.</p>
<p>그럼 List 를 생성해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    List{
        Text(<span style="color:#e6db74">&#34;1&#34;</span>)
    }
}
</code></pre></div><p>네 이게 끝입니다. 정말로 List 가 생성이 되었다구요! UITableView 를 만들어보신 분들은 이게 얼마나 놀랍도록 간단한건지 느낄거에요!!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbaiSvA%2FbtqGbqyrQMU%2Fgk5KubIB0Vh7j4vTwuAXN0%2Fimg.png" alt="List 가 생성된 모습"></p>
<p>이전에 없던 옅은 선들이 보이시죠? 이게 바로 List 입니다. List 역시 Button 과 같은 방법으로 Preview 에서 스크롤을 실험해 볼 수 있습니다.</p>
<p>그런데 그냥 이렇게 빈 칸으로 두면 허전하니까 각 줄에 데이터를 몇가지 넣어보도록 할게요. List brace 안쪽으로 원하는 View 를 구현하면 각 instance 가 순서대로 List 의 row 에 추가되게 됩니다. 한번 확인해볼까요?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    List {
        Text(<span style="color:#e6db74">&#34;List&#34;</span>).font(.largeTitle)
        Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        Circle().frame(width: <span style="color:#ae81ff">100</span>, height: <span style="color:#ae81ff">100</span>)
        Color(.red).frame(width: <span style="color:#ae81ff">100</span>, height: <span style="color:#ae81ff">100</span>)
    }
}
</code></pre></div><p>위 코드를 입력해보세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FvgT9q%2FbtqGbIenip6%2FanGK8q56kregPlrRlKW0s0%2Fimg.png" alt="Result"></p>
<p>정말 그냥 적힌 순서대로 각 instance 가 List 의 row 에 추가됩니다. 다만 최대로 입력할 수 있는 instance 의 갯수는 10개라는거 기억하세요</p>
<p>당연히 데이터가 10개를 넘더라도 정상적으로 표시할 수 있는 방법이 있습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    List(<span style="color:#ae81ff">0.</span>.&lt;<span style="color:#ae81ff">100</span>) {
        Text(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">\(</span>$0<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
    }
}
</code></pre></div><p>위 코드를 입력해보세요. 이런식으로 원하는 데이터를 마음껏 넣어줄 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxKIUu%2FbtqGbbPpixm%2FzhMYYlCQaQKgRN2mmsZDtk%2Fimg.png" alt="Result"></p>
<p>마지막으로 UITableView 하면 빼놓을 수 없는 것 중 Header 와 Footer 가 있었죠? 얘네를 List 에서 추가할 수 있는 방법을 알아보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">List {
        Section (
            header: Text(<span style="color:#e6db74">&#34;Header1&#34;</span>),
            footer: Text(<span style="color:#e6db74">&#34;Footer1&#34;</span>)
        ) {
            Text(<span style="color:#e6db74">&#34;1&#34;</span>)
            Text(<span style="color:#e6db74">&#34;2&#34;</span>)
            Text(<span style="color:#e6db74">&#34;3&#34;</span>)
            Text(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        }
        Section (
            header: Text(<span style="color:#e6db74">&#34;Header2&#34;</span>),
            footer: HStack { Spacer(); Text(<span style="color:#e6db74">&#34;Footer2&#34;</span>) }
        ) {
            Text(<span style="color:#e6db74">&#34;Section2&#34;</span>)
            Text(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        }
    }
    .listStyle(GroupedListStyle())
}
</code></pre></div><p>List 내부에 Section 항목을 먼저 추가하고 header 와 footer 를 입력합니다. 그 다음 brace 를 열어 해당 Section 에 속하는 데이터들을 입력해주면 끝입니다. header 와 footer 는 기본적으로 좌정렬 되어 있으니까 우측에 표시하고 싶을 때는 HStack 을 사용해 Spacer 를 추가한 뒤 Text 를 입력해주면 됩니다.</p>
<p>추가적으로 .listStyle 이라는 코드가 보이죠? 얘는 GroupedListStyle 또는 DefualtListStyle 중에 선택할 수 있고, 결과에 따라 header 나 footer 가 List 가 스크롤 될 때 함께 스크롤 될지 아니면 남아있을지 설정할 수 있는 옵션입니다. 직접 한번 실험 해보시면 확실히 이해가 되실거에요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAaAYX%2FbtqGbPdHdat%2FFF3DA2wRwissXF0E77X5L1%2Fimg.png" alt="Result"></p>
<p>이렇게 기본적인 List 의 생성 방법을 알아보았어요. UIKit 과 많이 달라진 방식이 아직은 서툴지만 또 쓰다보면 금방 익숙해질거에요. 그러니까 SwiftUI 도 미리미리 같이 공부해보자구요~~</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics: Stacks 와 Spacer 사용하기</title>
            <link>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-stacks-%EC%99%80-spacer-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
            <pubDate>Fri, 31 Jul 2020 11:33:35 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-stacks-%EC%99%80-spacer-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 SwiftUI 에서는 자동으로 뷰의 레이아웃을 잡아주는 기능이 매우 강화되면서 Stacks 의 사용이 더 중요해졌습니다. Stack 은 현재 총 3종류가 있으며 HStack, VStack, ZStack 으로 구성됩니다. 함께 공식 개발자 문서를 보려고 했는데 너무 간단하게 나와있어서 의미가 없을 것 같아요 ㅎ 그냥 하나씩 알아보죠 ㅎㅎㅎ
 HStack HStack 은 Horizontal Stack 으로 우리가 뷰를 가로로 배치할 수 있게 도와주는 View 입니다. 사용법도 이보다 쉬울 수가 없어요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>SwiftUI 에서는 자동으로 뷰의 레이아웃을 잡아주는 기능이 매우 강화되면서 Stacks 의 사용이 더 중요해졌습니다. Stack 은 현재 총 3종류가 있으며 HStack, VStack, ZStack 으로 구성됩니다. 함께 공식 개발자 문서를 보려고 했는데 너무 간단하게 나와있어서 의미가 없을 것 같아요 ㅎ 그냥 하나씩 알아보죠 ㅎㅎㅎ</p>
<hr>
<h2 id="hstack">HStack</h2>
<p>HStack 은 Horizontal Stack 으로 우리가 뷰를 가로로 배치할 수 있게 도와주는 View 입니다. 사용법도 이보다 쉬울 수가 없어요. 그냥 HStack 을 중괄호로 열고 그 안에 원하는 내용을 넣으면 됩니다. 그러면 각 Object 들이 좌측부터 순서대로 배치가 됩니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">HStack {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>따로 레이아웃을 잡은게 없는데도 중앙에 잘 표시가 되네요. 코드 3줄로 뷰를 완성했습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FctNP9J%2FbtqF7Kxv0k5%2Fqe64Bl700TNEeAPc26Kk11%2Fimg.png" alt="HStack 결과"></p>
<hr>
<h2 id="vstack">VStack</h2>
<p>HStack 이 Horizontal Stack 이라고 했으니까 VStack 은 뭔지 감이 딱 오죠?? 바로 Vertical Stack 이겠네요. 그리고 본인 내부에 위치한 Object 들을 세로로 배치해 줄 것 같습니다. 그럼 기존에 작성해놓은 코드에서 알파벳 하나만 바꿔서 어떻게 되는지 볼까요?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">VStack {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>짜잔!!! 딱 한글자만 바꿨는데 뷰의 구성은 완전히 바뀌었어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdJOBgi%2FbtqGba9zHg4%2FyLfngLYIpkVckLj3zXbIg0%2Fimg.png" alt="VStack 결과"></p>
<hr>
<h2 id="zstack">ZStack</h2>
<p>HStack 은 가로, VStack 이 세로면 다 끝난 것 같은데 아직 하나가 더 남았어요. ZStack 은 뭐의 줄임말인지 모르겠지만 View 를 위로 쌓는 개념입니다. 아마도 x, y, z 축에서 z 를 뜻하는 의미가 아닌가 싶어요. 이미지가 위로 쌓이게 되면 상태를 확인할 수 없으니까 이번에는 아래쪽에 오는 이미지를 크게 만들어 놓고 해볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    ZStack {
        Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
            .resizable()
            .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
        Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
    }
}
</code></pre></div><p>코드에서 먼저 구현된 Image 가 Preview 에서는 아래쪽에 위치하는 것을 확인할 수가 있네요. 그냥 순서대로 하나씩 올려놓는다고 생각하면 헷갈릴 것도 없고 당연한 개념이기는 합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdqKJjL%2FbtqGbbm9aVd%2FHCImD8AdE4herQi2glw6Lk%2Fimg.png" alt="ZStack 결과"></p>
<hr>
<h2 id="spacer">Spacer</h2>
<p>이렇게 SwiftUI 에 존재하는 3가지 Stack 을 모두 알아보았고 이제 마지막으로 Spacer 에 대해서 알아보도록 할게요.</p>
<p>Spacer 는 이름에서부터 알 수 있듯 어떤 빈 공간을 만들어줍니다. 이 빈 공간은 다른 Object 의 크기에 Priority 를 두고 그 크기가 변하지 않는 선에서 본인의 크기를 최대한으로 늘리고자하는 성질을 갖고 있습니다. 코드를 조금 바꿔서 Spacer 를 구현해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">VStack {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        .resizable()
        .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
    Spacer()
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>각 이미지가 완전히 멀찌감치 떨어져서 배치되었네요. 이미지의 크기는 유지되었고 그 사이 공간에 Spacer 가 본인의 크기를 최대한으로 키우고 들어왔습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FuNOCQ%2FbtqF9mo8GA3%2FdgYQtkMQ95pK5kLgw2Lf3k%2Fimg.png" alt="Spacer 결과"></p>
<p>그렇다면 Spacer 를 두 이미지보다 위쪽에 배치하면 어떻게 될까요? Spacer 의 위치를 코드의 최상위에 배치해보겠습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">VStack {
    Spacer()
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        .resizable()
        .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>이미지들이 아래로 몰려버렸네요. 하지만 역시 이미지의 크기는 유지시킨채 Spacer 가 늘어날 수 있는 최대한의 크기만큼 늘어난 것을 확인할 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc3y4y3%2FbtqGchmDjg3%2FAJIXTQdRGgJqPEWx750dTk%2Fimg.png" alt="Spacer 결과"></p>
<p>Spacer 는 이렇게 본인을 빈 공간에 맞게 최대한 늘어나는 성질을 갖고 있습니다. 아직은 어떻게 활용할 수 있을지 감이 오지 않지만 그 활용도가 무궁무진할 것 같다는 생각이 따~악 드네요! Stacks 와 Spacer 를 완벽히 이해하고 사용한다면 거의 웬만한 모든 뷰들은 손쉽게 만들어 낼 수 있을 것 같습니다!</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics: Text 와 Image 생성하기</title>
            <link>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-text-%EC%99%80-image-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</link>
            <pubDate>Fri, 31 Jul 2020 10:38:35 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200731-swiftui-basics-text-%EC%99%80-image-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 이번 포스팅에서는 Text, Image, Stack, Button, List 를 SwiftUI 환경에서 생성하는 법을 간단하게 알아보도록 하겠습니다. SwiftUI 의 코드가 얼마나 간결해졌냐면 저 instance 들을 생성하기 위해 우리가 알아야하는 단어는 정말 저게 끝이에요. 저 단어들과 괄호를 조합하여 간단하게 instance 를 생성할 수 있습니다. 레이아웃도 자동으로 잡아주고요!
 Text 텍스트를 생성하는 법은 Xcode 를 실행하자마자 바로 알 수 있습니다. 기본적으로 &amp;ldquo;Hello World&amp;rdquo; 가 써져있으니까요.
그럼 텍스트를 표시하기 위해 필요한 과정을 UIKit 과 한번 비교해볼까요?</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>이번 포스팅에서는 Text, Image, Stack, Button, List 를 SwiftUI 환경에서 생성하는 법을 간단하게 알아보도록 하겠습니다. SwiftUI 의 코드가 얼마나 간결해졌냐면 저 instance 들을 생성하기 위해 우리가 알아야하는 단어는 정말 저게 끝이에요. 저 단어들과 괄호를 조합하여 간단하게 instance 를 생성할 수 있습니다. 레이아웃도 자동으로 잡아주고요!</p>
<hr>
<h2 id="text">Text</h2>
<p>텍스트를 생성하는 법은 Xcode 를 실행하자마자 바로 알 수 있습니다. 기본적으로 &ldquo;Hello World&rdquo; 가 써져있으니까요.</p>
<p>그럼 텍스트를 표시하기 위해 필요한 과정을 UIKit 과 한번 비교해볼까요? UIKit 에서는 UILabel 을 생성하고 생성된 instance 에 원하는 텍스트를 붙이고 View 에 올린 다음 레이아웃까지 따로 잡아줘야 하잖아요? 그런데 이 모든 과정이 SwiftUI 에서는 Text(&ldquo;Hello World&rdquo;) 한 문장으로 끝납니다. 🙀</p>
<p>그럼 이제 조금 더 깊게 들어가볼게요. 다음 코드를 같이 살펴봅시다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">SwiftUI</span>

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView</span>: View {
    <span style="color:#66d9ef">var</span> body: some View {
        Text(<span style="color:#e6db74">&#34;Netflix&#34;</span>)
            .font(.custom(<span style="color:#e6db74">&#34;AppleGothic-bold&#34;</span>, size: <span style="color:#ae81ff">50</span>))
            .foregroundColor(.red)
            .kerning(<span style="color:#ae81ff">5</span>)
    }
}

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView_Previews</span>: PreviewProvider {
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: some View {
        ContentView().preferredColorScheme(.dark)
    }
}
</code></pre></div><p>Text 로 화면에 Netflix 가 표시되도록 구현했고 추가로 폰트 종류와 색상, 자간 크기도 조절을 했습니다. UIKit 에서는 이런 세부 조절과정을 method 를 사용해 진행했다면, SwiftUI 에서는 modifier 를 사용해 조절한다고 표현합니다. 내부적으로 구현되는 방법이 달라지고 적용 순서가 더 중요해졌지만 결과적으로 코드 내에서 맡는 역할은 method 와 modifier 가 비슷합니다. 일단은 거의 같다고 생각하면 될 것 같아요</p>
<p>Preview 에서 텍스트는 좌측 이미지와 같이 표시됩니다. 이쯤되면 웬만한 개발환경에서 처음에 Hello Wolrd Print 찍고 Console 에서 입력된 내용 확인하는 것과 비슷한 난이도가 아닐까 싶어요. 이보다 더 쉬워질 수가 있을까요?</p>
<p>마지막으로 PreviewProvider 부분에서 .preferredColorScheme(.dark) 를 지정해놓고 실제 넷플릭스 화면처럼 배경을 어둡게 만들어줬어요. 다만 이건 실제 배경이 검은색으로 변한게 아니라 단순히 다크모드가 적용된 것이니까 light 모드에서도 검은 화면을 만드려면 다른 방법을 써야합니다. 이건 나중에.</p>
<!-- raw HTML omitted -->
<hr>
<h2 id="image">Image</h2>
<p>이미지를 넣는 방법도 정말 간단합니다. 먼저 준비된 이미지를 Preview Assets.xcassets 에 드래그 해서 붙여 넣습니다. 저는 이미지의 크기가 큰 편이라 3x 에 넣었어요. 작은 이미지를 준비했다면 1x 에 넣어주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqsSK3%2FbtqF9lwXVit%2F4YK31FBZbDtOgDPWyQdK41%2Fimg.png" alt="Preview Assets.xcassets 화면"></p>
<p>그러고보니 위 폴더도 UIKit 에 없던거에요. 이곳은 개발 중에만 사용하게되는 이미지를 넣어두는데 사용된다고 하네요. 기존부터 사용해 익숙한 Assets.xcassets 폴더에 넣어도 전혀 문제 없습니다.</p>
<p>아래 코드를 입력하면 이미지가 Preview 에 이미지가 생성됩니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
}
</code></pre></div><p>이미지를 넣는 것도 단 한줄로 끝났어요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdEvKF9%2FbtqF9CSJQiI%2FDER7goFo44jNiSu8JkOUO0%2Fimg.png" alt="Image 삽입 결과"></p>
<p>다만 Image 의 Attributes 를 조절해야할 때 반드시 알아야하는 부분이 있어요. 이미지에 frame 을 늘리고 색상을 넣어볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">var</span> body: some View {
    Image(<span style="color:#e6db74">&#34;SwiftUI&#34;</span>)
        .frame(width: <span style="color:#ae81ff">200</span>, height: <span style="color:#ae81ff">200</span>)
        .background(Color.green)
}
</code></pre></div><p>결과를 봅시다. 이미지의 크기는 그대로고 정말로 frame 그 자체만 커졌어요. 보통 우리가 frame 을 늘린다는 것은 이렇게 사용하겠다는 의미가 아니잖아요? 그럼 이미지를 실제로 크게 만들려면 어떻게 해야할까요?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4sbVi%2FbtqF8uH38vm%2FXojxvsJQHk2WfcauvdrlL0%2Fimg.png" alt="Result Image"></p>
<p>간단합니다. .resizable() modifier 한줄만 추가해주면 돼요! 단 순서가 중요합니다. frame 을 먼저 설정해버리면 resizable 을 적용할 수가 없거든요. 왜 그런지 이유를 한번 알아볼까요?</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fmc78M%2FbtqF7tbKqxW%2F2a6b92IgM41SluCCz0urok%2Fimg.png" alt=".frame 의 Description"></p>
<p>frame 의 Description 을 살펴보면 반환 타입으로 View 를 돌려준다는 것을 알 수 있습니다. 하지만 우리가 조절하려는 것은 이미지의 크기지 frame 이 아니잖아요? 애초에 View 은 resizable modifier 가 지원되지 않기 때문에 뒤에 넣으면 에러가 발생하기도 하고요~ 아무튼 이러한 이유로 .resizable 이 먼저 입력되어야 합니다. 이제 결과를 보면!!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDAWwz%2FbtqGbN0murC%2FhynH4bfzsO8oaAXkAk8gF0%2Fimg.png" alt="Result Image"></p>
<p>정상적으로 이미지 크기가 수정되었습니다!! 어렵지 않죠??</p>
]]></content>
        </item>
        
        <item>
            <title>SwiftUI Basics: 프로젝트 생성 및 기본제공 코드 분석</title>
            <link>https://kasroid.github.io/posts/ios/20200730-swiftui-basics-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EA%B8%B0%EB%B3%B8%EC%A0%9C%EA%B3%B5-%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D/</link>
            <pubDate>Thu, 30 Jul 2020 23:56:35 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/ios/20200730-swiftui-basics-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EA%B8%B0%EB%B3%B8%EC%A0%9C%EA%B3%B5-%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D/</guid>
            <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
 SwiftUI 에서 사용자가 확인할 화면을 생성하는 것은 UIKit 과 다르게 확연히 간단해졌습니다.
첫 눈에 바로 들어오는 특징으로는 인스턴스를 생성 시에 더 이상 UI 접두사를 붙이지 않아도 된다는 것이네요. 그리고 내부적으로 바뀐 큰 차이점은 UIKit 의 인스턴스들은 대부분 class 형태로 구성되어있던 것과 다르게 SwiftUI 의 인스턴스들은 대부분 struct 형태로 구현되어있습니다.
그럼 프로젝트를 생성하고 달라진 점들을 직접 살펴보는 것이 좋겠어요. 프로젝트 생성 시 User Interface 를 SwiftUI 로 설정하고 시작하게 되면 다음과 같은 화면이 보입니다.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.</p>
</blockquote>
<p>SwiftUI 에서 사용자가 확인할 화면을 생성하는 것은 UIKit 과 다르게 확연히 간단해졌습니다.</p>
<p>첫 눈에 바로 들어오는 특징으로는 인스턴스를 생성 시에 더 이상 UI 접두사를 붙이지 않아도 된다는 것이네요. 그리고 내부적으로 바뀐 큰 차이점은 UIKit 의 인스턴스들은 대부분 class 형태로 구성되어있던 것과 다르게 SwiftUI 의 인스턴스들은 대부분 struct 형태로 구현되어있습니다.</p>
<p>그럼 프로젝트를 생성하고 달라진 점들을 직접 살펴보는 것이 좋겠어요. 프로젝트 생성 시 User Interface 를 SwiftUI 로 설정하고 시작하게 되면 다음과 같은 화면이 보입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcCRN8A%2FbtqGbOrehS5%2FOujyzIXf0LLRbDmAYyZWV1%2Fimg.png" alt="프로젝트를 생성하면 가장 처음 마주치는 화면"></p>
<p>우측 상단에 위치한 Resume 버튼을 누르거나 Command + Option + P 를 누르면 SwiftUI 의 핵심기능 중 하나인 Preview 를 활성화 시킬 수 있습니다. 활성화가 정상적으로 되었다면 아이폰 화면 위에 &ldquo;Hello World&rdquo; 가 출력된 것을 볼 수 있습니다. 놀랍지 않나요?</p>
<p>기존 Storyboard 처럼 단순히 Layout 을 생성 및 확인하는 것뿐만 아니라 실시간으로 코드와 반응하며 UI 가 변화합니다. 다음 포스트에서 함께 보겠지만 심지어 버튼을 눌러 Print 까지 출력이 가능합니다. <del>Wow</del></p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTBlYa%2FbtqGbaVQMPl%2FBJogbKg9zhKhb3GktLZZBk%2Fimg.png" alt="Preview 가 활성화 된 모습"></p>
<hr>
<h2 id="view">View</h2>
<p>그럼 이제 코드를 한번 살펴볼게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">SwiftUI</span>

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView</span>: View {
    <span style="color:#66d9ef">var</span> body: some View {
        Text(<span style="color:#e6db74">&#34;Hello, World!&#34;</span>)
    }
}

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView_Previews</span>: PreviewProvider {
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: some View {
        ContentView()
    }
}
</code></pre></div><p>UIKit 과 달라도 너무 다르네요. 하지만 저는 위에서 본 Preview 의 성능에 감동을 받은 상태이니 새로운 것을 배울 마음의 준비가 되었습니다. 첫 줄을 보면 ContentView 는 View 를 상속받고 있습니다. 왠지 UIView 와 익숙할 것 같지만 혹시 모르니까 무엇인지 한번 알아보도록 하죠.
<img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FehkB31%2FbtqF7ug8I99%2FeQcsTKc0MQ0dnOKNgvjrpk%2Fimg.png" alt="Apple 공식 문서의 View"></p>
<p>불과 3개월 전 처음 iOS 개발을 배우기 시작했을 때는 이 문서 보는게 정말 싫었습니다. 봐도 뭐가 뭔지 모르겠고 그냥 다른 블로그 찾아보는게 더 빠르고 쉬웠었거든요. 물론 지금도 이 문서 읽는 것만으로는 사용법을 완전히 익히기에는 부족하지만 그래도 모르는 것이 나타나면 일단 무조건 공식문서부터 찾아보는 습관을 들이고 있습니다. 계속 익숙해지려고 노력하니 조금씩 문서의 구성이나 읽는 방법을 알아가는 것 같아요. 좋은 iOS 개발자가 되려면 그 무엇보다 이 화면과 친해져야 할 것 같아요.</p>
<p>아무튼!! 충격적인게 View 가 Class 도 아니고 Struct 도 아닌 Protocol 이었어요. 아니 어떻게 Protocol 을 저런식으로 사용하지?
근데 또 곰곰히 생각해보면 ContentView 가 Struct 잖아요? 그럼 상속을 받지 못하는게 당연하니 Protocol 일 수 밖에 없었네요. UIKit 의 사용법에만 익숙한 상태라 생소하지만 아무튼 View 는 Protocol 이에요.</p>
<p>Protocol 을 채택했다는건 무언가 필수로 구현해야하는게 있을 수도 있다는 소리잖아요? 그게 바로 저 body 부분입니다. body 부분은 computed property 의 형태로 되어있고 some View 타입을 return 받아야 한다고 알려주고 있어요. 지금 당장 some View 가 무엇인지 전부 파헤치기는 어려우니 뭐가 되었든 View 의 종류들이면 다 괜찮아라고 이해하고 넘어갈게요.</p>
<p>body 의 return 값이 View 의 종류라면 괜찮다고 했는데 Text(&ldquo;Hello World&rdquo;) 부분이 오류가 나지않고 정상적으로 Preview 에 표시되었으니까 Text 도 View 의 일종이라는 것입니다. 확실하지 않으니까 이번에도 개발자 문서를 한번 보고 넘어가볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbT0MOt%2FbtqF7KqxqVX%2FkqiXm3pfzK8sORVijMBAk0%2Fimg.png" alt="Apple 공식 문서의 Text"></p>
<p>좌측 상단을 잘 보시면 Views and Controls 라고 적혀있죠? 즉 Text 는 View 나 Control 중 하나라는 뜻입니다. 그리고 설명을 보면 &ldquo;A view that displays one or more lines of read-only text&rdquo; 라고 명시하고 있습니다. 읽기 전용으로 쓸 수 있는 텍스트를 표시하는 View 라고 하네요. 상속을 받지도 Protocol 을 채택한 것도 아닌 것이 어떻게 View 로 구분될 수 있는건지는 잘 모르겠지만 공식 문서에서 View 라고 하니 일단 그렇게 알고 넘어가도록 합시다.</p>
<hr>
<h2 id="previewprovider">PreviewProvider</h2>
<p>이제 두번째 문단을 살펴보도록 할게요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ContentView_Previews</span>: PreviewProvider {
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: some View {
        ContentView()
    }
}
</code></pre></div><p>또 생소한 것들 투성입니다. 뭔지 모르겠으니까 제일 먼저 등장하는 PreviewProvider 를 찾아봅시다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdGRdYl%2FbtqF9lQ679z%2F4YQ8zIkOphSo4JBYpOVu9K%2Fimg.png" alt="Apple 공식 문서의 PreviewProvider">
이번에도 Protocol 입니다. 어느새 조금 당연해졌죠??</p>
<p>Xcode 에서 previews 를 생성하는 타입이라고 하네요. 정확히는 모르겠지만 우측의 Preview 에 관여하는 코드인 것은 확실합니다. 하지만 이것만으로는 조금 부족한 것 같으니까 PreviewProvider 가 어떤 방식으로 만들어진건지 내부 코드를 봐야할 것 같아요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Swift" data-lang="Swift">@available(iOS <span style="color:#ae81ff">13.0</span>, OSX <span style="color:#ae81ff">10.15</span>, tvOS <span style="color:#ae81ff">13.0</span>, watchOS <span style="color:#ae81ff">6.0</span>, <span style="color:#f92672">*</span>)
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">protocol</span> <span style="color:#a6e22e">PreviewProvider</span> : _PreviewProvider {

    <span style="color:#75715e">/// The type of the previews variable.</span>
    associatedtype Previews : View

    <span style="color:#75715e">/// Generates a collection of previews.</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">/// Example:</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">///     struct MyPreviews : PreviewProvider {</span>
    <span style="color:#75715e">///         static var previews: some View {</span>
    <span style="color:#75715e">///             return Group {</span>
    <span style="color:#75715e">///                 GreetingView(&#34;Hello&#34;),</span>
    <span style="color:#75715e">///                 GreetingView(&#34;Guten Tag&#34;),</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">///                 ForEach(otherGreetings, id: \.self) {</span>
    <span style="color:#75715e">///                     GreetingView($0)</span>
    <span style="color:#75715e">///                 }</span>
    <span style="color:#75715e">///             }</span>
    <span style="color:#75715e">///             .previewDevice(&#34;iPhone X&#34;)</span>
    <span style="color:#75715e">///         }</span>
    <span style="color:#75715e">///     }</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> previews: <span style="color:#66d9ef">Self</span>.Previews { <span style="color:#66d9ef">get</span> }

    <span style="color:#75715e">/// Returns which platform to run the provider on.</span>
    <span style="color:#75715e">///</span>
    <span style="color:#75715e">/// When `nil`, Xcode infers the platform based on the file the</span>
    <span style="color:#75715e">/// `PreviewProvider` is defined in. This should only be provided when the</span>
    <span style="color:#75715e">/// file is in targets that support multiple platforms.</span>
    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">var</span> platform: PreviewPlatform? { <span style="color:#66d9ef">get</span> }
}
</code></pre></div><p>Property 로 previews 와 platform 을 갖고 있어요. 오늘은 충분히 많은 새로운 내용을 배웠으니 platform 은 다음에 알아보는 것으로 하고 이번에는 previews 만 살펴보도록 할게요. 사용 예시가 나와있네요.</p>
<p>Group 으로 View 들을 묶어 여러개를 표시할 수도 있고 .previewDevice modifier 를 사용해 표시되는 기기를 바꿔줄 수 도 있나봅니다. 이곳에 나와있지는 않지만 여러개의 previews 를 만들어 놓고 하나는 light 다른 하나는 dark 모드로 UI 를 확인해가며 작업하는 것도 가능합니다.</p>
<p>이렇게 SwiftUI 를 시작하는데 있어 가장 기초적인 부분들을 훌어보았는데요. 다음 포스트에서는 SwiftUI 에 여러가지 View 를 추가하는 방법을 알아보도록 하겠습니다.</p>
]]></content>
        </item>
        
    </channel>
</rss>
