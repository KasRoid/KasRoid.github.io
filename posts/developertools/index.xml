<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Developer Tools on You are in part of Doyoung&#39;s brain right now</title>
        <link>https://kasroid.github.io/posts/developertools/</link>
        <description>Recent content in Developer Tools on You are in part of Doyoung&#39;s brain right now</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 25 Aug 2020 01:27:47 +0900</lastBuildDate>
        <atom:link href="https://kasroid.github.io/posts/developertools/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Vim: Normal Mode 에서 자동으로 영문전환하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200904-vim-switching-language-inputs/</link>
            <pubDate>Fri, 04 Sep 2020 11:32:51 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200904-vim-switching-language-inputs/</guid>
            <description>Intro 주력 Text Editor 로 Vim 을 사용하면서 매일 마주치는 문제점 하나가 바로 Insert Mode 에서 한글을 작성하다 Normal Mode 로 돌아오면 다시 영문으로 전환해주지 않는 이상 어떤 커맨드도 먹히지 않는다는 것 이었습니다. 제 경우에는 블로그 글을 Vim 에서 작성하고 있고, 글을 쓸 때 한글의 비중이 압도적으로 높다보니 Insert Mode 에서 Normal Mode 로 돌아올 때마다 항상 언어상태를 확인해줘야하고 이것은 Work Flow 에 치명적인 영향을 줘서 생산성을 떨어뜨리는 결과를 낳게되더라고요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>주력 Text Editor 로 <strong>Vim</strong> 을 사용하면서 매일 마주치는 문제점 하나가 바로 <strong>Insert Mode</strong> 에서 한글을 작성하다 <strong>Normal Mode</strong> 로 돌아오면 다시 영문으로 전환해주지 않는 이상 어떤 커맨드도 먹히지 않는다는 것 이었습니다. 제 경우에는 블로그 글을 <strong>Vim</strong> 에서 작성하고 있고, 글을 쓸 때 한글의 비중이 압도적으로 높다보니 <strong>Insert Mode</strong> 에서 <strong>Normal Mode</strong> 로 돌아올 때마다 항상 언어상태를 확인해줘야하고 이것은 Work Flow 에 치명적인 영향을 줘서 생산성을 떨어뜨리는 결과를 낳게되더라고요.</p>
<p>당연히 <strong>Vim</strong> 에서 한글을 작성하시는 많은 분들이 비슷한 고충을 겪고 있고, 이에 대한 해결법이 많이 나와있는 상황이기는 합니다. 그 중 대표적인 해결법이 <strong><a href="https://www.hammerspoon.org">Hammerspoon</a></strong> 이라는 Automation 프로그램을 이용하는 방법인데요. 이것에 관한 글은 다른 여러 블로그에 자세히 나와있기도 하고 저는 제가 이미 사용하고 있는 <strong>Keyboard Maestro</strong> 라는 Automation 프로그램이 있기 때문에 혹시 Hammerspoon 으로 해결하고 싶은 분들은 다른 블로그 글을 찾아보시기 바랍니다.</p>
<p>이번 포스팅에서는 <strong><a href="https://www.keyboardmaestro.com">Keyboard Maestro</a></strong> 로 해결해보도록 하겠습니다. 다만 조금 가격이 나가는 <strong>유료 프로그램</strong>이므로 글을 읽기 전 구매의사를 반드시 결정하시기 바랍니다. 정말 좋은 프로그램이니까 저는 추천하겠습니다 ㅎ</p>
<hr>
<h2 id="keyboard-maestro-소개">Keyboard Maestro 소개</h2>
<p><strong><a href="https://www.keyboardmaestro.com">Keyboard Maestro</a></strong> 는 일종의 Automation 프로그램 입니다. 상당히 잘 만들어진 프로그램으로 여러가지 귀찮은 일들을 자동화할 수 있지만 여느 Automation 프로그램들만큼 난이도가 조금 있어 저는 기본적인 매크로들만 사용하고 있습니다. 그래도 돈 값은 충분히 하고 있는 것 같아요 ㅎㅎ 오늘 Terminal 에서 작동하는 자동 영문전환 스크립트를 작성하고나면 조금 더 돈값을 하게되겠군요 ㅋㅋㅋ 그럼 바로 세팅해볼게요.</p>
<hr>
<h2 id="esc-to-영문전환">ESC to 영문전환</h2>
<p><strong>Keyboard Maestro</strong> 는 이렇게 생겼습니다. <code>+</code> 버튼을 눌러 폴더를 하나 추가하고 Terminal 에서는 <code>ESC</code> 키가 영문전환을 함께 수행하도록 세팅해볼게요. 이런 방식으로 세팅을 하면 특정 프로그램에서만 Automation 을 작동하게 할 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92194914-b5c83480-eea6-11ea-8939-3a854203deb0.png" alt="Keyboard Maestro 폴더 세팅"></p>
<p>다음에는 <code>+</code> 버튼을 눌러 새로운 Macro 를 추가합니다. 저는 매크로 이름을 <code>ESC to English</code> 라고 지었어요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92194918-b6f96180-eea6-11ea-8d04-d3f9525cdac9.png" alt="Macro 추가"></p>
<p>Macro 가 Trigger 될 조건을 <strong>Hot Key Trigger</strong> 로 설정하고 <code>ESC</code> 를 Trigger Key 로 지정합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92194923-b8c32500-eea6-11ea-8d31-2475317e4bb9.png" alt="Trigger Key 추가"></p>
<p>이제 <strong>Action</strong> 을 만들어주면 되는데요. <strong>Set Keyboard Layout</strong> 을 찾아 추가합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92195344-b0b7b500-eea7-11ea-96c4-a316d168b814.png" alt="Keyboard Layout Action 추가"></p>
<p>다 그런 것인지는 모르겠지만 저는 기본 값이 한글로 변경되는 것으로 되어있어 영문으로 설정되도록 바꾸었고, 추가로 <strong>Type a Key Stroke</strong> 를 하나 더 추가했습니다. 추가 Key Stroke 를 설정해주지 않으면 <code>ESC</code> 키가 영문전환만 하게되고 본연의 역할을 잊게됩니다. 그러니까 꼭 추가해야해요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92195488-09874d80-eea8-11ea-894b-b9a23e460352.png" alt="영문설정 및 ESC 추가"></p>
<p>이렇게 설정이 모두 끝났습니다. Keyboard Maestro 를 사용하니 정말 간단하게 해결되었어요 ㅎㅎㅎ <del>Keyboard Maestro 두번 쓰세요</del></p>
<p>이제 당연히 잘되겠지하고 자신만만하게 <strong>Vim</strong> 에서 테스트를 해보았으나 전혀 작동을 하지 않았습니다. 작동을 하지않을 이유가 없는데 왜 이럴까하면서 10분 정도를 헤맸을까 프로그램 설정이 잘못되었다는 것을 알았는데 제가 사용하는 프로그램인 <strong>iTerm2</strong> 가 아닌 <strong>Terminal</strong> 로 설정해 놓았더라고요. <strong>iTerm2</strong> 로 변경하니 예상했던대로 잘 작동되었습니다. 여러분은 이런 실수하지 마세요~</p>
]]></content>
        </item>
        
        <item>
            <title>Vim Plugin: Vim Airline</title>
            <link>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-vim-airline/</link>
            <pubDate>Wed, 02 Sep 2020 22:07:46 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-vim-airline/</guid>
            <description>또 새로운 Vim Plugin 을 소개해드리려고 왔어요 ㅎㅎㅎ 요즘 Vim 의 매력에 푹 빠져서 열심히 연습 중이고 기본적인 사용법들도 점점 손에 익어가니까 키보드를 무릎 위에 올려놓고 글을 쓰는 맛이 있습니다. 그래서 오늘 소개할 Plugin 은 Vim-Airline 이라는 플러그인이에요. Vim 아래쪽에 Status Bar 를 좀 더 보기 좋게 만들어주고 윗쪽에 Tab Bar 와 비슷한 Buffer 라는 것을 만들어서 우리가 이번 작업에서 열어본 파일을 기억하여 파일 간의 이동을 쉽게할 수 있도록 도와줍니다. 설치해서 손해볼게 없는 Plugin 인 것 같으니까 바로 설치해보도록 할게요.</description>
            <content type="html"><![CDATA[<p>또 새로운 <strong>Vim Plugin</strong> 을 소개해드리려고 왔어요 ㅎㅎㅎ 요즘 <strong>Vim</strong> 의 매력에 푹 빠져서 열심히 연습 중이고 기본적인 사용법들도 점점 손에 익어가니까 키보드를 무릎 위에 올려놓고 글을 쓰는 맛이 있습니다. 그래서 오늘 소개할 Plugin 은 <strong>Vim-Airline</strong> 이라는 플러그인이에요. Vim 아래쪽에 <strong>Status Bar</strong> 를 좀 더 보기 좋게 만들어주고 윗쪽에 Tab Bar 와 비슷한 <strong>Buffer</strong> 라는 것을 만들어서 우리가 이번 작업에서 열어본 파일을 기억하여 파일 간의 이동을 쉽게할 수 있도록 도와줍니다. 설치해서 손해볼게 없는 Plugin 인 것 같으니까 바로 설치해보도록 할게요.</p>
<p>![<a href="https://raw.githubusercontent.com/wiki/vim-airline/vim-airline/screenshots/demo.gif">Vim-Airline</a></p>
<hr>
<h3 id="vim-airline-설치하기">Vim-Airline 설치하기</h3>
<p>먼저 <a href="https://github.com/vim-airline/vim-airline">Vim-Airline Github</a> 에 들어가 README 파일을 읽어보고 <strong>Vundle</strong> 로 Plugin 을 설치하도록 하겠습니다. Vundle 을 사용한 설치법은 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim: Vundle 및 Markdown Plugin 설치하기</a> 포스팅을 참고해주세요.</p>
<p>첫번째 Plugin 은 Airline 그 자체를 설치하는 것이고, 두번째 Plugin 은 이것의 테마들을 설치하는거에요. 나중에 테마가 바꾸고 싶을 수 있으니 오늘 둘 다 설치를 해놓긴 하겠지만 테마를 바꾸는 방법은 다음에 알아보도록 하겠습니다.</p>
<pre><code class="language-console" data-lang="console">Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
</code></pre><p>설치가 끝났다면 <code>.vimrc</code> 파일 아래쪽에 다음 코드도 읿력해주세요. 기본적으로 위쪽 Tab Bar 기능은 비활성화 상태이기 때문에 이것을 활성화 해주는 코드입니다. 혹시 나는 아래쪽 Status Bar 만 사용하는게 더 깔끔하고 좋다하면 이 코드는 그냥 스킵해주세요.</p>
<pre><code class="language-console" data-lang="console">let g:airline#extensions#tabline#enabled = 1
</code></pre><p>이제 <strong>Vim</strong> 을 실행해서 어떻게 바뀌었을지 확인해보도록 하겠습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91990383-9f1dc280-ed6c-11ea-9c4e-fbc90578a5ae.png" alt="Vim 실행화면"></p>
<p>오!! 뭔가 확실히 화면이 더 풍성해졌어요. Vim 의 현재 모드와 Git, 파일명 등등 많은 정보를 아랫쪽 Status Bar 에서 확인할 수가 있네요. 그리고 윗쪽에도 Tab Bar 가 추가된 모습을 볼 수 있죠? 이제 이전에 우리가 함께 설치했던 <strong>NERDTree</strong> 를 사용해 새로운 파일을 하나 열어보겠습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91990390-a0e78600-ed6c-11ea-8920-099a40289b65.png" alt="Airline TabBar"></p>
<p>이렇게 어떤 파일을 열고나면 Tab Bar 에 그 기록이 남게되고 <code>:</code> 를 눌러 커맨드 모드에 진입해서 <code>bn</code> 과 <code>bp</code> 커맨드를 사용해 파일간의 이동이 가능합니다. 이제 정말 외부적으로는 <strong>VSCode</strong> 에서 제가 자주 사용하던 기능들이 <strong>Vim</strong> 으로 들어왔습니다. 이렇게 가볍운 에디터가 Plugin 을 통해서 이 정도까지 강력한 기능들을 탑재할 수 있다는 것도 정말 놀랍네요.</p>
<p>그럼 다음에 또 봴게요!!</p>
]]></content>
        </item>
        
        <item>
            <title>Vim Plugin: NERDTree</title>
            <link>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-nerdtree/</link>
            <pubDate>Wed, 02 Sep 2020 10:16:39 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-nerdtree/</guid>
            <description>Vim 을 쓰다보니 또 VSCode 보다 불편한 점을 발견할 수 있었는데요. 바로 VSCode 에서 애용하던 File Navigattion System 이 없다는 것이었습니다. 바로 이미지 좌측에 보이는 저것이에요.
자주 여러 파일을 이동해야하는 경우에 Navigation System 이 없다는 이유만으로 자꾸 다시 VSCode 로 손이 가게 되더라고요. 그래서 Vim 에서는 해결방법이 없을지 찾아보다가 알게된 것이 바로 NERDTree 입니다. 바로 Vim 만의 파일탐색기 같은 것이에요. 제가 메인 텍스트 에디터로 Vim 을 사용하려는 이유 중 한가지가 작업을 할 때 Terminal 에서 키보드만으로 거의 모든 작업을 진행할 수 있다는 것인데요.</description>
            <content type="html"><![CDATA[<p><strong>Vim</strong> 을 쓰다보니 또 <strong>VSCode</strong> 보다 불편한 점을 발견할 수 있었는데요. 바로 <strong>VSCode</strong> 에서 애용하던 File Navigattion System 이 없다는 것이었습니다. 바로 이미지 좌측에 보이는 저것이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91921999-d60dbd00-ed07-11ea-93fd-df3014b279f6.png" alt="VSCode 화면"></p>
<p>자주 여러 파일을 이동해야하는 경우에 Navigation System 이 없다는 이유만으로 자꾸 다시 VSCode 로 손이 가게 되더라고요. 그래서 <strong>Vim</strong> 에서는 해결방법이 없을지 찾아보다가 알게된 것이 바로 <strong>NERDTree</strong> 입니다. 바로 <strong>Vim</strong> 만의 파일탐색기 같은 것이에요. 제가 메인 텍스트 에디터로 <strong>Vim</strong> 을 사용하려는 이유 중 한가지가 작업을 할 때 Terminal 에서 키보드만으로 거의 모든 작업을 진행할 수 있다는 것인데요. VSCode 를 사용하면 또 마우스를 사용해야 하다보면 여러가지 불편한 상황이 만들어졌습니다. <del>진정한 개발자는 마우스가 필요없는 것 아시죠?</del></p>
<p>아무튼 그래서 바로 NERDTree 를 설치하기로 했어요.</p>
<hr>
<h2 id="nerdtree-설치하기">NERDTree 설치하기</h2>
<p><strong>NERDTree</strong> 도 결국 일종의 Vim Plugin 이니까 <strong>Vundle</strong> 을 사용해서 간단하게 설치를 진행해보도록 하겠습니다. Vundle 설치가 익숙하지 않다면 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim: Vundle 및 Markdown Plugin 설치하기</a> 포스팅을 참고해주세요.</p>
<p>먼저 <strong>NERDTree</strong> 설치를 위해서 <a href="https://github.com/preservim/nerdtree">NERDTree Github</a> 에 들어갑니다. 우리는 Vundle 로 설치를 하기로 했으니까 README 에서 Vundle 로 설치하는 방법을 찾아볼게요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'preservim/nerdtree'
</code></pre><p>Vundle 도 계속 쓰다보니 Homebrew 만큼 편하고 좋은 툴인 것 같아요 ㅎㅎ 이렇게 설치도 끝났고 본격적으로 <strong>NERDTree</strong> 에 대해 함께 공부해보도록 할게요.</p>
<hr>
<h2 id="nerdtree-사용법-익히기">NERDTree 사용법 익히기</h2>
<p><strong>NERDTree</strong> 를 사용하기 위해서는 기본적으로 <strong>Vim</strong> 을 실행해야 합니다. <del>Vim Plugin 이니까 당연하지</del> Vim 을 실행했다면 <code>:</code> 을 눌러 커맨드 모드로 진입하고 <code>NERDTree</code> 를 입력해볼게요. 대소문자를 정확히 입력해야 합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91923144-94324600-ed0a-11ea-9886-2a7b86840744.png" alt="NERDTree 실행 모습"></p>
<p>오!! VSCode 에서 봤던 파일탐색기와 거의 비슷한게 생겼어요 ㅎㅎㅎ 파일 탐색은 화살표 키 또는 hjkl 로 가능합니다. 폴더나 파일을 열기 위해서는 <code>o</code> 키를 누르면 되고요. 파일을 열게되면 자동으로 커서가 파일로 옮겨지고 더 이상 <strong>NERDTree</strong> 에서 파일이동을 할 수가 없을텐데요. 이 때는 <code>Control + w + w</code> 를 눌러 창 간의 포커싱 이동이 가능합니다. 다시 돌아와서 <code>q</code> 를 눌러 창을 닫을 수도 있습니다. 이외에도 <code>?</code> 를 눌러 Bookmark 등 더 다양한 사용법을 확인해 볼 수 있습니다.</p>
<p>그리고 파일명을 바꾸거나 선택되어 있는 파일을 Finder 에서 확인하는 등의 다양한 옵션에 <code>m</code> 을 눌러서 접근할 수 있습니다. 이 중 원하는 옵션을 선택하거나 <code>esc</code> 키를 눌러서 종료해 주세요.</p>
<p>이 정도면 VSCode 의 파일탐색기를 어느정도 대체할 수 있을 것 같아요. 그럼 마지막으로 <strong>NERDTree</strong> 사용 시 쓸만한 단축키들을 정리하고 프스팅 마치도록 하겠습니다.</p>
<hr>
<h2 id="유용한-단축키-모음">유용한 단축키 모음</h2>
<h3 id="nerdtree-shortcuts">NERDTree Shortcuts</h3>
<table>
<thead>
<tr>
<th align="left">Title</th>
<th align="center">Shortcuts</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">파일 및 폴더 열기</td>
<td align="center">o</td>
</tr>
<tr>
<td align="left">하위 폴더까지 전부 열기</td>
<td align="center">O</td>
</tr>
<tr>
<td align="left">미리보기 형식으로 열기</td>
<td align="center">p</td>
</tr>
<tr>
<td align="left">새로운 탭에서 파일 열기</td>
<td align="center">t</td>
</tr>
<tr>
<td align="left">가로 Split 으로 파일 열기</td>
<td align="center">i</td>
</tr>
<tr>
<td align="left">세로 Split 으로 파일 열기</td>
<td align="center">s</td>
</tr>
<tr>
<td align="left">메뉴 열기</td>
<td align="center">m</td>
</tr>
<tr>
<td align="left">NERDTree 줌, 줌아웃 하기</td>
<td align="center">A</td>
</tr>
<tr>
<td align="left">NERDTree 종료하기</td>
<td align="center">q</td>
</tr>
</tbody>
</table>
<h3 id="control-windows">Control Windows</h3>
<table>
<thead>
<tr>
<th align="left">Title</th>
<th align="center">Shortcuts</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">창 순환하기</td>
<td align="center">ctrl + w + w</td>
</tr>
<tr>
<td align="left">왼쪽 창으로 이동하기</td>
<td align="center">ctrl + w + h</td>
</tr>
<tr>
<td align="left">오른쪽 창으로 이동하기</td>
<td align="center">ctrl + w + l</td>
</tr>
<tr>
<td align="left">윗쪽 창으로 이동하기</td>
<td align="center">ctrl + w + k</td>
</tr>
<tr>
<td align="left">아랫쪽 창으로 이동하기</td>
<td align="center">ctrl + w + j</td>
</tr>
<tr>
<td align="left">이전 창으로 이동하기</td>
<td align="center">ctrl + w + p</td>
</tr>
<tr>
<td align="left">창 종료하기</td>
<td align="center">ctrl + w + q</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Vim: 여러가지 유용한 설정 적용하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200831-vim-bacis-configurations/</link>
            <pubDate>Mon, 31 Aug 2020 21:45:33 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200831-vim-bacis-configurations/</guid>
            <description>오늘은 Vim 을 사용할 때 기본적으로 설정해두고 사용하면 좋을만한 간단면서도 유용한 설정들에 대해 공부해보도록 하겠습니다.
Vim 의 기본 설정은 macOS 기준 Home Directory 에 위치한 .vimrc 에서 설정할 수가 있습니다. 먼저 이 파일을 확인해보도록 할게요. cd 커맨드로 Home 으로 이동한 뒤에 이 파일이 존재하는지 확인해주세요. 혹시라도 이 파일이 존재하지 않는다면 그냥 만들어 주면 됩니다 ㅎㅎ 저는 처음에 이 파일이 없어서 직접 만들었어요.
이제 기본적으로 추가해 놓으면 좋을만한 설정들을 추가해보록 할게요.</description>
            <content type="html"><![CDATA[<p>오늘은 <strong>Vim</strong> 을 사용할 때 기본적으로 설정해두고 사용하면 좋을만한 간단면서도 유용한 설정들에 대해 공부해보도록 하겠습니다.</p>
<p><strong>Vim</strong> 의 기본 설정은 macOS 기준 Home Directory 에 위치한 <code>.vimrc</code> 에서 설정할 수가 있습니다. 먼저 이 파일을 확인해보도록 할게요. <code>cd</code> 커맨드로 Home 으로 이동한 뒤에 이 파일이 존재하는지 확인해주세요. 혹시라도 이 파일이 존재하지 않는다면 그냥 만들어 주면 됩니다 ㅎㅎ 저는 처음에 이 파일이 없어서 직접 만들었어요.</p>
<p>이제 기본적으로 추가해 놓으면 좋을만한 설정들을 추가해보록 할게요.</p>
<hr>
<h2 id="syntax-설정하기">Syntax 설정하기</h2>
<p>저만 그런지 모르겠지만 제 경우에는 <strong>Vim</strong> 에서 새로운 파일을 열 때마다 <strong>Syntax</strong> 의 기본설정이 <strong>off</strong> 로 되어있습니다. 저는 보통 Syntax 를 활성화 시켜놓고 사용하는 것을 선호해서 매번 <code>:syntax on</code> 커맨드를 통해 활성화 시켜줘야 했는데요. <code>.vimrc</code> 파일에서 설정을 바꿔주면 기본세팅을 Syntax On 으로 변경할 수 있습니다. 바로 입력해볼게요.</p>
<pre><code class="language-console" data-lang="console">syntax on
</code></pre><p>네 이게 전부입니다. 쉽죠? ㅎㅎ  이제 파일을 저장하고 나서부터 새롭게 여는 파일들은 <strong>Syntax</strong> 설정이 활성화된채로 열리게 됩니다.</p>
<hr>
<h2 id="numbering-설정하기">Numbering 설정하기</h2>
<p>보통 우리가 사용하는 IDE 프로그램들은 화면 좌측에 넘버링을 제공해서 우리가 총 몇 줄을 작성했는지 혹은 몇 번째 줄에서 작업하고 있는지 직관적으로 알 수 있게 되어있잖아요? <strong>Vim</strong> 에서도 당연히 지원하는 기능이며 간단하게 설정가능합니다. 그리고 참고로 현재 작성하는 코드들은 Vim 내의 Command mode 에서도 1회성으로 동일하게 사용할 수 있습니다.</p>
<pre><code class="language-console" data-lang="console">set number
</code></pre><p>코드를 입력하고 저장하면 이제 화면 좌측에서 넘버링을 확인할 수 있는데요. 이렇게 사용하는 것도 이전에는 확인할 수 없었던 넘버링을 확인할 수 있다는 점에서 충분히 좋긴하지만 <strong>Vim</strong> 을 사용하다보면 현재 줄을 기준으로 위 아래 특정 줄 수만큼 이동해야할 필요가 있는 경우가 많은데요. 내 커서가 있는 곳을 기준으로 위 아래로 각각 넘버링을 보여주는 기능도 지원합니다. 이렇게 글로는 이해가 조금 어렵지만 아래 스크린샷을 보면 한번에 무슨 뜻인지 알 수 있을거에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91720743-96918480-ebd2-11ea-9e07-b5259365de17.png" alt="Relative Numbering 이 적용된 화면"></p>
<p>어떤가요? <strong>Vim</strong> 을 쓸 때는 정말 유용할 것 같죠? 그럼 바로 설정해주도록 할게요.</p>
<pre><code class="language-console" data-lang="console">set number relativenumber
</code></pre><p>이제 저장하고 새로운 파일을 열어 커서를 움직여보면 좌측에 표시되는 숫자가 이전과는 다르게 유동적으로 변하게 되는 것을 확인할 수 있습니다.</p>
<p>오늘 포스팅은 평소보다 조금 짧은 느낌이지만 앞으로 꾸준히 <strong>Vim</strong> 을 사용하면서 발견하는 유용한 설정을 이곳에 지속적으로 기록하고 업데이트할 계획입니다.</p>
]]></content>
        </item>
        
        <item>
            <title>Vim: ColorScheme 적용 및 직접 색 변경하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200830-vim-appying-colorscheme-changing-backgroudn-colors/</link>
            <pubDate>Sun, 30 Aug 2020 02:36:53 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200830-vim-appying-colorscheme-changing-backgroudn-colors/</guid>
            <description>이번에는 Vim 에서 외부 테마를 다운로드 받아 적용하고 Syntax Highlighting 색상을 좀 더 이쁘게 변경해보도록 하겠습니다. 그래도 Terminal 을 통해 글을 쓰려면 최소한 이정도는 갖춰야 조금 글 쓸 맛이 나잖아요?? ㅋㅋㅋ 그런데 지금 제가 사용하는 Vim 의 상태는&amp;hellip;
이 모양입니다. 못봐줄 정도에요&amp;hellip; 원색을 너무 많이 사용해서 그런건지 오히려 눈에 방해가 되는 그런 느낌도 들고요. 난 이제 그만 여기서 탈출해야겠어
그럼 본격적으로 설치해볼까요~
 테마 고르기 먼저 구글에서 Vim ColorScheme 을 검색해 여러분 스타일에 맞는 테마를 찾아보세요.</description>
            <content type="html"><![CDATA[<p>이번에는 Vim 에서 외부 테마를 다운로드 받아 적용하고 <strong>Syntax Highlighting</strong> 색상을 좀 더 이쁘게 변경해보도록 하겠습니다. 그래도 <strong>Terminal</strong> 을 통해 글을 쓰려면 최소한 이정도는 갖춰야 조금 글 쓸 맛이 나잖아요?? ㅋㅋㅋ 그런데 지금 제가 사용하는 <strong>Vim</strong> 의 상태는&hellip;</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91652991-484b8b00-ead7-11ea-8b82-a9b348495f11.png" alt="Colorcheme 적용 전"></p>
<p>이 모양입니다. 못봐줄 정도에요&hellip; 원색을 너무 많이 사용해서 그런건지 오히려 눈에 방해가 되는 그런 느낌도 들고요. <del>난 이제 그만 여기서 탈출해야겠어</del></p>
<p>그럼 본격적으로 설치해볼까요~</p>
<hr>
<h2 id="테마-고르기">테마 고르기</h2>
<p>먼저 구글에서 Vim ColorScheme 을 검색해 여러분 스타일에 맞는 테마를 찾아보세요. 참고로 저는 <a href="https://github.com/sonph/onehalf">One Half Dark</a> 를 골랐어요. 오리지널 색상과 비교하면 훨씬 보기 편한 색인 것 같아요 ㅎㅎㅎ</p>
<p><img src="https://raw.githubusercontent.com/sonph/onehalf/master/screenshots/vim.png" alt="One Half Dark"></p>
<p>Colorscheme 설치는 <strong>Vundle</strong> 을 통한 <strong>Plugin</strong> 형식으로 설치를 할거에요. 혹시 Vundle 설치부터 진행해야 한다면 이전에 자세히 설명해놓은 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim: Vundle 및 Markdown Plugin 설치하기</a> 포스트를 참고해주세요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'sonph/onehalf', {'rtp': 'vim/'}
</code></pre><p>Plugin 설치를 마쳤으면 <code>.vimrc</code> 파일에 추가적인 설정 코드를 입력합니다. 설치한 Plugin 을 colorscheme 으로 사용하겠다는 코드에요.</p>
<pre><code class="language-console" data-lang="console">colorscheme onehalfdark
let g:airline_theme = 'onehalfdark'
</code></pre><p>혹시 저와 같은 <strong>Colorscheme</strong> 을 설치하고 있다면 <code>onehalfdark</code> 대신 <code>onehalflight</code> 를 입력하는 것 만으로 밝은 테마를 사용할 수도 있습니다.</p>
<p>오~ 적용하고 나니 훨씬 깔끔해지고 눈에도 더 잘들어오는 느낌이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91652992-4aade500-ead7-11ea-98c9-292d31068cd6.png" alt="Colorscheme 적용 후"></p>
<p>이전보다는 훨씬 마음에 들긴하지만 회색으로 표현되는 글자이 배경화면이랑 비슷해서 눈에 잘 안들어오는 것 같아 추가로 배경색을 조금 더 어둡게하고 폰트는 밝게하고 싶어지네요. 당연히 어떻게해야하는지 몰라서 또 이것저것 찾아보며 공부했습니다 ㅎㅎ</p>
<p>따로 이런 내용은 발견하지 못했지만 코드를 작성할 때 Colorscheme 이 먼저 적용되고 이후에 다시 한번 색이 덮어씌워져야하니 저는 <strong>Colorscheme</strong> 보다 <strong>아래쪽</strong>에 코드를 작성했어요.</p>
<p>아래 코드를 <code>.vimrc</code> 파일에 입력해볼게요. <code>Normal</code> 은 기본 배경을 <code>LineNr</code> 은 좌에 넘버링 된 곳의 배경을 바꾼다는 뜻입니다.</p>
<pre><code class="language-console" data-lang="console">highlight Normal ctermfg = white ctermbg = NONE
highligh LineNr ctermbg = NONE
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/91652993-4c77a880-ead7-11ea-8408-7febaaed68b1.png" alt="Custom Color 적용 후"></p>
<p>오!! 만족스러워졌어요. 처음 상태와 비교해보면 정말 다른 프로그램이라고 생각이 들 정도로 드라마틱하게 달라진 느낌에요 ㅎㅎㅎ 이왕 <strong>Vim</strong> 을 자주 사용할거라면 이렇게 사용하는게 조금 더 가독성도 있고 좋잖아요??</p>
<p>그럼 여기까지 읽느라 수고 많으셨고 이쁜 <strong>Colorscheme</strong> 을 즐기면서 더 열심히 공부해보아요~</p>
]]></content>
        </item>
        
        <item>
            <title>Vim: Vundle 및 Markdown Plugin 설치하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/</link>
            <pubDate>Sat, 29 Aug 2020 16:12:11 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/</guid>
            <description>제가 Tistory 로 블로그를 시작했지만 Hugo 로 넘어오게된 이유가 몇 가지 있는데 그 중 가장 큰 비중을 차지하는 두가지가 하나는 Tistory 가 Markdown 을 제대로 지원하지 않고, 코드블럭 처리를 고려하면 글을 Tistory 전용 에디터에서 쓰는 것이 반 강제되는 것이었는데요. Tistory 에디터로 글을 쓰다보면 텍스트에 기본적인 강조 처리하는 것들도 전부 마우스로 처리해야하는데 매번 키보드에서 손이 움직이는게 여간 성가신 것이 아니었거든요. 그래서 포스트를 작성하는 와중에 이 모든걸 Terminal 에서 처리할 수 있으면 어떨까 하는 생각을 종종하게 되었고 결국 Hugo 로 블로그를 관리하는 것으로 결정했습니다.</description>
            <content type="html"><![CDATA[<p>제가 Tistory 로 블로그를 시작했지만 <strong>Hugo</strong> 로 넘어오게된 이유가 몇 가지 있는데 그 중 가장 큰 비중을 차지하는 두가지가 하나는 Tistory 가 <strong>Markdown</strong> 을 제대로 지원하지 않고, <code>코드블럭</code> 처리를 고려하면 글을 Tistory 전용 에디터에서 쓰는 것이 반 강제되는 것이었는데요. Tistory 에디터로 글을 쓰다보면 텍스트에 기본적인 강조 처리하는 것들도 전부 마우스로 처리해야하는데 매번 키보드에서 손이 움직이는게 여간 성가신 것이 아니었거든요. 그래서 포스트를 작성하는 와중에 이 모든걸 Terminal 에서 처리할 수 있으면 어떨까 하는 생각을 종종하게 되었고 결국 <strong>Hugo</strong> 로 블로그를 관리하는 것으로 결정했습니다.</p>
<p>그런데 막상 이전을 하고 포스트를 작성하다보니 또다른 문제를 직면하게 되었는데 Termnial 에서 글을 작성할 때 에디터로 사용했던 <strong>Vim</strong> 은 Markdown Highlighting 을 지원하지 않아 글이 조금만 길어져도 가독성이 많이 떨어졌습니다. 블로그를 운영하면서 동시에 Vim 사용까지 익숙해지고자하는 욕심이 있었는데 <strong>Markdown Highlighting</strong> 미지원과 실시간으로 결과물을 확인할 수 있는 <strong>Preview</strong> 기능이 없다는 단점을 극복하지 못하고 결국 최근 포스트들은 전부 <strong>VSCode</strong> 로 작성하는 상태가 되어버렸죠 ㅎㅎ</p>
<p>물론 <strong>VSCode</strong> 정도면 정말 좋은 에디터라 불만은 없었지만 그래도 Terminal 에서 <strong>Vim</strong> 으로 글을 쓰는게 더 개발자스럽고 간지나잖아요? ㅋㅋㅋㅋ 그래서 오늘은 <strong>Vim</strong> 에 Plugin 을 설치해서 <strong>Markdown Highlighting</strong> 과 <strong>Preview</strong> 를 실시간으로 확인할 수 있도록 공부해보겠습니다.</p>
<hr>
<h2 id="vundle-설치하기">Vundle 설치하기</h2>
<p><strong>Vim</strong> 에 Plugin 을 설치하기 위해서는 Plugin 을 쉽게 설치할 수 있도록 도와주는 <strong>Vundle</strong> 이라는 Tool 이 있습니다. <a href="https://github.com/VundleVim/Vundle.vim">Vundle Github Page</a> 에 접속해 가이드대로 차근차근 설치를 진행해볼게요.</p>
<p>Installation 쪽을 확인해보면 아래 커맨드로 Repository 를 Clone 하라고 되어있네요. 시키는대로 합니다 ㅎㅎ</p>
<pre><code class="language-console" data-lang="console">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/91631739-cbf17300-ea16-11ea-9e52-6cd1aba195e2.png" alt="Repo 를 Clone 한 스크린샷"></p>
<p>이 다음으로는 <code>.vimrc</code> 파일에 설정 정보를 복사해서 넣어주어야 하는데요. 이 파일은 Vim 의 설정을 관리하는 파일이라고 생각하면 됩니다. 보통 이 파일이 macOS 기준으로 Home 디렉토리에 있어야한다고 하는데 왜인지 저는 없었습니다. 그래서 그냥 새롭게 만들어주기로 했어요. <del>설마 꼬이는건 아니겠지??</del></p>
<p><img src="https://user-images.githubusercontent.com/41736472/91631993-b0876780-ea18-11ea-9927-1201d86bf2b6.png" alt=".vimrc 파일 생성"></p>
<p>이렇게 새로운 파일을 생성하고 다음 설정값을 복사해 입력합니다.</p>
<pre><code class="language-console" data-lang="console">set nocompatible              &quot; be iMproved, required
filetype off                  &quot; required

&quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&quot; alternatively, pass a path where Vundle should install plugins
&quot;call vundle#begin('~/some/path/here')

&quot; let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

&quot; The following are examples of different formats supported.
&quot; Keep Plugin commands between vundle#begin/end.
&quot; plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
&quot; plugin from http://vim-scripts.org/vim/scripts.html
&quot; Plugin 'L9'
&quot; Git plugin not hosted on GitHub
&quot; git repos on your local machine (i.e. when working on your own plugin)
Plugin 'file:///home/gmarik/path/to/plugin'
&quot; The sparkup vim script is in a subdirectory of this repo called vim.
&quot; Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
&quot; Install L9 and avoid a Naming conflict if you've already installed a
&quot; different version somewhere else.
&quot; Plugin 'ascenator/L9', {'name': 'newL9'}

&quot; All of your Plugins must be added before the following line
call vundle#end()            &quot; required
filetype plugin indent on    &quot; required
&quot; To ignore plugin indent changes, instead use:
&quot;filetype plugin on
&quot;
&quot; Brief help
&quot; :PluginList       - lists configured plugins
&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
&quot;
&quot; see :h vundle for more details or wiki for FAQ
&quot; Put your non-Plugin stuff after this line
</code></pre><p>꼭 <strong>저장</strong>하고 Vim 을 종료하세요. 그리고 터미널에서 Vim 을 실행합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632179-1a544100-ea1a-11ea-8ba6-c1b337f57bcf.png" alt="Terminal 에서 Vim 실행"></p>
<p>그럼 이제 아래와 같은 화면이 뜰텐데 <code>:</code> 으로 명령모드에 진입하고 <code>PluginInstall</code> 을 입력합니다. Terminal 에서 바로 설치하는 방법으로는 <code>vim +PluginInstall +qall</code> 이렇게 커맨드를 입력하면 된다고 합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632154-ea0ca280-ea19-11ea-92a2-89d1f5e3f7e6.png" alt="Vim 실행화면"></p>
<p>설치 진행 중에는 아래와 같은 화면을 볼 수 있을텐데 설치과정에 시간이 조금 필요하니 잠시 기다려야 하더라고요. 저는 뭔지 모르겠는데 에러가 하나 발생했어요 ㅠㅠ 별거 아니길 바라고 일단 계속 진행해 볼게요.</p>
<blockquote>
<p>Update: Error 메세지에 대해 확인해보니 이 Plugin 은 설치할 필요가 없는 것이라고 하네요. 위 코드블럭에서는 해당 내용을 삭제해두었습니다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/41736472/91632155-ec6efc80-ea19-11ea-8c34-f3c2ff0b2e11.png" alt="Plugin 설치화면"></p>
<hr>
<h2 id="plugin-설치하기">Plugin 설치하기</h2>
<p>Vundle 설치를 마쳤으니 이제 본격적으로 Plugin 설치를 시작해볼게요.</p>
<h3 id="vim-markdown">Vim Markdown</h3>
<p>먼저 <strong>Plastic Boy</strong> 의 <a href="https://github.com/plasticboy/vim-markdown">Vim Markdown</a> 을 설치하겠습니다. Markdown Highlighting Plugin 중에서는 이게 가장 유명한 것 같아요.</p>
<p><code>.vimrc</code> 파일을 열어 아래 코드를 입력하세요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
</code></pre><p>저는 이렇게 입력했습니다. <code>&quot;</code> 를 앞에 붙이면 코멘트 처리되는 것 같아요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632994-d3694a00-ea1f-11ea-8c71-d65dc1a7dc51.png" alt="Plugin 코드 입력"></p>
<p>그리고 조금 전과 같이 <strong>Vim</strong> 을 실행하고 커맨드 모드에서 <code>PluginInstall</code> 을 실행했습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632998-da905800-ea1f-11ea-9562-8aa3acb8d693.png" alt="Plugin 설치과정"></p>
<p>설치가 끝난 것 같으니 바로 <strong>Markdown</strong> 파일을 하나 열어볼게요. 두근두근!! 오호~ 진짜로 못보던 효과가 생겼어요. 제목을 기준으로 글을 접고 라인 수를 표시해주는 것 같네요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91633001-dd8b4880-ea1f-11ea-9856-0809cf8aacce.png" alt="Markdown 파일 실행"></p>
<p>어떻게 펼치는지를 몰라 다시 README 를 읽어보았더니 Folding 을 하나씩 펼치려면 <code>zr</code>, 한번에 전부 펼치려면 <code>zR</code> 커맨드를 사용하라고 하네요. 바로 펼쳐보았습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91633003-e0863900-ea1f-11ea-87d6-38636fae98db.png" alt="Markdown 파일 예시"></p>
<p>엥.. 아무것도 변한게 없어요. 접어주기만하고 왜 색은 안변한건지&hellip; 역시 쉽게 넘어가주지 않네요 ㅠ</p>
<p>README 파일을 계속 읽어보니 <strong>Syntax Extension</strong> 은 기본적으로 비활성화되어 있다고 합니다. 아무래도 이게 HighLighting 을 도와주는 기능같은데 비활성화라니&hellip; 그럼 이걸 설치한 의미가 없잖아&hellip; 바로 활성화 시켜봐야겠어요.</p>
<p>일단 <code>.vimrc</code> 에서 Plugin 에 대한 세부설정을 건드릴 수가 있다고 하네요. 다시 파일을 열어 Folding 비활성화, YAML, TOML, JSON Syntax 를 활성화 시켜보겠습니다. YAML 과 TOML 은 Hugo 에서 사용하는 Front Matter 에 관련된 설정이므로 Hugo 블로그를 사용하지 않는 분들은 빼고 설정해도 됩니다.</p>
<pre><code class="language-console" data-lang="console">&quot; Vim SYNTAX EXTENSIONS
&quot; Disable Folding
let g:vim_markdown_folding_disabled = 1
&quot; YAML Front Matter
let g:vim_markdown_frontmatter = 1
&quot; TOML Front Matter
let g:vim_markdown_toml_frontmatter = 1
&quot; JSON Front Matter
let g:vim_markdown_json_frontmatter = 1
</code></pre><p>파일의 맨 아래쪽에 코드를 입력하고 저장한 뒤에 다시 MD 파일을 열어볼게요. Folding 설정은 적용이 잘 되서 더 이상 글이 접힌채로 시작하는 것이 아니라 설치하기 전처럼 한번에 다 보이는 형태로 나왔는데 그 외에는 어떤 색상도 적용되지가 않았어요. 이번엔 또 뭐가 문제지&hellip;</p>
<p>일단 TOML 및 JSON 은 단순히 활성화만 시킨다고 Syntax 색상이 적용되는 것이 아니라 추가적인 Plugin 이 또 필요하다고 합니다. 그럼 얘네들을 또 설치해볼까요. <del>뭐가 이렇게 많이 필요한거야!!</del></p>
<h4 id="toml-plugin-설치">TOML PlugIn 설치</h4>
<p>TOML Syntax 는 <a href="https://github.com/cespare/vim-toml">vim-toml</a> 을 설치하면 된다고 합니다. README 에서 시키는대로 해봅니다. 먼저 폴더를 하나 만들어주고 Git Clone 을 할게요.</p>
<pre><code class="language-console" data-lang="console">mkdir -p ~/.vim/pack/plugins/start
cd ~/.vim/pack/plugins/start
git clone https://github.com/cespare/vim-toml.git
</code></pre><p>그리고 <code>.vimrc</code> 파일에 <code>Plugin 'cespare/vim-toml'</code> 을 입력하고 <code>:PluginInstall</code> 까지 해줍니다. <del>이제 익숙해져버렸어..</del></p>
<pre><code class="language-console" data-lang="console">Plugin 'cespare/vim-toml'
</code></pre><p>근데 하고보니까 굳이 Clone 은 할 필요가 없었던 것 같아요. <strong>Vundle</strong> 이 알아서 설치해주는 것 같은데&hellip;</p>
<h4 id="json-plugin-설치">JSON PlugIn 설치</h4>
<p>JSON Syntax 는 <img src="https://github.com/elzr/vim-json" alt="Better JSON for VIM">의 README 를 참고해 아래 코드를 <code>.vimrc</code> 에 입력했어요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'elzr/vim-json'
</code></pre><p>이렇게하고 다시 MD 파일을 열어보았으나&hellip; 아직도 아무 색상도 보이지 않네요 ㅠㅠ 이제 점점 지쳐갑니다&hellip; Vim 에 Markdown Highligting 을 적용하는게 이렇게 힘들줄이야&hellip; 그래도 여기까지 왔으니 포기할 수 없어요. 또 뭐가 빠졌길래 이러는건지 찾아볼게요.</p>
<p>휴&hellip; 무려 3시간의 삽질 끝에 해결법을 알아냈습니다. 너무 간단한 문제였는데 도대체 답을 찾기가 어려웠어요. 분명히 정상적으로 다 설치한 것 같고 접기 기능도 정상적으로 작동하는데 색상만 표시되지 않던 이유는 Vim 에서 Syntax 설정이 꺼져있어서 그런거였어요. <del>이 간단한 문제 찾는데 3시간을&hellip;</del>~</p>
<p><strong>Vim</strong> 에서 <code>:</code> 를 눌러 커맨드 모드로 진입하고 <code>syntax on</code> 을 입력하면 끝입니다. 참고로 Default 값이 off 로 되어있어 매번 파일을 열 때마다 Syntax 를 적용해주기 번거로우니 <code>.vimrc</code> 파일에 <code>syntax on</code> 을 입력해두면 이후부터는 항상 Syntax Highliting 이 적용된 채로 파일이 열리게 됩니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91637569-6ae09400-ea44-11ea-8c4b-984a5d643b1e.png" alt="Syntax 가 활성화된 Vim"></p>
<p>색이 이쁘지는 않지만 그래도 정상적으로 하이라이팅 되고 있어요. 해냈습니다!! YAY!!!</p>
<hr>
<h3 id="markdown-preview">Markdown Preview</h3>
<p>힘들었지만 성공적하고나니 그래도 보람이 있어요 ㅎㅎ 하지만 우리는 아직 한가지를 더 설치해야합니다. <del>이번엔 제발 쉽다고해줘 ㅠㅠ</del> 바로 우리가 작성하는 MD 파일의 결과물을 실시간으로 확인할 수 있게 도와주는 <strong>Preview</strong> Plugin 입니다. 그럼 같이 한번 후딱 설치해볼게요.</p>
<p>이번에 설치할 플러그인은 <a href="https://github.com/JamshedVesuna/vim-markdown-preview">Markdown Preview</a> 에서 확인할 수 있습니다. 이제 Vundle 사용에 익숙해졌으니 빠르게 진행할게요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'JamshedVesuna/vim-markdown-preview'
</code></pre><p><code>.vimrc</code> 에 입력하고 바로 설치까지 진행했습니다. Markdown 파일을 편집할 때 Control + P 를 누르면 Defualt 브라우저로 창이 열리면서 Markdown 이 적용된 결과물을 보여준다고하여 설치를 마치자마자 바로 MD 파일을 열어 실행해보았습니다. 그리고 결과는!!</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91637973-1db1f180-ea47-11ea-8d22-b8e2a3954fd0.png" alt="빈 화면"></p>
<p>실패&hellip; 이번에도 역시 저에게 시련을 안겨주는군요. 어디 한번 해결해봅시다. 이것 저것 알아보다가 Preview 를 정상적으로 표시하기 위해서는 <strong>Markdown</strong> 이나 <strong>Grip</strong> 을 추가로 깔아야한다는 것을 알게되었습니다. <del>아니 이 정도면 그냥 VSCode 쓰는 것도..ㅋㅋㅋ</del>~</p>
<p>근데 저희는 지금 Markdown 을 사용하는거니까 왠지 이름도 Markdown 인걸 설치하고 싶더라고요. 그래서 <strong>Hombrew</strong> 를 통해 Markdown 을 설치해보았습니다. 그리고 실행해보니!!</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91638428-90709c00-ea4a-11ea-8f6b-0a8731cdbbed.png" alt="한글이 깨지는 Markdown"></p>
<p>아&hellip; 또 문제가 발생했어요. 역시 한번에 쉽게가면 재미가 없죠. 인코딩 문제인 것 같아 설정을 조금 건드려보았으나 번번히 실패하고 결국 <strong>Grip</strong> 을 깔았습니다. 이것도 Homebrew 에서 설치를 지원하더라고요. 역시 Homebrew 는 짱이에요. 말이 나온 김에 혹시 Homebrew 가 무엇인지 아직 잘 모르는 분들은 <a href="https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/">Homebrew 설치 및 기본 사용법 익히기</a> 포스팅을 참고해주세요.</p>
<pre><code class="language-console" data-lang="console">brew install grip
</code></pre><p>하지만 Grip 의 경우에는 <code>.vimrc</code> 에 추가적으로 설정을 하나 더 추가 입력해야합니다.</p>
<pre><code class="language-console" data-lang="console">let vim_markdown_preview_github = 1
</code></pre><p>여기까지하고 Control + P 를 눌러보니 markdown 이 설치되었을 때와는 다르게 Terminal 아래쪽에 <code>call Vim_Markdown_Preview()</code> 라는 커맨드가 보이며 브라우저가 열리네요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91638429-91a1c900-ea4a-11ea-8878-c9ca953e41c5.png" alt="Preview 가 정상적으로 실행된 모습"></p>
<p>그리고 결국 성공입니다!!! 정말 오래걸리고 힘들었지만 성공해냈어요 ㅎㅎㅎ 이제 제 블로그 포스팅을 Vim 에서 작업하고 올릴 수 있게되었다구요!! 기나긴 삽질의 시간이었지만 앞으로 잘 활용해서 지금 삽질한 시간 그 이상의 결과물을 뽑아내겠습니다! 그럼 오늘도 끝까지 읽으신 모든 분들 수고 많으셨습니다!!</p>
]]></content>
        </item>
        
        <item>
            <title>Firebase: Xcode 프로젝트와 연동하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200829-firebase-connecting-xcode-project/</link>
            <pubDate>Sat, 29 Aug 2020 09:56:46 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200829-firebase-connecting-xcode-project/</guid>
            <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다.
· Firebase 6.29.0
· Swift 5.2.4
 Firebase 한 번쯤 들어보지 않으셨나요? 초보 개발자가 모바일 앱을 개발하고 개인 앱 서버를 운영하는데 있어 빠질 수 없는 것이 Firebase 가 아닐까 합니다. 속도에 조금 불만이 있긴 하지만 사실 백엔드를 모르는 개발자가 이렇게 쉽고 간편하게 회원가입부터 데이터 관리까지 할 수 있는 서버를 그것도 일정수준까지는 무료로 운영할 수 있게 해주는 서비스가 또 어디있을까요? 이 서비스가 없었으면 저는 지금 Python 도 같이 배우고 있었을 것 같네요.</description>
            <content type="html"><![CDATA[<blockquote>
<p>본 포스팅은 이하 버전을 기준으로 작성되었습니다.<br>
· Firebase 6.29.0<br>
· Swift 5.2.4</p>
</blockquote>
<p><strong>Firebase</strong> 한 번쯤 들어보지 않으셨나요? 초보 개발자가 모바일 앱을 개발하고 개인 앱 서버를 운영하는데 있어 빠질 수 없는 것이 Firebase 가 아닐까 합니다. 속도에 조금 불만이 있긴 하지만 사실 백엔드를 모르는 개발자가 이렇게 쉽고 간편하게 회원가입부터 데이터 관리까지 할 수 있는 서버를 그것도 일정수준까지는 무료로 운영할 수 있게 해주는 서비스가 또 어디있을까요? 이 서비스가 없었으면 저는 지금 Python 도 같이 배우고 있었을 것 같네요. 물론 결국엔 배우는게 목표지만&hellip;</p>
<p>아무튼 Firebase 는 모바일 앱 개발자에게 백엔드 과정을 지원해주는 플랫폼 입니다.</p>
<p>그럼 오늘은 Xcode 프로젝트와 Firebase 를 연동하는 방법을 알아보도록 하겠습니다. 이 포스팅을 작성하는 시점에서는 Firebase 가 Swift Package Manager 를 지원하지 않아 <strong>CocoaPods</strong> 를 통해 설치하게되므로 CocoaPods 에 익숙하지 않은 분들은 <a href="https://kasroid.github.io/posts/ios/20200823-install-cocoapods-libraries/">CocoaPods: 설치 및 라이브러리 적용하기</a> 포스트를 먼저 읽고 와주세요 ㅎㅎ</p>
<hr>
<h2 id="firebase-와-친해지기">Firebase 와 친해지기</h2>
<p><strong>Firebase</strong> 는 <strong>Google 아이디</strong> 만 있으면 특별히 가입할 필요도 없이 누구나 쉽게 사용할 수 있어요. 일단 <a href="https://firebase.google.com">Firebase 공식 홈페이지</a> 에 함께 접속해볼게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fvf8Bs%2FbtqGqWQ7iVw%2FccvCdS3f3xAcMLlKS2BGnK%2Fimg.png" alt="Firebase 공식홈페이지"></p>
<p>홈페이지에 접속하고 나면 이런 화면을 볼 수 있을거에요. 구글 아이디로 로그인이 되어있다면 우측 상단에는 본인의 프로필 사진도 보이게 됩니다 ㅎㅎ 만약에 정말 혹시라도 만약에 구글 아이디가 없으신 분들은 계정을 하나 만들어 주세요&hellip;</p>
<p>그리고 프로필 사진 옆을 잘 보시면 <strong>콘솔로 이동</strong>이라는 항목이 보이시죠? 이걸 클릭해서 Firebase 프로젝트가 보이는 화면으로 들어가 봅시다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFhSiP%2FbtqGqahD4vV%2FlcRt5W5EawLI2icFZb0PJk%2Fimg.png" alt="Firebase 프로젝트 화면"></p>
<p>저는 이미 Firebase 를 통해 여러 프로젝트를 진행했기 때문에 2개의 프로젝트가 보이지만 여러분은 아마 + 버튼 하나만 보일거에요. 이 버튼으로 Firebase 의 프로젝트를 생성하고 <strong>Xcode 프로젝트</strong> 의 <strong>Bundle Identifier</strong> 를 이용해서 연결해주는 방식입니다. 연결이 되고나면 Xcode 프로젝트가 코드를 통해 Firebase 를 찾아가라는 명령을 받고 Firebase 서버에 접속하여 자신의 Bundle Identifier 값을 갖고있는 Firebase 의 프로젝트를 찾아가는 것이라고나 할까나&hellip; 아무튼 뭐 그렇습니다 ㅋㅋㅋ</p>
<p>프로젝트를 만드는 순서는 지금 + 버튼을 눌러 Firebase 프로젝트 생성을 시작하고 중간에 Xcode 프로젝트의 Bundle Identifier 가 필요한 시점에 Xcode 프로젝트를 생성해도 되지만 어자피 이렇게 하면 프로젝트를 왔다갔다해야되서 번거로우니 저는 그냥 Xcode 프로젝트부터 생성하고 Firebase 를 생성하는 것을 선호합니다.</p>
<hr>
<h2 id="bundle-identifier-복하사기">Bundle Identifier 복하사기</h2>
<p>그럼 Xcode 프로젝트를 생성하고 <strong>Bundle Identifier</strong> 를 복사해둘게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHii4j%2FbtqGrh1DSnM%2FYcO2c87Ru8EdM2b8efry5k%2Fimg.png" alt="Xcode 프로젝트 첫화면"></p>
<hr>
<h2 id="firebase-프로젝트-생성하기">Firebase 프로젝트 생성하기</h2>
<p>그럼 이제 + 버튼을 눌러 프로젝트를 생성해볼게요. 첫 화면은 프로젝트 명을 생성하는 화면입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkS7P7%2FbtqGnZOPAm7%2FtCZkntJF702kKkbzeYIye0%2Fimg.png" alt="Firebase 프로젝트 생성화면"></p>
<p>Xcode 프로젝트명과 달라도 괜찮습니다. 단순히 Firebase 홈페이지 내부적으로 관리하기 위한 이름이에요. 그래도 두 프로젝트가 서로 어느정도는 이름이 비슷해야 나중에 알아보기 쉬우니까 저는 똑같이 만들도록 할게요.</p>
<p>그 다음으로는 <strong>Google Analytics</strong> 를 설정하는 페이지가 뜰거에요. 이걸 사용하게되면 내 앱에 접속하는 사용자의 다양한 정보들을 그래프와 수치로 받아볼 수 있게 됩니다. 반드시 사용해야하는 기능은 아니라 필요없는 상황에서는 그냥 끄고 사용하는 것도 괜찮습니다.</p>
<p>이번에는 처음이니까 켜고 진행해보도록 할게요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fvr8Kt%2FbtqGqbARtJ7%2F1k0oAK1IrPKhoedHb4ce8k%2Fimg.png" alt="Firebase Google Analytics"></p>
<p>다음 화면에서는 <strong>Google Analytics</strong> 에 어떤 계정을 사용할꺼냐 묻는데 어자피 하나밖에 없습니다. <strong>Defualt Account for Firebase</strong> 를 선택해주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbjPMjg%2FbtqGmQKWlMo%2FC22UxDvxgHU7GKqG1b0F70%2Fimg.png" alt="Google Analytics 계정 선택"></p>
<p>그리고 프로젝트 생성을 누르면 잠시 로딩을 하고 프로젝트 내부화면으로 넘어가게 됩니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdOVlft%2FbtqGkWYZfyz%2F4hiwZ670vWw95VOZtKkZuK%2Fimg.png" alt="프로젝트 생성 중"></p>
<hr>
<h2 id="xcode-프로젝트와-연동하기">Xcode 프로젝트와 연동하기</h2>
<p>최초로 <strong>Firebase</strong> 에서 프로젝트를 만든 경우에는 저하고 화면이 조금 다를 수 있지만 별로 어려운 부분은 없으니 잘 넘어오셔서 아래와 같은 화면에서 <strong>iOS</strong> 를 클릭해주세요. 우리는 iOS 앱을 개발하는 것이므로 iOS 를 선택하는 것입니다 ㅎㅎ</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbgBm7j%2FbtqGmQjW7pL%2FyO5XS6cW6MBe1sm2gLPhkk%2Fimg.png" alt="Firebase iOS 선택"></p>
<p>이제 드디어 <strong>Xcode 프로젝트</strong>의 <strong>Bundle Identifier</strong> 가 필요한 시점이 왔어요. 가장 첫 텍스트필드에 값을 넣어주고 <strong>Register App</strong> 을 눌러줍니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhIxri%2FbtqGpxKX38N%2F4nhZKuCv5UVfqRA9LZ88Ik%2Fimg.png" alt="Bundle ID 연결"></p>
<p>그리고 이제 다음 화면에서 <strong>GoogleService-Info.plist</strong> 을 다운받아주세요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FosTE8%2FbtqGqQiX6RL%2FTCPsFP5Y3kfDEZ0Jvf8rLk%2Fimg.png" alt="GoogleService-Info.plist 다운로드"></p>
<p>그리고 다운받은 파일을 <strong>Xcode 프로젝트</strong>에 드래그해서 아래 이미지처럼 옮겨 넣어줍니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcfkUuh%2FbtqGqbt6YgL%2F8HRaK0ueyYCvsw6ZQdWSW1%2Fimg.png" alt="Info.plist 파일 옮겨넣기"></p>
<p>이때 알림창이 하나 뜨게되는데 꼭 첫번째 칸을 체크해주세요. Xcode 프로젝트의 폴더 내부로 실제 plist 파일을 <strong>복사</strong>한다는 의미입니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcAcny2%2FbtqGnITu7j4%2FCw8D3O87v4DnNNcVh0W7fK%2Fimg.png" alt="파일 복사 설정"></p>
<p>다시 Firebase 홈페이지로 돌아와서 Next 를 누르면 이제 <strong>CocoaPods</strong> 을 통해 Firebase 사용에 필요한 파일들을 다운로드 받으라고 안내합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcQZxwt%2FbtqGmPkYglb%2Fe62ufnkDw35kZtNmOKuc70%2Fimg.png" alt="Firebase 구성파일 설치 안내"></p>
<p>Xcode 프로젝트 폴더 내의 Podfile 에 <code>pod 'Firebase'</code> 을 입력해주세요. 여기서 막히는 분들은 포스팅 초반에 한번 언급한 <a href="http://localhost:1313/posts/ios/20200823-cocoapods-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/">CocoaPods 튜토리얼</a> 을 참고해주세요.</p>
<pre><code class="language-console" data-lang="console">pod 'Firebase'
</code></pre><p>이렇게 <strong>CocoaPods</strong> 설치를 마쳤다면 다시 Next 를 눌러줍니다. 이제 Xcode 프로젝트의 <strong>AppDelegate</strong> 에서 우리가 필수적으로 작업해야 할 내용들을 안내하고 있네요.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWLc1p%2FbtqGrdE7gUj%2F7zJy0IGsEal661No3QP2uK%2Fimg.png" alt="AppDelegate 작업 안내"></p>
<p>더 이상 <strong>xcodeproj</strong> 파일은 사용할 수 없으므로 <strong>xcworkspace</strong> 파일을 열고 새롭게 생긴 파일들을 잘 인식할 수 있돌고 빌드를 한번 해줍니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Foe8x8%2FbtqGrjSG0TY%2FIWH9ES1MAZoMs3ZWke4lO1%2Fimg.png" alt="Finder 의 xcworkspace 파일"></p>
<p>그리고 프로젝트 상단에 <strong>Firebase</strong> 를 <strong>import</strong> 해보면 오류없이 잘 인식하는 것을 확인할 수 있습니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Firebase</span>
</code></pre></div><p>그리고 <code>application(didFinishLaunchingWithOptions:)</code> 함수 내부에 <code>FirebaseApp.configure()</code> 코드를 구현해줍니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">application</span>(<span style="color:#66d9ef">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
    FirebaseApp.configure()
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
}
</code></pre></div><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdIkcCA%2FbtqGtDbQ8yB%2FQrQnd33Wx1diRnxM54WaFK%2Fimg.png" alt="Xcode 프로젝트 AppDelegate"></p>
<p>다시 Firebase 홈페이지에서 Next 를 누르면 이런 화면이 뜨게되는데 이제 Xcode 에서 앱을 한번 실행합니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpPIkY%2FbtqGpxEaaYA%2Fu1QhRYIbaV0Vkhv8HZeb6K%2Fimg.png" alt="Firebase 연결상태 최종 확인"></p>
<p>혹시라도 <code>FirebaseApp.configure()</code> 을 찾을 수 없다고 오류가 뜨는 분이 있다면 Xcode 를 먼저 껏다 켜주시고 그래도 안된다면 아래 코드를 추가로 import 해보세요.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">FirebaseCore</span>
</code></pre></div><p>그리고 Firebase 가 정상적으로 연결되었다면 <strong>Xcode 콘솔</strong>에서 다음과 같은 메세지를 확인할 수 있습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQFFR0%2FbtqGmPL4xjK%2Fd6HjKn5kBc8Z5AaytVKOVK%2Fimg.png" alt="Xcode Console 메세지 확인"></p>
<p>Firebase 홈페이지에서는 시뮬레이터가 실행되고 조금 뒤에 이렇게 초록색 안내가 뜨며 아래 버튼들이 활성화됩니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcAI1IK%2FbtqGtD3ZwDg%2FhmU7UuCxU0FcMlOLgprUQ1%2Fimg.png" alt="Firebase 연결 성공화면"></p>
<p>계속 이 화면에서 넘어가지지 않는다면 <strong>Skip this page</strong> 를 눌러 다음 화면으로 넘어가주세요. 그냥 넘어가도 전혀 문제 없습니다.</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcM8wbx%2FbtqGmQjXDhJ%2Fj6t4uJSLSrlZclWo2ts7mk%2Fimg.png" alt="Firebase 연결 중 화면"></p>
<p>자 이것으로 Firebase 연동을 완전히 마쳤습니다!</p>
<p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbPCpUD%2FbtqGtf3mohv%2FxzWXJqo4sTFnHGjSNltQC0%2Fimg.png" alt="Firebase 와 Xcode 프로젝트가 연결된 화면"></p>
<p>오늘도 함께 공부하느라 수고 많으셨습니다. 개인 앱을 만드는 분들은 앞으로 많은 곳에서 <strong>Firebase</strong> 를 사용하게 될 수 있으니까 지금 이 과정은 눈감고도 할 수 있을만큼 익숙하게 알아두시는 것을 추천합니다.</p>
]]></content>
        </item>
        
        <item>
            <title>Homebrew 설치 및 기본 사용법 익히기</title>
            <link>https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/</link>
            <pubDate>Sun, 23 Aug 2020 16:48:19 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/</guid>
            <description>오늘 소개할 Homebrew 는 여러가지 종류의 프로그램을 설치하고 삭제할 수 있게 도와주는 툴입니다. 제가 개발자로 커리어를 전환하고나서 알게된 가장 유용한 툴이고 가장 애용하는 툴이기도 합니다. 조금만 익숙해지면 정말 편리하고 강력한 툴이기 때문에 시간이 나면 언젠가 꼭 한번 소개하고 싶었는데요. 그게 오늘이네요! ㅎㅎ
Homebrew 는 macOS 의 Package Manager 입니다. 쉽게 말해서 일종의 프로그램 관리자 같은 역할이라 생각하면 좋을 것 같아요. 왠만한 모든 상용 프로그램의 설치 및 삭제, 그리고 업데이트 관리까지 Terminal 을 통해 Homebrew 하나로 해결할 수 있습니다.</description>
            <content type="html"><![CDATA[<p>오늘 소개할 <strong>Homebrew</strong> 는 여러가지 종류의 프로그램을 설치하고 삭제할 수 있게 도와주는 툴입니다. 제가 개발자로 커리어를 전환하고나서 알게된 가장 유용한 툴이고 가장 애용하는 툴이기도 합니다. 조금만 익숙해지면 정말 편리하고 강력한 툴이기 때문에 시간이 나면 언젠가 꼭 한번 소개하고 싶었는데요. 그게 오늘이네요! ㅎㅎ</p>
<p>Homebrew 는 <strong>macOS</strong> 의 <strong>Package Manager</strong> 입니다. 쉽게 말해서 일종의 프로그램 관리자 같은 역할이라 생각하면 좋을 것 같아요. 왠만한 모든 상용 프로그램의 설치 및 삭제, 그리고 업데이트 관리까지 Terminal 을 통해 Homebrew 하나로 해결할 수 있습니다. Homebrew 를 통해 프로그램을 설치하는게 편해봤자 얼마나 더 편하다고 굳이 이렇게 새로운 것을 배우기까지 해야하는지 의문이 들 수 있어요. 그래서 Homebrew 를 사용할 때와 사용하지 않을 때 우리가 프로그램을 설치하고 사용하기까지 거치는 과정들을 나열하고 차이점을 비교해 보겠습니다.</p>
<ol>
<li>구글 접속</li>
<li>검색</li>
<li>프로그램을 다운받을 수 있는 홈페이지 접속</li>
<li>홈페이지에서 다운로드 링크를 찾기</li>
<li>프로그램 다운로드</li>
<li>다운로드 폴더에 들어가서 설치파일 실행</li>
<li>설치과정 진행</li>
<li>설치가 완료되고나면 다운로드 폴더에서 설치 파일 제거</li>
</ol>
<p>대부분 이런 과정들을 거쳐 프로그램을 설치하죠? 프로그램을 한개만 설치할 때는 이렇게 설치하는 방법도 나쁘진 않아요. 하지만 만약 10개를 설치해야한다면 어떨까요? 20개라면? 프로그램 설치가 비록 어려운 부분은 없지만 정말 귀찮은 일이지요. Homebrew 를 사용하면 최대 단 2번의 과정으로 위 과정들을 모두 끝낼 수 있습니다.</p>
<ol>
<li>다운로드받을 프로그램명 검색(optional)</li>
<li>다운로드 명령 실행</li>
</ol>
<p>정말 이보다 간단할 수가 있을까요? 지금은 프로그램을 검색하는 과정까지 포함을 했지만 사실 우리가 다운받을 프로그램의 이름을 정확히 알고 있는 경우에는 검색조차도 필요가 없습니다. Terminal 에 커맨드 단 한줄 입력만으로 새로운 프로그램을 사용할 준비가 끝납니다.</p>
<p>Homebrew 로 단순히 프로그램을 하나씩 설치하고 제거하는 것은 물론이고 만약 내가 설치해놓은 프로그램들을 리스트 형태로 만들어 두었다면(리스트를 만드는 기능도 Homebrew 에서 제공합니다) 한 번에 프로그램 수십개를 설치할 수도 있습니다. 리스트에 적힌 모든 목륵을 설치하라는 커맨드를 입력하고 우리는 커피 한잔하고 오면 프로그램들이 모두 설치되어 있는 것이죠 ㅎㅎㅎ</p>
<p>어떤가요? 듣기만해도 매력이 뿜뿜하고 배우고 싶어지지 않나요?? ㅋㅋㅋㅋ</p>
<hr>
<h2 id="homebrew-설치하기">Homebrew 설치하기</h2>
<p>이정도면 제 <strong>Homebrew</strong> 영업에 어느정도 넘어왔을테니 바로 설치를 한번 시작해볼게요. <del>안 넘어왔어도 그냥 보세요 ㅋㅋ</del></p>
<p>먼저 Homebrew <a href="https://brew.sh">공식 홈페이지</a> 에 접속합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/90974084-e2a15100-e562-11ea-900d-d8b0ae41297d.png" alt="Homebrew Official Website"></p>
<p>이렇게 생긴 홈페이지가 보이면 <strong>Install Homebrew</strong> 라고 적힌 부분의 아래 명령어를 <strong>Terminal</strong> 에서 실행합니다.</p>
<pre><code class="language-Console" data-lang="Console">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;
</code></pre><p>만약 Terminal 에 자물쇠 모양이 나타나며 비밀번호를 요구할 경우 비밀번호를 입력해주세요. 우리가 평소 웹사이트에서 비빌번호를 입력할 때처럼 실시간으로 비밀번호가 입력되는 상황이 Terminal 에서는 보이지 않지만 실제로는 비밀번호가 입력되고 있는 상황이니 전부 입력하고 리턴키를 누르면 됩니다.</p>
<hr>
<h2 id="homebrew-사용법-익히기">Homebrew 사용법 익히기</h2>
<p>Homebrew 설치를 정상적으로 마쳤다면 이제 Terminal 에서 <code>brew</code> 명령어를 사용할 수 있게 됩니다. 그럼 Terminal 에 <code>brew</code> 라고 한번 입력해볼게요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91327134-1b118b00-e800-11ea-8620-0f5c9194a8ee.png" alt="Typed &lsquo;brew&rsquo; in Terminal"></p>
<p>여러가지 명령어들이 많이 뜨네요 ㅎㅎ 생소한 명령어다보니 처음에는 조금 어렵게 느껴지더라도 그때그때 필요할 때 한번씩 찾아 쓰다보면 명령어들이 전부 쉬운편이라 금방 외워서 사용하게 되니 일부러 외울 필요는 없습니다. <del>우리는 영어 한마디 제대로 못하던 시절에도 수 많은 스타크래프트 치트키를 외워서 사용했었습니다 ㅎㅎ</del></p>
<hr>
<h3 id="프로그램-검색하기">프로그램 검색하기</h3>
<p><strong>Homebrew</strong> 로 프로그램을 설치하기 위해서는 먼저 우리가 원하는 프로그램의 명칭을 정확하게 알아야 합니다. 프로그램 이름이 단어 하나로 구성된 경우에는 대부분 그 자체로 프로그램명이 되지만 이름에 띄어쓰기가 있는 경우 표기 방법이 조금 다를 수 있으니 먼저 검색을 한번 해보는 것이 좋습니다. 그럼 이번에는 예제로 구글 크롬을 검색해보도록 할게요.</p>
<pre><code class="language-Console" data-lang="Console">brew search google chrome
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/91327195-2fee1e80-e800-11ea-87af-edeea42c8994.png" alt="Searched Google Chrome via Homebrew"></p>
<p>검색 결과가 총 4개가 있네요. 딱 봐도 첫번째 결과가 우리가 찾는 구글 크롬인 것 같아요. 꽤 정확한 결과값이므로 이 단어로 바로 설치를 진행해도 되지만 정말 혹시 모르는 경우를 대비해서 이게 정확한 곳에서 다운로드 받는 것인지 확인해 볼 수 있습니다.</p>
<pre><code class="language-Console" data-lang="Console">brew cask home google-chrome
</code></pre><p><code>cask</code> 는 상용 프로그램이라는 뜻으로 일반 홈페이지에서 직접 다운로드 받는 프로그램을 의미합니다. 구글 크롬은 App Store 다운받거나 Terminal 에서 Tool 의 형태로 제공되는 것이 아닌 일반 브라우저에서 다운로드 받아 사용하는 상용 프로그램이니까 <code>cask</code> 에 속합니다. 그리고 <code>home</code> 은 다운받을 수 있는 홈페이지를 뜻합니다. 즉 구글 크롬을 다운받을 수 있는 홈페이지를 열라는 뜻이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91327244-409e9480-e800-11ea-8669-846d77935901.png" alt="Google Chrome Download Page"></p>
<p>우리가 딱 원하는 페이지가 떳어요!! 그럼 이제 <code>google-chrome</code> 을 사용해 설치해볼게요.</p>
<hr>
<h3 id="프로그램-설치하기">프로그램 설치하기</h3>
<p>설치방법은 매우 간단합니다.</p>
<pre><code class="language-Console" data-lang="Console">brew cask install google-chrome
</code></pre><p>잠깐 기다려주고나면 짜잔!! 설치가 모두 끝났고 이제 정상적으로 프로그램을 사용할 수 있게되었습니다.</p>
<hr>
<h3 id="설치된-프로그램-확인하기">설치된 프로그램 확인하기</h3>
<p>우리가 설치한 프로그램의 목록도 brew 를 통해 간단히 나열하고 확인할 수가 있습니다. 다음 커맨드를 입력해 보세요.</p>
<pre><code class="language-Console" data-lang="Console">brew cask list
</code></pre><p>내 컴퓨터에 설치되어 있는 일반 프로그램의 리스트를 달라는 뜻이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91327307-4dbb8380-e800-11ea-9fa4-23be49d76475.png" alt="Installed Program List"></p>
<p>방금 설치한 구글 크롬이 목록에 표시된다면 정상적으로 설치가 되었다는 뜻입니다. 저는 모든 프로그램들을 Homebrew 로 관리하고 있어서 이렇게 많이 뜬답니다 ㅎㅎㅎ</p>
<h3 id="프로그램-삭제하기">프로그램 삭제하기</h3>
<p>설치하는 방법을 알았으니 삭제는 당연히 세트메뉴로 배워야겠죠?</p>
<pre><code class="language-Console" data-lang="Console">brew uninstall google-chrome
</code></pre><p>네 끝입니다. 이렇게 <strong>Homebrew</strong> 가 프로그램 관리자 역할을 하며 우리 컴퓨터에 설치되어 있거나 설치할 모든 프로그램을 관리해주기 때문에 우리는 쓸데없는 시간낭비를 줄이고 다른 것들에 더 집중할 수 있습니다.</p>
<p>다음 포스팅에서는 <strong>Homebrew</strong> 를 통해 내가 사용하는 프로그램들을 한번에 업데이트하는 방법과 내 컴퓨터에 깔려있는 모든 프로그램(Homebrew 를 통해 설치한)들의 리스트를 텍스트 파일형태로 저장하고 그 파일을 사용해 모든 프로그램을 한번에 설치할 수 있는 방법을 알아보겠습니다.</p>
<p>Terminal 을 통해 프로그램을 설치하고 관리하는 것이 처음에는 익숙하지 않아 조금은 거부감이 들고 부담스러울 수 있지만 그냥 쓰다보면 정말 어려운거 없고 훨씬 편하다는 사실을 알게될거에요. 그럼 여러분들도 <strong>Homebrew</strong> 꼭 사용하길 바라겠습니다!</p>
]]></content>
        </item>
        
    </channel>
</rss>
