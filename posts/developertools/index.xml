<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Developer Tools on Developer Kas</title>
        <link>https://kasroid.github.io/posts/developertools/</link>
        <description>Recent content in Developer Tools on Developer Kas</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 25 Aug 2020 01:27:47 +0900</lastBuildDate>
        <atom:link href="https://kasroid.github.io/posts/developertools/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Ranger - CLI File Browser 설치 및 사용법</title>
            <link>https://kasroid.github.io/posts/developertools/20200915-ranger-installation-and-basics/</link>
            <pubDate>Sun, 13 Sep 2020 09:53:32 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200915-ranger-installation-and-basics/</guid>
            <description>Intro GUI 환경 대신 Terminal 을 사용하게되면 대부분의 작업이 더 편리해지지만 분명히 불편한 점도 생기기 마련입니다. 그 중 가장 대표적인 예가 File Browsing 이 아닐까해요. 요즘은 컴퓨터로 작업을 할 때 어떤 작업을 하든 꼭 필수적으로 사용해야하는 Tool 이 있는 경우가 아니라면 모든 작업을 Terminal 에서 해결하려고 하는데 File Browsing 만큼은 아직도 Finder 에 의존할 때가 많습니다. 파일명을 변경하거나 복사, 이동하는 작업이 Terminal 에서는 좀 불편하더라고요.
그럼 잘 만들어놓은 Finder 를 놔두고 왜 굳이 Terminal 에서 작업을 하려고 하느냐.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p><strong>GUI</strong> 환경 대신 <strong>Terminal</strong> 을 사용하게되면 대부분의 작업이 더 편리해지지만 분명히 불편한 점도 생기기 마련입니다. 그 중 가장 대표적인 예가 <strong>File Browsing</strong> 이 아닐까해요. 요즘은 컴퓨터로 작업을 할 때 어떤 작업을 하든 꼭 필수적으로 사용해야하는 <strong>Tool</strong> 이 있는 경우가 아니라면 모든 작업을 <strong>Terminal</strong> 에서 해결하려고 하는데 <strong>File Browsing</strong> 만큼은 아직도 <strong>Finder</strong> 에 의존할 때가 많습니다. <strong>파일명을 변경</strong>하거나 <strong>복사, 이동</strong>하는 작업이 <strong>Terminal</strong> 에서는 좀 불편하더라고요.</p>
<p>그럼 잘 만들어놓은 <strong>Finder</strong> 를 놔두고 왜 굳이 <strong>Terminal</strong> 에서 작업을 하려고 하느냐. 바로 <strong>Workflow</strong> 때문입니다. 제가 애초에 <strong>Terminal</strong> 을 주력으로 쓰게된 이유도 이곳에서는 모든 작업을 창 전환 없이 <strong>키보드만으로도</strong> 진행할 수 있기 때문이죠.</p>
<p>그래서 <strong>CLI</strong> 환경에서 쓸만한 <strong>File Browser</strong> 를 찾다보니 후보가 <strong>Ranger</strong> 와 <strong>Midnight Commander</strong> 로 추려지더라고요. 둘 다 꽤 유명한 프로그램이지만 그래도 사용자의 수가 인지도면에서는 <strong>Midnight Commander</strong> 가 우위였지만, 저는 좀 더 미려한 인터페이스와 최신 기능을 탑재한 <strong>Ranger</strong> 를 사용하기로 결정했습니다. 그럼 바로 설치를 진행해 볼게요.</p>
<hr>
<h2 id="installation">Installation</h2>
<p><strong><a href="https://github.com/ranger/ranger">Ranger Github</a></strong> 의 <strong>README</strong> 에서 여러가지 정보를 확인할 수 있습니다만, 제가 원하는 설치방법은 기재되어 있지 않아 구글링으로 <strong><a href="https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/">Homebrew</a></strong> 로 설치할 수 있는 방법을 검색 해보니 역시 가능했습니다.</p>
<pre><code class="language-console" data-lang="console">brew install ranger
</code></pre><p>간단하게 설치를 마치고나면 바로 <strong>Terminal</strong> 에서 <code>ranger</code> 라는 커맨드를 사용할 수 있게됩니다.</p>
<hr>
<h2 id="basics">Basics</h2>
<p>그럼 <code>ranger</code> 커맨드를 입력해 <strong>File Browser</strong> 를 실행시켜볼게요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93020756-d8cab500-f619-11ea-8146-db4c561394f9.png" alt="Rnager 가 실행된 모습"></p>
<p>그냥 보기만해도 어떻게 사용해야할지 감이 오네요 ㅎㅎ 정말 직관적이고 깔끔한 인터페이스인 것 같아요. 역시 <strong>Ranger</strong> 를 선택하길 잘한 것 같네요 ㅋㅋㅋ</p>
<p>기본 조작법을 잠깐 살펴보자면 기본 <strong>Vim</strong> 키인 <strong>h, j, k, l</strong> 나 <strong>방향키</strong> 로 기본 조작을 할 수 있으며, 심지어 <strong>마우스</strong> 로도 조작이 가능합니다. <del>근데 마우스 조작할거면 그냥 Finder 를 썼지&hellip;</del></p>
<hr>
<h2 id="config-파일-생성-및-관리하기">Config 파일 생성 및 관리하기</h2>
<p><strong>Ranger</strong> 역시도 <strong>Vim</strong> 과 비슷하게 <code>rc.config</code> 라는 파일을 통해 여러가지 세팅을 저장하고 사용할 수 있습니다. <strong>Vim</strong> 에서 세팅을 한번 이상 해본 분이라면 익숙할거에요 ㅎㅎ 다만 <strong>Ranger</strong> 를 방금 설치했다면 원래 이 설정파일이 위치해야하는 <code>~/.config/ranger/</code> 경로에 저처럼 어떤 파일도 없을거에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93021381-3a405300-f61d-11ea-838b-111d4b3aa947.png" alt="Ranger 설정파일이 없는 화면"></p>
<p>이곳에 설정과 관련된 파일들이 있어야하는데 이렇게 아무 것도 없습니다. 그럼 우리가 직접 커맨드를 실행해 설정파일들을 생성해보겠습니다.</p>
<pre><code class="language-console" data-lang="console">$ ranger --copy-config=all
</code></pre><p>이렇게 입력을 하면 여러가지 파일이 생성되고 이 중 우리가 설정에 사용하게 될 파일은 <code>rc.config</code> 파일입니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93021371-36accc00-f61d-11ea-8a0b-981f527f9131.png" alt="Ranger 설정파일이 생성된 화면"></p>
<p>이제 파일이 생성되었으니까 직접 한번 여러가지 기본 설정들을 진행해보도록 하겠습니다.</p>
<hr>
<h2 id="image-preview-기능-추가하기">Image Preview 기능 추가하기</h2>
<p><strong>Rnager</strong> 를 막 설치했다면 기본 세팅으로는 <strong>Finder</strong> 에서 처럼 이미지 미리 보기가 사용이 안되는데요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93021768-8db3a080-f61f-11ea-877c-6a0ece18a7d8.png" alt="Finder 의 미리보기"></p>
<p>이렇게 <strong>Image</strong> 를 미리 확인할 수 있으면 매번 어떤 파일인지 확인하는 수고가 덜어지고 시간도 훨씬 절약되잖아요? 그래서 이 기능을 <strong>Ranger</strong> 에서도 사용할 수 있도록 세팅을 하려고 합니다.</p>
<p>그럼 세팅을 위해 우리가 조금 전 생성한 <code>rc.config</code> 파일을 <strong>Vim</strong> 으로 열어볼게요. <strong>Vim</strong> 이 익숙하지 않다면 당연히 <strong>Vim</strong> 외 어떤 텍스트 에디터로 열어도 괜찮습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93021737-665cd380-f61f-11ea-8c6d-d292a4a67682.png" alt="rc.config 파일 첫 화면"></p>
<p>헐.. 텅 비어있을 줄 알았는데 초깃값들이 무언가 많네요. 대략적으로 설명하자면 <strong>여러가지 단축키</strong> 설정들이며 이 곳을 수정해 본인이 원하는 단축키를 사용할 수도 있습니다. 저희는 Image Preview 를 구현하는게 목표니까 이건 넘어가도록하고&hellip;</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93021731-61981f80-f61f-11ea-93f3-ce764c5db167.png" alt="rc.config preview_image 화면"></p>
<p>검색을 통해 <code>set preview_images false</code> 라고 입력되어 있는 부분을 찾아 <code>set preview_images true</code> 로 변경해 주세요. 일단 우리는 <strong>Ranger</strong> 에게 <strong>Preview</strong> 기능을 사용하고 싶다고 알려줬습니다. 하지만 이게 끝이 아니라 어떤 방식으로 사용할건지를 최종적으로 한번 더 확인시켜줘야하는데요. 이 방법에는 여러가지가 있지만 저는 <strong>iTerm2</strong> 라는 <strong>Application</strong> 에서 제공하는 기능을 이용해 <strong>Preview</strong> 기능을 활성화해보도록 할게요.</p>
<p>이번에는 <code>set preview_images_method</code> 라고 입력되어 있는 부분을 찾아볼게요. 기본값은 <code>w3m</code> 으로 되어 있을텐데 저는 이 코드를 코멘트 처리하고 <code>set preview_images_method iterm2</code> 를 새롭게 입력했습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/93021738-66f56a00-f61f-11ea-8c8d-dd5c1fd1bc52.png" alt="rc.config preview_images_method 화면"></p>
<p><strong>Preview</strong> 가 화면 우측에 잘 표시되는 것을 볼 수가 있네요!!</p>
<hr>
<h2 id="shortcuts">Shortcuts</h2>
<p>추가적으로 앞으로 <strong>Ranger</strong> 를 사용하면서 자주 쓸만한 단축키들을 정리해봤어요. <strong>Vim</strong> 에 익숙하다면 대부분 금방 적응할 수 있을만한 단축키네요!</p>
<table>
<thead>
<tr>
<th style="text-align:left">Title</th>
<th style="text-align:right">Shortcut</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">파일 이름 변경하기</td>
<td style="text-align:right"><strong>cr</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 이름 앞쪽에서부터 변경</td>
<td style="text-align:right"><strong>I</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 이름 뒷쪽에서부터 변경</td>
<td style="text-align:right"><strong>A</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 복사하기</td>
<td style="text-align:right"><strong>yy</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 잘라내기</td>
<td style="text-align:right"><strong>dd</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 붙여넣기</td>
<td style="text-align:right"><strong>pp</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 및 폴더 삭제하기</td>
<td style="text-align:right"><strong>dD</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 개별 선택</td>
<td style="text-align:right"><strong>space</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 전체 선택</td>
<td style="text-align:right"><strong>v</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 선택 전체 해제</td>
<td style="text-align:right"><strong>uv</strong></td>
</tr>
<tr>
<td style="text-align:left">숨김파일 보이기 설정 토글</td>
<td style="text-align:right"><strong>zh</strong></td>
</tr>
<tr>
<td style="text-align:left">경로를 Home 으로 이동</td>
<td style="text-align:right"><strong>gh</strong></td>
</tr>
<tr>
<td style="text-align:left">선택된 폴더의 사이즈 확인</td>
<td style="text-align:right"><strong>dc</strong></td>
</tr>
<tr>
<td style="text-align:left">Parent 폴더에서 위,아래 이동</td>
<td style="text-align:right"><strong>[</strong> , <strong>]</strong></td>
</tr>
<tr>
<td style="text-align:left">새로운 탭 생성하기</td>
<td style="text-align:right"><strong>control + n</strong> or <strong>gn</strong></td>
</tr>
<tr>
<td style="text-align:left">현재 탭 닫기</td>
<td style="text-align:right"><strong>control + w</strong> or <strong>gc</strong></td>
</tr>
<tr>
<td style="text-align:left">다음 탭으로 이동</td>
<td style="text-align:right"><strong>tab</strong> or <strong>gt</strong></td>
</tr>
<tr>
<td style="text-align:left">이전 탭으로 이동</td>
<td style="text-align:right"><strong>shift + tab</strong> or ** <strong>gT</strong></td>
</tr>
<tr>
<td style="text-align:left">파일 및 폴더의 경로 Bookmark</td>
<td style="text-align:right"><strong>m + { x }</strong></td>
</tr>
<tr>
<td style="text-align:left">Bookmark 찾아가기</td>
<td style="text-align:right"><strong>` + { x }</strong></td>
</tr>
<tr>
<td style="text-align:left">Shell 커맨드 사용하기</td>
<td style="text-align:right"><strong>!</strong> or <strong>s</strong></td>
</tr>
<tr>
<td style="text-align:left">무거운 작업 로드에서 탈출</td>
<td style="text-align:right"><strong>J</strong></td>
</tr>
<tr>
<td style="text-align:left">종료하기</td>
<td style="text-align:right"><strong>q</strong></td>
</tr>
</tbody>
</table>
<p>더 많은 단축키는 <a href="http://dquinton.github.io/debian-install/files/ranger-keybinds_quinton.pdf">이곳</a>을 참조하세요.</p>
<hr>
<h2 id="wrap-up">Wrap Up</h2>
<p>오늘은 <strong>Terminal</strong> 에서 <strong>File Browsing</strong> 을 좀 더 편하게 할 수 있도록 공부를 해보았는데요. 이렇게 <strong>Terminal</strong> 과 점점 더 친해지는 것 같아 기분이 좋습니다. 여러분들도 <strong>Terminal</strong> 과 빨리 친해지길 바랍니다! 다른 이유도 많지만 일단 <strong>Terminal</strong> 이 간지나잖아요!!</p>
]]></content>
        </item>
        
        <item>
            <title>Terminal - Mac 의 파일권한 시스템 이해하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200908-terminal-understanding-of-organization-of-files-in-mac/</link>
            <pubDate>Tue, 08 Sep 2020 08:28:46 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200908-terminal-understanding-of-organization-of-files-in-mac/</guid>
            <description>Intro Mac 시스템 내부의 모든 파일은 User 라고하는 파일의 관리자가 명시되어 있으며, 관리자 외의 다른 User 는 파일의 읽기 및 쓰기 권한에 제한을 받을 수 있습니다. 사실 맥북같은 경우 혼자 사용하기 때문에 이런 권한들에 대해 거의 관심을 가져본 적이 없지만, 그래도 기본 개념정도로 알아두고 지나가면 좋을 것 같아 정리를 해볼려고요! ㅎㅎ
 Finder 에서 User 및 권한 확인하기 먼저 내 맥북에는 어떤 User 가 있는지 확인을 해보겠습니다. Finder 를 열고 최상위 루트로 가보면 아래 스크린샷처럼 유저 목록이 보일거에요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>Mac 시스템 내부의 모든 파일은 <strong>User</strong> 라고하는 파일의 관리자가 명시되어 있으며, 관리자 외의 다른 User 는 파일의 읽기 및 쓰기 권한에 제한을 받을 수 있습니다. 사실 맥북같은 경우 혼자 사용하기 때문에 이런 권한들에 대해 거의 관심을 가져본 적이 없지만, 그래도 기본 개념정도로 알아두고 지나가면 좋을 것 같아 정리를 해볼려고요! ㅎㅎ</p>
<hr>
<h2 id="finder-에서-user-및-권한-확인하기">Finder 에서 User 및 권한 확인하기</h2>
<p>먼저 내 맥북에는 어떤 <strong>User</strong> 가 있는지 확인을 해보겠습니다. <strong>Finder</strong> 를 열고 최상위 루트로 가보면 아래 스크린샷처럼 유저 목록이 보일거에요. 제 맥북에는 <code>kas</code> 와 <code>shared</code> 두 개의 <strong>User</strong> 가 존재하네요. 그동안 한번도 신경쓰지 않았더라도 우리는 항상 어떤 <strong>User</strong> 로서 맥북에서 작업을 하고 있었답니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92420629-83248180-f1af-11ea-91a4-df73edbad5a2.png" alt="Finder 의 User"></p>
<p>이제 <strong>Finder</strong> 에서 아무 파일이나 폴더를 클릭하고 <code>command + i</code> 를 눌러 접근 권한을 확인해볼게요. 새로운 창이 하나 떳을텐데 이곳의 가장 아래쪽에서 User 별 접근권한 목록을 확인할 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92420630-8455ae80-f1af-11ea-9663-c822367c50a9.png" alt="Finder 의 접근권한"></p>
<p>제가 열은 폴더를 기준으로 <code>kas</code> 라는 <strong>User</strong> 는 모든 권한을 가지고 있고, <code>everyone</code> 이라는 <strong>User</strong> 는 어떤 권한도 갖고있지 않네요 ㅎㅎ 참고로 <code>everyone</code> 은 이곳에 따로 명시된 <strong>User</strong> 외에 다른 모든 <strong>User</strong> 를 뜻합니다.</p>
<hr>
<h2 id="terminal-에서-user-및-권한-확인하기">Terminal 에서 User 및 권한 확인하기</h2>
<p>이제 <strong>Terminal</strong> 에서 같은 결과를 확인해보도록 할게요. 조금 전 Finder 에서 열었던 것과 경로에서 <code>ls -l</code> 커맨드를 입력해보세요. 출력된 내용의 좌측에 알 수 없는 영문들이 보일텐데 이것이 우리가 조금 전 Finder 에서 본 것과 똑같은 내용입니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92420913-efec4b80-f1b0-11ea-8f17-b7f2e94c5f37.png" alt="Terminal 에서 권한 확인"></p>
<p>접근권한에 대해 조금 더 자세히 알아보기 전에 <strong>Terminal</strong> 에 출력된 내용을 우측부터 하나씩 정리해볼게요.</p>
<p>일단 가장 오른쪽에 위치한 것은 이미 알고 계셨겠지만 <strong>파일이나 폴더</strong>의 이름입니다. 그리고 그 옆에 있는 날짜는 해당 폴더나 파일이 최종적으로 <strong>생성되거나 업데이트된 날짜</strong>를 의미합니다. 그리고 그 옆의 숫자는 <strong>용량</strong>인데요. 이 상태로는 우리가 알아보기 쉽지 않은 형태이기 때문에 그냥 용량을 의미하는구나 정도로만 알아두세요.</p>
<p>그리고 다시 옆에 <strong>staff</strong> 라고 써진 부분이 보이는데요. 이것은 <strong>Group</strong> 을 의미합니다. 앞서 설명드리진 않았지만 모든 <strong>User</strong> 는 특정 <strong>Group</strong> 에 속해있거든요. 일단은 이 부분도 이 정도만 알고 넘어가면 될 것 같아요. 그리고 다시 옆을 보면 <strong>kas</strong> 라는 단어가 보이죠? 이것이 해당 폴더나 파일의 <strong>Owner</strong> 즉 관리자를 의미합니다.</p>
<p><strong>Owner</strong> 옆에 있는 숫자는 해당 파일이나 폴더에 연결되어 있는 <strong>link 의 갯수</strong>를 뜻하는데요. 우리에게 별 의미가 없는 부분이므로 스킵하겠습니다.</p>
<p>마지막으로 가장 왼쪽에 위치한 부분이 바로 <strong>접근권한</strong>입니다. 하나씩 살펴볼게요. 일단 이것을 읽는 방법은 <strong>첫번째 글자를 먼저</strong> 해석하고, 나머지는 <strong>3 글자 단위로 묶어서</strong> 해석을 하면 되는데요. 그래서 첫 글자부터 살펴보면 현재 표시된 내용이 파일인지 폴더인지를 구분하는 역할입니다. 제가 찍은 스크린샷에서는 전부 폴더만 있는 경로라 모두 <code>d</code> 로 시작하네요. 파일은 <code>-</code> 로 시작합니다.</p>
<p>이 다음부터는 3 글자씩 끊어서 읽으면 된다고 했죠?? 그러니까 첫번째 글자 다음으로 오는 3 글자 <code>rwx</code> 만 생각해볼게요. 얘네는 <strong>Owner</strong> 의 권한입니다.</p>
<p>각 알파벳이 뜻하는 의미는 이렇습니다.</p>
<ul>
<li>r 은 readable</li>
<li>w 는 writable</li>
<li>x 는 executable</li>
</ul>
<p>각각 순서대로 읽기, 쓰기, 실행이고, 만약 <code>-</code> 로 표시되어 있다면 해당 권한이 없다는 뜻입니다. 지금 우리가 보는 부분은 <strong>Owner</strong> 의 접근권한인만큼 웬만하면 거의 모든 권한이 다 있을거에요.</p>
<p>다음 3 글자는 <strong>staff</strong> 라는 <strong>Group</strong> 이 접근할 수 있는 권한을 의미합니다. 위에서 <strong>Group</strong> 이라는게 있다고만 설명했었는데요. 어떤 <strong>User</strong> 는 여러 개의 <strong>Group</strong> 에 동시에 속할 수 있습니다. 그리고 만약 해당 <strong>User</strong> 가 <strong>Owner</strong> 가 아니라면 <strong>Group</strong> 의 권한을 갖게되는 거에요.</p>
<p>마지막 3 글자는 <strong>Owner</strong> 가 아니고 <strong>Group</strong> 에 속하지 않은 <strong>User</strong> 의 권한을 의미합니다.</p>
<hr>
<h2 id="wrap-up">Wrap Up</h2>
<p>이렇게 <strong>User</strong> 와 <strong>Group</strong> 의 존재, 그리고 파일의 접근권한에 대해 알아보았는데요. <strong>Terminal</strong> 을 사용하다보면 자주 볼 수밖에 없는 부분인만큼 정확히 알아두고 지나가면 좋을 것 같아서 공부해보았습니다. 사실 제 기준으로는 아직까지 이 개념들을 유용하게 써볼 일은 없었어요 ㅎㅎㅎ 그래도 알아두고 지나가자구요!!</p>
]]></content>
        </item>
        
        <item>
            <title>Terminal - 기본적인 사용법 알아보기</title>
            <link>https://kasroid.github.io/posts/developertools/20200907-terminal-first-fundamental-commands/</link>
            <pubDate>Mon, 07 Sep 2020 11:49:00 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200907-terminal-first-fundamental-commands/</guid>
            <description>Intro 제가 개발은 iOS 만 해봤지만 그래도 공부하다보니 느낀 것이 어떤 개발을 하더라도 한가지 꼭 사용할 줄 알아야하는 툴이 Terminal 이 아닐까 싶습니다. Git 만 사용하려고해도 Terminal 을 사용해야 하잖아요? 대체방법이 없는 것은 아니지만&amp;hellip;
그래서 이왕 사용하는거 좀 더 체계적으로 제대로 사용할 수 있으면 좋겠다 싶어서 공부를 시작했습니다. 그리고 터미널 잘 쓰면 왠지 멋있어 보이기도 하잖아요 ㅋㅋㅋ 그러니까 오늘부터 같이 공부해서 터미널 고수가 되어보아요~
그럼 Terminal 의 커맨드는 어떻게 구성되는지, 그리고 알아두면 좋을만한 매우 기초적인 커맨드를 공부해 볼게요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>제가 개발은 iOS 만 해봤지만 그래도 공부하다보니 느낀 것이 어떤 개발을 하더라도 한가지 꼭 사용할 줄 알아야하는 툴이 <strong>Terminal</strong> 이 아닐까 싶습니다. <strong>Git</strong> 만 사용하려고해도 <strong>Terminal</strong> 을 사용해야 하잖아요? <del>대체방법이 없는 것은 아니지만&hellip;</del></p>
<p>그래서 이왕 사용하는거 좀 더 체계적으로 제대로 사용할 수 있으면 좋겠다 싶어서 공부를 시작했습니다. 그리고 터미널 잘 쓰면 왠지 멋있어 보이기도 하잖아요 ㅋㅋㅋ 그러니까 오늘부터 같이 공부해서 터미널 고수가 되어보아요~</p>
<p>그럼 <strong>Terminal</strong> 의 커맨드는 <strong>어떻게 구성</strong>되는지, 그리고 알아두면 좋을만한 매우 <strong>기초적인 커맨드</strong>를 공부해 볼게요.</p>
<hr>
<h2 id="commands-는-어떻게-구성될까요">Commands 는 어떻게 구성될까요?</h2>
<p>실제로 <strong>Terminal</strong> 에서 커맨드를 사용해보기 전에 간단하게 커맨드가 어떻게 구성되는지 공부해보겠습니다. 언제나 이렇게 기초적인 것들은 재미가 없지만 그래도 기본기가 중요하니까요 ㅎㅎ</p>
<h3 id="commands-의-3가지-종류">Commands 의 3가지 종류</h3>
<p>커맨드에는 크게 3 가지 종류가 있습니다.</p>
<ul>
<li>커맨드 자체만으로 동작할 수 있는 경우</li>
<li>커맨드 외에 다른 무언가와 함께 동작할 수 있는 경우</li>
<li>커맨드가 추가 옵션과 함께 다른 동작을 수행할 수 있는 경우</li>
</ul>
<p>그동안 복잡해만 보였던 커맨드들도 결국 다 이 3 가지 종류 중에 하나일 뿐입니다. 그러니까 너무 어렵게 생각할 필요가 없어요~</p>
<h3 id="syntax-of-commands">Syntax of Commands</h3>
<p>그리고 이런 커맨드들은 다음과 같은 규칙을 따릅니다.</p>
<pre><code class="language-console" data-lang="console">Command (-option) (something)
</code></pre><p>조금 전 읽었던 3 가지 종류의 커맨드를 모두 이런 형태로 사용할 수가 있습니다. 단 <strong>option</strong> 과 <strong>something</strong> 모두 입력해야 할 경우에는 순서가 중요하고, 그렇지 않은 경우 커맨드에 따라 <code>-option</code> 이나 <code>something</code> 을 생략할 수 있습니다.</p>
<hr>
<h2 id="기본적인-커맨드-알아보기">기본적인 커맨드 알아보기</h2>
<h3 id="whoami">whoami</h3>
<p><strong>Terminal</strong> 을 실행하고 제일 먼저 우리가 사용하는 컴퓨터의 사용자가 누군지 알아볼게요. <code>whoami</code> 를 입력하면 현재 컴퓨터의 사용자를 확인할 수 있습니다.</p>
<pre><code class="language-console" data-lang="console">$ whoami
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92347092-d17f4500-f109-11ea-84c2-668b516ca612.png" alt="whoami 결과"></p>
<p>사용자명이 잘 뜨네요 ㅎㅎ <code>whoami</code> 커맨드는 다른 옵션이나 추가정보가 없어도 혼자서 작동할 수 있는 커맨드라는 것을 알 수 있어요.</p>
<h3 id="pwd">pwd</h3>
<p>다음으로는 우리의 현재 위치한 폴더의 경로를 알아보겠습니다. <code>pwd</code> 를 입력해보세요.</p>
<pre><code class="language-console" data-lang="console">$ pwd
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92347721-efe64000-f10b-11ea-8149-e490b7325a8d.png" alt="pwd 결과"></p>
<p>현재 저는 <code>/Users/kas</code> 라는 위치에 있어요. 그래도 나름 <strong>Terminal</strong> 을 몇 개월간 사용해왔는데 이 명령어는 잘 쓰지 않게 되더라고요. 굳이 이 명령어가 없어도 <strong>iTerm2</strong> 에서 status bar 설정을 통해 내 위치가 계속 표시되게 할 수 있어서 그런가봐요.</p>
<h3 id="ls">ls</h3>
<p>그리고 마지막으로 <code>ls</code> 커맨드 사용해 현재 내가 위치한 곳에 있는 파일 및 폴더 등을 확인할 수 있습니다.</p>
<pre><code class="language-console" data-lang="console">$ ls
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92347971-8c104700-f10c-11ea-8f76-5837da00a8d9.png" alt="ls 결과"></p>
<p>하지만 이 방식으로는 <strong>숨겨진 폴더 및 파일</strong>을 확인할 수 없는데요. 이 때 사용할 수 있는 명령어로는 <code>ls -a</code> 가 있습니다. <code>-a</code> 처럼 <code>-</code> 가 붙는 경우는 커맨드에 일종의 옵션을 부여했다라고 생각하면 됩니다. 여기서는  All Files 를 의미하는 a 옵션을 주었기 때문에 숨김파일도 볼 수 있다라고 생각하면 좋을 것 같아요.</p>
<pre><code class="language-console" data-lang="console">$ ls -a
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92348213-5e77cd80-f10d-11ea-986c-2971722fb5f9.png" alt="ls -a 결과"></p>
<p>이전보다 훨씬 뭐가 많아졌죠?? 일반적인 사용자들이 함부로 건들면 시스템이 꼬일 수도 있는 파일들이라 이렇게 숨겨져있는거에요. 우리 눈에만 보이지 않았을 뿐 사실 보이는 것 보다 더 많은 파일들이 숨어있답니다.</p>
<h3 id="date">date</h3>
<p>이제 오늘 날짜를 확인해 볼게요. <code>date</code> 라고 입력해보세요.</p>
<pre><code class="language-console" data-lang="console">$ date
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92348414-042b3c80-f10e-11ea-9661-3e855c8dc565.png" alt="date 결과"></p>
<p>간단하면서도 유용한 명령어에요 ㅎㅎ</p>
<h3 id="cal">cal</h3>
<p><strong>캘린더</strong>를 <strong>확인</strong>하는 방법도 있습니다. <code>cal</code> 커맨드를 입력해보세요. 현재 날짜가 속한 달의 캘린더를 확인할 수 있습니다.</p>
<pre><code class="language-console" data-lang="console">$ cal
</code></pre><p>이번 달이 아니라 원하는 특정 월의 캘린더를 확인하고 싶다면 <code>cal</code> 커맨드에 이어 월, 연도 순으로 입력하면 됩니다. 처음으로 옵션이 아닌 다른 값을 커맨드와 함께 입력했어요. 이게 우리가 위해서 보았었던 <code>something</code> 입니다.</p>
<pre><code class="language-console" data-lang="console">$ cal 09 2020
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92349902-5e2e0100-f112-11ea-813d-ae3cfba1d5e8.png" alt="cal month"></p>
<p><strong>연도만 입력</strong>하면 해당 년에 속하는 12개월치 캘린더가 출력됩니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92349905-5f5f2e00-f112-11ea-8f22-26dd7c1200a1.png" alt="cal year"></p>
<h3 id="echo">echo</h3>
<p>우리가 프로그래밍을 배울 때 보통 <strong>&ldquo;Hello World&rdquo;</strong> 를 어떻게 출력하는지 부터 배우잖아요? <strong>Terminal</strong> 에서도 <strong>&ldquo;hello&rdquo;</strong> 를 한번 출력해볼게요.</p>
<pre><code class="language-console" data-lang="console">$ echo &quot;hello&quot;
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/92348497-3d63ac80-f10e-11ea-933e-03a441eefa05.png" alt="echo 결과"></p>
<p><code>echo</code> 는 일단 대부분의 프로그래밍 언어에서 사용하는 <code>print</code> 에 대응하는 커맨드라고 생각하면 좋을 것 같아요.</p>
<h3 id="say">say</h3>
<p>거의 사용할 일은 없지만 <code>say</code> 라는 커맨드도 있어요. 커맨드 뒤에 입력되는 글을 소리내서 읽어줍니다.</p>
<pre><code class="language-console" data-lang="console">$ say &quot;hello there&quot;
</code></pre><p>여러분 사용하는 컴퓨터의 목소리를 들어본 적이 있었나요? ㅋㅋㅋ Siri 말고 또 다른 친구가 있었어요. <del>이중인격?</del></p>
<p>이렇게 <strong>Terminal</strong> 에서 커맨드를 사용하는데 있어 알아두면 유용하게 사용할 수 있을만한 내용들을 공부해보았습니다. 마지막으로 배운 내용들을 한눈에 살펴볼 수 있도록 정리하고 포스팅 마칠게요. 오늘도 읽느라 수고 많으셨습니다!</p>
<hr>
<h2 id="wrap-up">Wrap Up</h2>
<table>
<thead>
<tr>
<th>Role</th>
<th>Shortcut</th>
</tr>
</thead>
<tbody>
<tr>
<td>현재 사용자명 확인하기</td>
<td>whoami</td>
</tr>
<tr>
<td>현재 디렉토리 확인하기</td>
<td>pwd</td>
</tr>
<tr>
<td>현재 디렉토리 내의 파일 및 폴더 확인하기</td>
<td>ls</td>
</tr>
<tr>
<td>현재 디렉토리 내의 숨김파일 및 폴더까지 확인하기</td>
<td>ls -a</td>
</tr>
<tr>
<td>현재 날짜 및 시간 확인하기</td>
<td>date</td>
</tr>
<tr>
<td>현재 날짜 기준으로 캘린더 확인하기</td>
<td>cal</td>
</tr>
<tr>
<td>터미널에서 문자 출력하기</td>
<td>echo</td>
</tr>
<tr>
<td>문자를 소리내서 읽게하기</td>
<td>say</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Vim - 코드블럭에 Swift Syntax 적용하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200907-vim-applying-swfit-syntax-in-code-block/</link>
            <pubDate>Mon, 07 Sep 2020 02:46:53 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200907-vim-applying-swfit-syntax-in-code-block/</guid>
            <description>Intro 그래도 명색이 iOS 개발자인데 여태 Vim 을 사용할 때 Swift Syntax Highlighting 없이 글을 쓰고 있었어요 ㅎㅎ 그래서 오늘은 Vim 에 Swift Syntax 를 적용할 수 있는 방법을 공부해볼까 합니다. Plugin 하나만 설치해주면 끝나는거라 쉽게 해결할 수 있을 것 같아요.
 Prerequisite 이번 포스팅에서 Plugin 을 설치하는 과정은 Vundle 로 진행되므로 만약 Vundle 에 익숙하지 않다면 Vim - Vundle 및 Markdown Plugin 설치하기 포스팅을 먼저 참고해주세요.
 swift.vim 설치하기 Swift Syntax 를 적용하기 위해서는 swift.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>그래도 명색이 iOS 개발자인데 여태 <strong>Vim</strong> 을 사용할 때 <strong>Swift Syntax Highlighting</strong> 없이 글을 쓰고 있었어요 ㅎㅎ 그래서 오늘은 <strong>Vim</strong> 에 <strong>Swift Syntax</strong> 를 적용할 수 있는 방법을 공부해볼까 합니다. <strong>Plugin</strong> 하나만 설치해주면 끝나는거라 쉽게 해결할 수 있을 것 같아요.</p>
<hr>
<h2 id="prerequisite">Prerequisite</h2>
<p>이번 포스팅에서 <strong>Plugin</strong> 을 설치하는 과정은 <strong>Vundle</strong> 로 진행되므로 만약 <strong>Vundle</strong> 에 익숙하지 않다면 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim - Vundle 및 Markdown Plugin 설치하기</a> 포스팅을 먼저 참고해주세요.</p>
<hr>
<h2 id="swiftvim-설치하기">swift.vim 설치하기</h2>
<p><strong>Swift Syntax</strong> 를 적용하기 위해서는 <strong><a href="https://vimawesome.com/plugin/swift-vim-red">swift.vim</a></strong> Plugin 을 설치해야 합니다. <code>.vimrc</code> 파일에 <code>Plugin 'keith/swift.vim'</code> 를 입력하고 설치를 진행하도록 하겠습니다.</p>
<pre><code class="language-console" data-lang="console">Plugin 'keith/swift.vim'
</code></pre><p>설치를 끝내고 기존에 작성했던 포스팅 중 <strong>Swift Syntax</strong> 를 사용한 글에 다시 들어가보니 깔끔하게 적용되는 모습이네요. 오늘은 별다른 우여곡절없이 성공한 것 같아 기쁩니다 ㅎㅎㅎ</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92331705-98b48100-f0b3-11ea-9e26-fd6adeb2a126.png" alt="Swift Syntax 가 적용된 모습"></p>
<p>확실히 <strong>Syntax</strong> 가 적용되었을 때랑 아닌 경우는 가독성의 차이가 많이나는 것 같아요. 그러니까 저처럼 <strong>Vim</strong> 으로 블로그를 작성한다거나 하는 상황이 아니더라도 <strong>iOS</strong> 를 공부하고 있다면 미리 설치해 놓는 것을 추천할게요~</p>
]]></content>
        </item>
        
        <item>
            <title>Hugo - 블로그 Naver Search Advisor 에 등록하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200906-hugo-register-in-naver-search-advisor/</link>
            <pubDate>Sun, 06 Sep 2020 13:09:05 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200906-hugo-register-in-naver-search-advisor/</guid>
            <description>Intro 이번 포스팅은 블로그 검색 등록하기 시리즈 2회분 Naver Search Advisor 입니다. 전체적인 흐름은 Google 에 등록할 때와 비슷하니까 이전 포스팅에서 넘어온 분들은 진행이 조금 더 수월할 것 같아요. 그럼 바로 시작할게요.
 Naver Search Advisor Naver Search Advisor 에 접속합니다. 다음과 같은 화면이 보이네요.
스크롤을 조금 아래로 내려 웹마스터 도구 사용하기 버튼을 눌러주세요.
이용동의 화면은 언제나처럼 읽지 않고 동의버튼을 눌러주고요 ㅋㅋㅋ 이거 읽는 분 손?
다음 화면에서는 내 블로그 주소를 입력하고 검색창 가장 우측에(x 표시 옆) 다음으로 넘어가기 같지 않은 버튼을 눌러주세요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>이번 포스팅은 블로그 검색 등록하기 시리즈 2회분 <strong>Naver Search Advisor</strong> 입니다. 전체적인 흐름은 Google 에 등록할 때와 비슷하니까 이전 포스팅에서 넘어온 분들은 진행이 조금 더 수월할 것 같아요. 그럼 바로 시작할게요.</p>
<hr>
<h2 id="naver-search-advisor">Naver Search Advisor</h2>
<p><a href="https://searchadvisor.naver.com">Naver Search Advisor</a> 에 접속합니다. 다음과 같은 화면이 보이네요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307732-65022a00-efd3-11ea-920e-a781ac42a581.png" alt="Naver Search Advisor 대문"></p>
<p>스크롤을 조금 아래로 내려 <strong>웹마스터 도구 사용하기</strong> 버튼을 눌러주세요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307797-d641dd00-efd3-11ea-8a32-994af1480197.png" alt="웹마스터 도구 사용하기 버튼"></p>
<p>이용동의 화면은 언제나처럼 읽지 않고 동의버튼을 눌러주고요 ㅋㅋㅋ <del>이거 읽는 분 손?</del></p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307850-405a8200-efd4-11ea-8ec4-ba22b13728ae.png" alt="이용동의 화면"></p>
<p>다음 화면에서는 내 블로그 주소를 입력하고 검색창 가장 우측에(x 표시 옆) 다음으로 넘어가기 같지 않은 버튼을 눌러주세요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307851-418baf00-efd4-11ea-8d1b-a67b4f472a5b.png" alt="블로그 주소 입력화면"></p>
<p>조금 전 Google 에 등록했을 때처럼 Naver 도 사이트 소유확인을 해야합니다. <strong>HTML 확인 파일</strong> 을 눌러 파일을 다운로드하고 <strong>public</strong> 폴더에 넣어주세요. 그리고 블로그 재발행까지 해줄게요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307852-43557280-efd4-11ea-952e-1a0862aff2bf.png" alt="사이트 소유확인"></p>
<p>이제 소유확인을 눌러주면 네이버 검색엔진 등록이 완료됩니다. 다만 아직 한가지 더 <strong>sitemap</strong> 을 제출해줘야 하는데요. 등록된 사이트 명을 눌러 <strong>사이트 관리</strong> 로 진입하고 좌측의 <strong>요청</strong> 카테고리에서 <strong>사이트맵 제출</strong> 을 눌러줍니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92308338-db089000-efd7-11ea-9a7f-391361d9c046.png" alt="Naver 사이트맵 제출"></p>
<p>Hugo 블로그는 기본적으로 <code>sitemap.xml</code> 파일을 가지고 있으므로 그냥 주소를 입력하고 추가하면 제출이 완료됩니다.</p>
<hr>
<p>이렇게 Naver 검색엔진 등록을 마쳤습니다. 몇 가지 해결해야 할 문제가 남아있지만 일단 오늘은 이것으로 포스팅을 마치겠습니다.</p>
]]></content>
        </item>
        
        <item>
            <title>Vim - Normal Mode 에서 자동으로 영문전환하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200904-vim-switching-language-inputs/</link>
            <pubDate>Fri, 04 Sep 2020 11:32:51 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200904-vim-switching-language-inputs/</guid>
            <description>Intro 주력 Text Editor 로 Vim 을 사용하면서 매일 마주치는 문제점 하나가 바로 Insert Mode 에서 한글을 작성하다 Normal Mode 로 돌아오면 다시 영문으로 전환해주지 않는 이상 어떤 커맨드도 먹히지 않는다는 것 이었습니다. 제 경우에는 블로그 글을 Vim 에서 작성하고 있고, 글을 쓸 때 한글의 비중이 압도적으로 높다보니 Insert Mode 에서 Normal Mode 로 돌아올 때마다 항상 언어상태를 확인해줘야하고 이것은 Work Flow 에 치명적인 영향을 줘서 생산성을 떨어뜨리는 결과를 낳게되더라고요.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>주력 Text Editor 로 <strong>Vim</strong> 을 사용하면서 매일 마주치는 문제점 하나가 바로 <strong>Insert Mode</strong> 에서 한글을 작성하다 <strong>Normal Mode</strong> 로 돌아오면 다시 영문으로 전환해주지 않는 이상 어떤 커맨드도 먹히지 않는다는 것 이었습니다. 제 경우에는 블로그 글을 <strong>Vim</strong> 에서 작성하고 있고, 글을 쓸 때 한글의 비중이 압도적으로 높다보니 <strong>Insert Mode</strong> 에서 <strong>Normal Mode</strong> 로 돌아올 때마다 항상 언어상태를 확인해줘야하고 이것은 Work Flow 에 치명적인 영향을 줘서 생산성을 떨어뜨리는 결과를 낳게되더라고요.</p>
<p>당연히 <strong>Vim</strong> 에서 한글을 작성하시는 많은 분들이 비슷한 고충을 겪고 있고, 이에 대한 해결법이 많이 나와있는 상황이기는 합니다. 그 중 대표적인 해결법이 <strong><a href="https://www.hammerspoon.org">Hammerspoon</a></strong> 이라는 Automation 프로그램을 이용하는 방법인데요. 이것에 관한 글은 다른 여러 블로그에 자세히 나와있기도 하고 저는 제가 이미 사용하고 있는 <strong>Keyboard Maestro</strong> 라는 Automation 프로그램이 있기 때문에 혹시 Hammerspoon 으로 해결하고 싶은 분들은 다른 블로그 글을 찾아보시기 바랍니다.</p>
<p>이번 포스팅에서는 <strong><a href="https://www.keyboardmaestro.com">Keyboard Maestro</a></strong> 로 해결해보도록 하겠습니다. 다만 조금 가격이 나가는 <strong>유료 프로그램</strong>이므로 글을 읽기 전 구매의사를 반드시 결정하시기 바랍니다. 정말 좋은 프로그램이니까 저는 추천하겠습니다 ㅎ</p>
<hr>
<h2 id="keyboard-maestro-소개">Keyboard Maestro 소개</h2>
<p><strong><a href="https://www.keyboardmaestro.com">Keyboard Maestro</a></strong> 는 일종의 Automation 프로그램 입니다. 상당히 잘 만들어진 프로그램으로 여러가지 귀찮은 일들을 자동화할 수 있지만 여느 Automation 프로그램들만큼 난이도가 조금 있어 저는 기본적인 매크로들만 사용하고 있습니다. 그래도 돈 값은 충분히 하고 있는 것 같아요 ㅎㅎ 오늘 Terminal 에서 작동하는 자동 영문전환 스크립트를 작성하고나면 조금 더 돈값을 하게되겠군요 ㅋㅋㅋ 그럼 바로 세팅해볼게요.</p>
<hr>
<h2 id="esc-to-영문전환">ESC to 영문전환</h2>
<p><strong>Keyboard Maestro</strong> 는 이렇게 생겼습니다. <code>+</code> 버튼을 눌러 폴더를 하나 추가하고 Terminal 에서는 <code>ESC</code> 키가 영문전환을 함께 수행하도록 세팅해볼게요. 이런 방식으로 세팅을 하면 특정 프로그램에서만 Automation 을 작동하게 할 수 있습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92194914-b5c83480-eea6-11ea-8939-3a854203deb0.png" alt="Keyboard Maestro 폴더 세팅"></p>
<p>다음에는 <code>+</code> 버튼을 눌러 새로운 Macro 를 추가합니다. 저는 매크로 이름을 <code>ESC to English</code> 라고 지었어요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92194918-b6f96180-eea6-11ea-8d04-d3f9525cdac9.png" alt="Macro 추가"></p>
<p>Macro 가 Trigger 될 조건을 <strong>Hot Key Trigger</strong> 로 설정하고 <code>ESC</code> 를 Trigger Key 로 지정합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92194923-b8c32500-eea6-11ea-8d31-2475317e4bb9.png" alt="Trigger Key 추가"></p>
<p>이제 <strong>Action</strong> 을 만들어주면 되는데요. <strong>Set Keyboard Layout</strong> 을 찾아 추가합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92195344-b0b7b500-eea7-11ea-96c4-a316d168b814.png" alt="Keyboard Layout Action 추가"></p>
<p>다 그런 것인지는 모르겠지만 저는 기본 값이 한글로 변경되는 것으로 되어있어 영문으로 설정되도록 바꾸었고, 추가로 <strong>Type a Key Stroke</strong> 를 하나 더 추가했습니다. 추가 Key Stroke 를 설정해주지 않으면 <code>ESC</code> 키가 영문전환만 하게되고 본연의 역할을 잊게됩니다. 그러니까 꼭 추가해야해요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92195488-09874d80-eea8-11ea-894b-b9a23e460352.png" alt="영문설정 및 ESC 추가"></p>
<p>이렇게 설정이 모두 끝났습니다. Keyboard Maestro 를 사용하니 정말 간단하게 해결되었어요 ㅎㅎㅎ <del>Keyboard Maestro 두번 쓰세요</del></p>
<p>이제 당연히 잘되겠지하고 자신만만하게 <strong>Vim</strong> 에서 테스트를 해보았으나 전혀 작동을 하지 않았습니다. 작동을 하지않을 이유가 없는데 왜 이럴까하면서 10분 정도를 헤맸을까 프로그램 설정이 잘못되었다는 것을 알았는데 제가 사용하는 프로그램인 <strong>iTerm2</strong> 가 아닌 <strong>Terminal</strong> 로 설정해 놓았더라고요. <strong>iTerm2</strong> 로 변경하니 예상했던대로 잘 작동되었습니다. 여러분은 이런 실수하지 마세요~</p>
]]></content>
        </item>
        
        <item>
            <title>Hugo - 블로그 Google Search Console 에 등록하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200903-hugo-register-in-google-search-console/</link>
            <pubDate>Thu, 03 Sep 2020 15:07:41 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200903-hugo-register-in-google-search-console/</guid>
            <description>Intro 우리가 블로그를 작성하는 이유가 여러가지 있겠지만 그 중에 하나는 내가 아는 정보들을 다른 사람들과 공유하고자 하는 목적이 있잖아요. 그래서 오늘은 Hugo 로 블로그를 관리할 때 반드시 설정해주어야 할 부분 중 하나인 SEO(Search Engine Optimization) 라 불리는 검색 엔진 최적화에 대해 함께 공부해보도록 하겠습니다. Tistory 나 Naver 같은 블로그를 사용하면 이런 처리들을 우리가 직접할 필요가 없어서 생소할 수도 있는 부분이에요. 하지만 이 곳들도 우리가 직접하지 않을 뿐 뒤에서는 같은 처리를 해주고 있답니다.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>우리가 블로그를 작성하는 이유가 여러가지 있겠지만 그 중에 하나는 내가 아는 정보들을 다른 사람들과 공유하고자 하는 목적이 있잖아요. 그래서 오늘은 Hugo 로 블로그를 관리할 때 반드시 설정해주어야 할 부분 중 하나인 <strong>SEO(Search Engine Optimization)</strong> 라 불리는 <strong>검색 엔진 최적화</strong>에 대해 함께 공부해보도록 하겠습니다. Tistory 나 Naver 같은 블로그를 사용하면 이런 처리들을 우리가 직접할 필요가 없어서 생소할 수도 있는 부분이에요. 하지만 이 곳들도 우리가 직접하지 않을 뿐 뒤에서는 같은 처리를 해주고 있답니다.</p>
<p>그런데 <strong>Hugo</strong> 블로그는 모든 서비스의 주체자가 우리잖아요? 이게 개인의 취향대로 모든 것을 커스터마이징 할 수 있다는 장점이 있기도 하지만 그만큼 기업에서 서비스하는 블로그를 사용할 때보다 신경써야할 것이 더 많다는 뜻이기도 합니다. 우리가 블로그 페이지들을 생성하고 그것을 웹페이지로 만든다고해도 따로 검색엔진 서비스에 블로그 주소를 등록하지 않으면 아무리 검색해도 우리 블로그를 찾을 수가 없습니다.</p>
<p>이번 포스팅은 총 3회 분으로 연재될 예정이며</p>
<ul>
<li>Google Search Console</li>
<li>Naver Search Advisor</li>
<li>다음검색 등록</li>
</ul>
<p>순으로 포스팅 될 계획입니다.</p>
<hr>
<h2 id="google-seo">Google SEO</h2>
<p>가장 먼저 Google 에 블로그 주소를 등록하는 절차를 진행해보도록 할게요. 구글에 주소를 등록하기 위해서는 <strong>Google Analytics</strong> 와 <strong>Google Search Console</strong> 두 곳에서 작업이 필요합니다.</p>
<h3 id="google-analytics-등록하기">Google Analytics 등록하기</h3>
<p><a href="http://analytics.google.com">Google Analytics</a> 에 접속해 볼게요. 일단 등록을 하기 전에 Analytics 가 어떤 역할을 하는지 간단하게 알아봅시다. 우리가 Analytics 에 등록하는 이유는 단순히 검색에 노출되기 위해서 그런 것이 아니에요. Analytics 에 등록함으로써 다음과 같은 유용한 정보들을 확인할 수 있고, 이에 따라 더 전략적으로 블로그를 운영할 수 있게 됩니다.</p>
<ul>
<li>블로그 방문자 수</li>
<li>블로그 방문자들의 연령대와 성별</li>
<li>블로그 방문 시 사용한 디바이스</li>
<li>블로그를  찾아 들어오게된 경로</li>
<li>내 블로그에서 인기있는 페이지</li>
</ul>
<p>기본적으로 파악할 수 있는 정보들은 이정도가 있고 당연히 이외에도 훨씬 많은 정보를 확인할 수가 있습니다. 이제 등록을 하기 위해 <strong>admin</strong> 메뉴를 클릭합니다. 저는 이미 Tistory 블로그를 운영하고 있고 이 블로그가 Google Analytics 에 등록되어 있어 처음 시작하는 분들과는 보이는 화면이 조금 다를 수 있습니다. 그래도 전체적인 흐름은 동일하니까 잘 따라와주세요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92192211-772f7b80-eea0-11ea-8e6d-b5bf34dce5db.png" alt="Admin 메뉴"></p>
<p>다음으로 <strong>Create Property</strong> 버튼을 누르고 내 블로그 정보를 기입하여 Property 를 생성합니다. 생성이 되면 <strong>Tracking ID</strong>(UA-123456789-1 형식) 을 확인할 수 있고 이 ID 를 우리 블로그에 입력해야 합니다.</p>
<p>이제 Hugo 구성 파일 중 <code>config.toml</code> 파일을 열어 <code>googleAnalytics</code> 변수를 생성하고 ID 를 입력합니다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"><span style="color:#a6e22e">googleAnalytics</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#a6e22e">UA</span><span style="color:#ae81ff">-123456789-1</span>
</code></pre></div><p>위 ID 는 예시이므로 작동하지 않고 여러분이 발급받은 <strong>Tracking ID</strong> 를 입력해주세요. 입력이 완료되면 당연히 블로그를 재발행 해주어야 합니다. 작동 확인 방법으로는 <strong>Google Analytics</strong> 는 실시간으로 접속자를 감지하므로 이후에 내가 블로그에 접속하더라도 접속자 숫자가 올라가는 모습을 확인할 수 있습니다. <del>쩌는데??</del></p>
<h3 id="google-search-console-설정하기">Google Search Console 설정하기</h3>
<p>이제 Google 검색에 실제로 노출될 수 있도록 등록하는 작업을 진행해 보겠습니다. <a href="https://search.google.com/search-console/about?hl=ko">Google Search Console</a> 에 접속하고 <strong>시작하기</strong> 버튼을 눌러주세요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307351-c96fba00-efd0-11ea-8d51-1877f5a932ec.png" alt="Google Search Console 입장화면"></p>
<p>이제 아래와 같은 화면이 보일텐데요. 이곳에서 <strong>Add property</strong> 버튼을 눌러주세요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307402-2b302400-efd1-11ea-8270-5b4bc51ed755.png" alt="Add property 버튼"></p>
<p>다음으로 나타나는 화면에서는 <strong>URL Prefix</strong> 를 선택하고 내 블로그 주소를 입력합니다. 이제 <strong>html</strong> 파일을 다운로드 받아 Hugo 구성파일 중 public 폴더에 넣어준 뒤 블로그를 재발행합니다. 수분 내로 소유권 확인이 가능합니다.</p>
<p>마지막으로 <code>sitemap.xml</code> 파일을 제출해주면 끝입니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/92307571-62530500-efd2-11ea-8273-8ce3049d89c0.png" alt="sitemap.xml 제출화면"></p>
<p>좌측 메뉴에서 Sitemaps 를 선택하면 나타나는 주소창에 <code>sitemap.xml</code> 을 입력해주세요. 내 Hugo 디렉토리의 <strong>public</strong> 폴더 안에 기본적으로 들어있는 파일이므로 문제 없이 등록이 됩니다. 다만 이게 블로그 테마에 따라 없는 경우가 있을 수도 있다고 하는데 없을 경우에는 직접 작성을 해줘야 한다고 하네요. 저는 있었으므로 직접 작성하는 방법은 패스하도록 할게요.</p>
]]></content>
        </item>
        
        <item>
            <title>Vim Plugin - Vim Airline</title>
            <link>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-vim-airline/</link>
            <pubDate>Wed, 02 Sep 2020 22:07:46 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-vim-airline/</guid>
            <description>또 새로운 Vim Plugin 을 소개해드리려고 왔어요 ㅎㅎㅎ 요즘 Vim 의 매력에 푹 빠져서 열심히 연습 중이고 기본적인 사용법들도 점점 손에 익어가니까 키보드를 무릎 위에 올려놓고 글을 쓰는 맛이 있습니다. 그래서 오늘 소개할 Plugin 은 Vim-Airline 이라는 플러그인이에요. Vim 아래쪽에 Status Bar 를 좀 더 보기 좋게 만들어주고 윗쪽에 Tab Bar 와 비슷한 Buffer 라는 것을 만들어서 우리가 이번 작업에서 열어본 파일을 기억하여 파일 간의 이동을 쉽게할 수 있도록 도와줍니다. 설치해서 손해볼게 없는 Plugin 인 것 같으니까 바로 설치해보도록 할게요.</description>
            <content type="html"><![CDATA[<p>또 새로운 <strong>Vim Plugin</strong> 을 소개해드리려고 왔어요 ㅎㅎㅎ 요즘 <strong>Vim</strong> 의 매력에 푹 빠져서 열심히 연습 중이고 기본적인 사용법들도 점점 손에 익어가니까 키보드를 무릎 위에 올려놓고 글을 쓰는 맛이 있습니다. 그래서 오늘 소개할 Plugin 은 <strong>Vim-Airline</strong> 이라는 플러그인이에요. Vim 아래쪽에 <strong>Status Bar</strong> 를 좀 더 보기 좋게 만들어주고 윗쪽에 Tab Bar 와 비슷한 <strong>Buffer</strong> 라는 것을 만들어서 우리가 이번 작업에서 열어본 파일을 기억하여 파일 간의 이동을 쉽게할 수 있도록 도와줍니다. 설치해서 손해볼게 없는 Plugin 인 것 같으니까 바로 설치해보도록 할게요.</p>
<p>![<a href="https://raw.githubusercontent.com/wiki/vim-airline/vim-airline/screenshots/demo.gif">Vim-Airline</a></p>
<hr>
<h3 id="vim-airline-설치하기">Vim-Airline 설치하기</h3>
<p>먼저 <a href="https://github.com/vim-airline/vim-airline">Vim-Airline Github</a> 에 들어가 README 파일을 읽어보고 <strong>Vundle</strong> 로 Plugin 을 설치하도록 하겠습니다. Vundle 을 사용한 설치법은 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim: Vundle 및 Markdown Plugin 설치하기</a> 포스팅을 참고해주세요.</p>
<p>첫번째 Plugin 은 Airline 그 자체를 설치하는 것이고, 두번째 Plugin 은 이것의 테마들을 설치하는거에요. 나중에 테마가 바꾸고 싶을 수 있으니 오늘 둘 다 설치를 해놓긴 하겠지만 테마를 바꾸는 방법은 다음에 알아보도록 하겠습니다.</p>
<pre><code class="language-console" data-lang="console">Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
</code></pre><p>설치가 끝났다면 <code>.vimrc</code> 파일 아래쪽에 다음 코드도 읿력해주세요. 기본적으로 위쪽 Tab Bar 기능은 비활성화 상태이기 때문에 이것을 활성화 해주는 코드입니다. 혹시 나는 아래쪽 Status Bar 만 사용하는게 더 깔끔하고 좋다하면 이 코드는 그냥 스킵해주세요.</p>
<pre><code class="language-console" data-lang="console">let g:airline#extensions#tabline#enabled = 1
</code></pre><p>이제 <strong>Vim</strong> 을 실행해서 어떻게 바뀌었을지 확인해보도록 하겠습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91990383-9f1dc280-ed6c-11ea-9c4e-fbc90578a5ae.png" alt="Vim 실행화면"></p>
<p>오!! 뭔가 확실히 화면이 더 풍성해졌어요. Vim 의 현재 모드와 Git, 파일명 등등 많은 정보를 아랫쪽 Status Bar 에서 확인할 수가 있네요. 그리고 윗쪽에도 Tab Bar 가 추가된 모습을 볼 수 있죠? 이제 이전에 우리가 함께 설치했던 <strong>NERDTree</strong> 를 사용해 새로운 파일을 하나 열어보겠습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91990390-a0e78600-ed6c-11ea-8920-099a40289b65.png" alt="Airline TabBar"></p>
<p>이렇게 어떤 파일을 열고나면 Tab Bar 에 그 기록이 남게되고 <code>:</code> 를 눌러 커맨드 모드에 진입해서 <code>bn</code> 과 <code>bp</code> 커맨드를 사용해 파일간의 이동이 가능합니다. 이제 정말 외부적으로는 <strong>VSCode</strong> 에서 제가 자주 사용하던 기능들이 <strong>Vim</strong> 으로 들어왔습니다. 이렇게 가볍운 에디터가 Plugin 을 통해서 이 정도까지 강력한 기능들을 탑재할 수 있다는 것도 정말 놀랍네요.</p>
<p>그럼 다음에 또 봴게요!!</p>
]]></content>
        </item>
        
        <item>
            <title>Vim Plugin - NERDTree</title>
            <link>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-nerdtree/</link>
            <pubDate>Wed, 02 Sep 2020 10:16:39 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200902-vim-plugin-nerdtree/</guid>
            <description>Vim 을 쓰다보니 또 VSCode 보다 불편한 점을 발견할 수 있었는데요. 바로 VSCode 에서 애용하던 File Navigattion System 이 없다는 것이었습니다. 바로 이미지 좌측에 보이는 저것이에요.
자주 여러 파일을 이동해야하는 경우에 Navigation System 이 없다는 이유만으로 자꾸 다시 VSCode 로 손이 가게 되더라고요. 그래서 Vim 에서는 해결방법이 없을지 찾아보다가 알게된 것이 바로 NERDTree 입니다. 바로 Vim 만의 파일탐색기 같은 것이에요. 제가 메인 텍스트 에디터로 Vim 을 사용하려는 이유 중 한가지가 작업을 할 때 Terminal 에서 키보드만으로 거의 모든 작업을 진행할 수 있다는 것인데요.</description>
            <content type="html"><![CDATA[<p><strong>Vim</strong> 을 쓰다보니 또 <strong>VSCode</strong> 보다 불편한 점을 발견할 수 있었는데요. 바로 <strong>VSCode</strong> 에서 애용하던 File Navigattion System 이 없다는 것이었습니다. 바로 이미지 좌측에 보이는 저것이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91921999-d60dbd00-ed07-11ea-93fd-df3014b279f6.png" alt="VSCode 화면"></p>
<p>자주 여러 파일을 이동해야하는 경우에 Navigation System 이 없다는 이유만으로 자꾸 다시 VSCode 로 손이 가게 되더라고요. 그래서 <strong>Vim</strong> 에서는 해결방법이 없을지 찾아보다가 알게된 것이 바로 <strong>NERDTree</strong> 입니다. 바로 <strong>Vim</strong> 만의 파일탐색기 같은 것이에요. 제가 메인 텍스트 에디터로 <strong>Vim</strong> 을 사용하려는 이유 중 한가지가 작업을 할 때 Terminal 에서 키보드만으로 거의 모든 작업을 진행할 수 있다는 것인데요. VSCode 를 사용하면 또 마우스를 사용해야 하다보면 여러가지 불편한 상황이 만들어졌습니다. <del>진정한 개발자는 마우스가 필요없는 것 아시죠?</del></p>
<p>아무튼 그래서 바로 NERDTree 를 설치하기로 했어요.</p>
<hr>
<h2 id="nerdtree-설치하기">NERDTree 설치하기</h2>
<p><strong>NERDTree</strong> 도 결국 일종의 Vim Plugin 이니까 <strong>Vundle</strong> 을 사용해서 간단하게 설치를 진행해보도록 하겠습니다. Vundle 설치가 익숙하지 않다면 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim: Vundle 및 Markdown Plugin 설치하기</a> 포스팅을 참고해주세요.</p>
<p>먼저 <strong>NERDTree</strong> 설치를 위해서 <a href="https://github.com/preservim/nerdtree">NERDTree Github</a> 에 들어갑니다. 우리는 Vundle 로 설치를 하기로 했으니까 README 에서 Vundle 로 설치하는 방법을 찾아볼게요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'preservim/nerdtree'
</code></pre><p>Vundle 도 계속 쓰다보니 Homebrew 만큼 편하고 좋은 툴인 것 같아요 ㅎㅎ 이렇게 설치도 끝났고 본격적으로 <strong>NERDTree</strong> 에 대해 함께 공부해보도록 할게요.</p>
<hr>
<h2 id="nerdtree-사용법-익히기">NERDTree 사용법 익히기</h2>
<p><strong>NERDTree</strong> 를 사용하기 위해서는 기본적으로 <strong>Vim</strong> 을 실행해야 합니다. <del>Vim Plugin 이니까 당연하지</del> Vim 을 실행했다면 <code>:</code> 을 눌러 커맨드 모드로 진입하고 <code>NERDTree</code> 를 입력해볼게요. 대소문자를 정확히 입력해야 합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91923144-94324600-ed0a-11ea-9886-2a7b86840744.png" alt="NERDTree 실행 모습"></p>
<p>오!! VSCode 에서 봤던 파일탐색기와 거의 비슷한게 생겼어요 ㅎㅎㅎ 파일 탐색은 화살표 키 또는 hjkl 로 가능합니다. 폴더나 파일을 열기 위해서는 <code>o</code> 키를 누르면 되고요. 파일을 열게되면 자동으로 커서가 파일로 옮겨지고 더 이상 <strong>NERDTree</strong> 에서 파일이동을 할 수가 없을텐데요. 이 때는 <code>Control + w + w</code> 를 눌러 창 간의 포커싱 이동이 가능합니다. 다시 돌아와서 <code>q</code> 를 눌러 창을 닫을 수도 있습니다. 이외에도 <code>?</code> 를 눌러 Bookmark 등 더 다양한 사용법을 확인해 볼 수 있습니다.</p>
<p>그리고 파일명을 바꾸거나 선택되어 있는 파일을 Finder 에서 확인하는 등의 다양한 옵션에 <code>m</code> 을 눌러서 접근할 수 있습니다. 이 중 원하는 옵션을 선택하거나 <code>esc</code> 키를 눌러서 종료해 주세요.</p>
<p>이 정도면 VSCode 의 파일탐색기를 어느정도 대체할 수 있을 것 같아요. 그럼 마지막으로 <strong>NERDTree</strong> 사용 시 쓸만한 단축키들을 정리하고 프스팅 마치도록 하겠습니다.</p>
<hr>
<h2 id="유용한-단축키-모음">유용한 단축키 모음</h2>
<h3 id="nerdtree-shortcuts">NERDTree Shortcuts</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Title</th>
<th style="text-align:center">Shortcuts</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">파일 및 폴더 열기</td>
<td style="text-align:center">o</td>
</tr>
<tr>
<td style="text-align:left">하위 폴더까지 전부 열기</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:left">미리보기 형식으로 열기</td>
<td style="text-align:center">p</td>
</tr>
<tr>
<td style="text-align:left">새로운 탭에서 파일 열기</td>
<td style="text-align:center">t</td>
</tr>
<tr>
<td style="text-align:left">가로 Split 으로 파일 열기</td>
<td style="text-align:center">i</td>
</tr>
<tr>
<td style="text-align:left">세로 Split 으로 파일 열기</td>
<td style="text-align:center">s</td>
</tr>
<tr>
<td style="text-align:left">메뉴 열기</td>
<td style="text-align:center">m</td>
</tr>
<tr>
<td style="text-align:left">NERDTree 줌, 줌아웃 하기</td>
<td style="text-align:center">A</td>
</tr>
<tr>
<td style="text-align:left">NERDTree 종료하기</td>
<td style="text-align:center">q</td>
</tr>
</tbody>
</table>
<h3 id="control-windows">Control Windows</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Title</th>
<th style="text-align:center">Shortcuts</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">창 순환하기</td>
<td style="text-align:center">ctrl + w + w</td>
</tr>
<tr>
<td style="text-align:left">왼쪽 창으로 이동하기</td>
<td style="text-align:center">ctrl + w + h</td>
</tr>
<tr>
<td style="text-align:left">오른쪽 창으로 이동하기</td>
<td style="text-align:center">ctrl + w + l</td>
</tr>
<tr>
<td style="text-align:left">윗쪽 창으로 이동하기</td>
<td style="text-align:center">ctrl + w + k</td>
</tr>
<tr>
<td style="text-align:left">아랫쪽 창으로 이동하기</td>
<td style="text-align:center">ctrl + w + j</td>
</tr>
<tr>
<td style="text-align:left">이전 창으로 이동하기</td>
<td style="text-align:center">ctrl + w + p</td>
</tr>
<tr>
<td style="text-align:left">창 종료하기</td>
<td style="text-align:center">ctrl + w + q</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Vim - 여러가지 유용한 설정 적용하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200831-vim-bacis-configurations/</link>
            <pubDate>Mon, 31 Aug 2020 21:45:33 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200831-vim-bacis-configurations/</guid>
            <description>오늘은 Vim 을 사용할 때 기본적으로 설정해두고 사용하면 좋을만한 간단면서도 유용한 설정들에 대해 공부해보도록 하겠습니다.
Vim 의 기본 설정은 macOS 기준 Home Directory 에 위치한 .vimrc 에서 설정할 수가 있습니다. 먼저 이 파일을 확인해보도록 할게요. cd 커맨드로 Home 으로 이동한 뒤에 이 파일이 존재하는지 확인해주세요. 혹시라도 이 파일이 존재하지 않는다면 그냥 만들어 주면 됩니다 ㅎㅎ 저는 처음에 이 파일이 없어서 직접 만들었어요.
이제 기본적으로 추가해 놓으면 좋을만한 설정들을 추가해보록 할게요.</description>
            <content type="html"><![CDATA[<p>오늘은 <strong>Vim</strong> 을 사용할 때 기본적으로 설정해두고 사용하면 좋을만한 간단면서도 유용한 설정들에 대해 공부해보도록 하겠습니다.</p>
<p><strong>Vim</strong> 의 기본 설정은 macOS 기준 Home Directory 에 위치한 <code>.vimrc</code> 에서 설정할 수가 있습니다. 먼저 이 파일을 확인해보도록 할게요. <code>cd</code> 커맨드로 Home 으로 이동한 뒤에 이 파일이 존재하는지 확인해주세요. 혹시라도 이 파일이 존재하지 않는다면 그냥 만들어 주면 됩니다 ㅎㅎ 저는 처음에 이 파일이 없어서 직접 만들었어요.</p>
<p>이제 기본적으로 추가해 놓으면 좋을만한 설정들을 추가해보록 할게요.</p>
<hr>
<h2 id="syntax-설정하기">Syntax 설정하기</h2>
<p>저만 그런지 모르겠지만 제 경우에는 <strong>Vim</strong> 에서 새로운 파일을 열 때마다 <strong>Syntax</strong> 의 기본설정이 <strong>off</strong> 로 되어있습니다. 저는 보통 Syntax 를 활성화 시켜놓고 사용하는 것을 선호해서 매번 <code>:syntax on</code> 커맨드를 통해 활성화 시켜줘야 했는데요. <code>.vimrc</code> 파일에서 설정을 바꿔주면 기본세팅을 Syntax On 으로 변경할 수 있습니다. 바로 입력해볼게요.</p>
<pre><code class="language-console" data-lang="console">syntax on
</code></pre><p>네 이게 전부입니다. 쉽죠? ㅎㅎ  이제 파일을 저장하고 나서부터 새롭게 여는 파일들은 <strong>Syntax</strong> 설정이 활성화된채로 열리게 됩니다.</p>
<hr>
<h2 id="numbering-설정하기">Numbering 설정하기</h2>
<p>보통 우리가 사용하는 IDE 프로그램들은 화면 좌측에 넘버링을 제공해서 우리가 총 몇 줄을 작성했는지 혹은 몇 번째 줄에서 작업하고 있는지 직관적으로 알 수 있게 되어있잖아요? <strong>Vim</strong> 에서도 당연히 지원하는 기능이며 간단하게 설정가능합니다. 그리고 참고로 현재 작성하는 코드들은 Vim 내의 Command mode 에서도 1회성으로 동일하게 사용할 수 있습니다.</p>
<pre><code class="language-console" data-lang="console">set number
</code></pre><p>코드를 입력하고 저장하면 이제 화면 좌측에서 넘버링을 확인할 수 있는데요. 이렇게 사용하는 것도 이전에는 확인할 수 없었던 넘버링을 확인할 수 있다는 점에서 충분히 좋긴하지만 <strong>Vim</strong> 을 사용하다보면 현재 줄을 기준으로 위 아래 특정 줄 수만큼 이동해야할 필요가 있는 경우가 많은데요. 내 커서가 있는 곳을 기준으로 위 아래로 각각 넘버링을 보여주는 기능도 지원합니다. 이렇게 글로는 이해가 조금 어렵지만 아래 스크린샷을 보면 한번에 무슨 뜻인지 알 수 있을거에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91720743-96918480-ebd2-11ea-9e07-b5259365de17.png" alt="Relative Numbering 이 적용된 화면"></p>
<p>어떤가요? <strong>Vim</strong> 을 쓸 때는 정말 유용할 것 같죠? 그럼 바로 설정해주도록 할게요.</p>
<pre><code class="language-console" data-lang="console">set number relativenumber
</code></pre><p>이제 저장하고 새로운 파일을 열어 커서를 움직여보면 좌측에 표시되는 숫자가 이전과는 다르게 유동적으로 변하게 되는 것을 확인할 수 있습니다.</p>
<p>오늘 포스팅은 평소보다 조금 짧은 느낌이지만 앞으로 꾸준히 <strong>Vim</strong> 을 사용하면서 발견하는 유용한 설정을 이곳에 지속적으로 기록하고 업데이트할 계획입니다.</p>
]]></content>
        </item>
        
        <item>
            <title>Vim - ColorScheme 적용 및 직접 색 변경하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200830-vim-appying-colorscheme-changing-backgroudn-colors/</link>
            <pubDate>Sun, 30 Aug 2020 02:36:53 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200830-vim-appying-colorscheme-changing-backgroudn-colors/</guid>
            <description>이번에는 Vim 에서 외부 테마를 다운로드 받아 적용하고 Syntax Highlighting 색상을 좀 더 이쁘게 변경해보도록 하겠습니다. 그래도 Terminal 을 통해 글을 쓰는데 최소한 어느정도는 이뻐야 글 쓸 맛이 더 나겠죠?? ㅋㅋㅋ 그런데 지금 제가 사용하는 Vim 의 상태는&amp;hellip;
이 모양입니다. 한 숨이 나옵니다&amp;hellip; 원색을 너무 많이 사용해서 그런건지 오히려 눈에 방해가 되는 그런 느낌도 들고요. 난 이제 그만 여기서 탈출해야겠어
그럼 본격적으로 설치해볼까요~
 테마 고르기 먼저 구글에서 Vim ColorScheme 을 검색해 여러분 스타일에 맞는 테마를 찾아보세요.</description>
            <content type="html"><![CDATA[<p>이번에는 Vim 에서 외부 테마를 다운로드 받아 적용하고 <strong>Syntax Highlighting</strong> 색상을 좀 더 이쁘게 변경해보도록 하겠습니다. 그래도 <strong>Terminal</strong> 을 통해 글을 쓰는데 최소한 어느정도는 이뻐야 글 쓸 맛이 더 나겠죠?? ㅋㅋㅋ 그런데 지금 제가 사용하는 <strong>Vim</strong> 의 상태는&hellip;</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91652991-484b8b00-ead7-11ea-8b82-a9b348495f11.png" alt="Colorcheme 적용 전"></p>
<p>이 모양입니다. 한 숨이 나옵니다&hellip; 원색을 너무 많이 사용해서 그런건지 오히려 눈에 방해가 되는 그런 느낌도 들고요. <del>난 이제 그만 여기서 탈출해야겠어</del></p>
<p>그럼 본격적으로 설치해볼까요~</p>
<hr>
<h2 id="테마-고르기">테마 고르기</h2>
<p>먼저 구글에서 Vim ColorScheme 을 검색해 여러분 스타일에 맞는 테마를 찾아보세요. 참고로 저는 <a href="https://github.com/sonph/onehalf">One Half Dark</a> 를 골랐어요. 오리지널 색상과 비교하면 훨씬 보기 편한 색인 것 같아요 ㅎㅎㅎ</p>
<p><img src="https://raw.githubusercontent.com/sonph/onehalf/master/screenshots/vim.png" alt="One Half Dark"></p>
<p>Colorscheme 설치는 <strong>Vundle</strong> 을 통한 <strong>Plugin</strong> 형식으로 설치를 할거에요. 혹시 Vundle 설치부터 진행해야 한다면 이전에 자세히 설명해놓은 <a href="https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/">Vim: Vundle 및 Markdown Plugin 설치하기</a> 포스트를 참고해주세요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'sonph/onehalf', {'rtp': 'vim/'}
</code></pre><p>Plugin 설치를 마쳤으면 <code>.vimrc</code> 파일에 추가적인 설정 코드를 입력합니다. 설치한 Plugin 을 colorscheme 으로 사용하겠다는 코드에요.</p>
<pre><code class="language-console" data-lang="console">colorscheme onehalfdark
let g:airline_theme = 'onehalfdark'
</code></pre><p>혹시 저와 같은 <strong>Colorscheme</strong> 을 설치하고 있다면 <code>onehalfdark</code> 대신 <code>onehalflight</code> 를 입력하는 것 만으로 밝은 테마를 사용할 수도 있습니다.</p>
<p>오~ 적용하고 나니 훨씬 깔끔해지고 눈에도 더 잘들어오는 느낌이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91652992-4aade500-ead7-11ea-98c9-292d31068cd6.png" alt="Colorscheme 적용 후"></p>
<p>이전보다는 훨씬 마음에 들긴하지만 회색으로 표현되는 글자가 배경화면이랑 비슷해서 눈에 잘 안들어오는 것 같아 추가로 배경색을 조금 더 어둡게하고 폰트는 밝게하고 싶어지네요. 당연히 어떻게해야하는지 몰라서 또 이것저것 찾아보며 공부했습니다 ㅎㅎ</p>
<p>그리고 그냥 느낌적으로 코드를 작성할 때 Colorscheme 이 먼저 적용되고 이후에 다시 한번 색이 덮어씌워져야 할 것 같아 <strong>Colorscheme</strong> 보다 <strong>아래쪽</strong>에 코드를 작성했어요.</p>
<p>그럼 아래 코드를 <code>.vimrc</code> 파일에 입력해볼게요. <code>Normal</code> 은 기본 배경을 <code>LineNr</code> 은 좌에 넘버링 된 곳의 배경을 바꾼다는 뜻입니다.</p>
<pre><code class="language-console" data-lang="console">highlight Normal ctermfg = white ctermbg = NONE
highligh LineNr ctermbg = NONE
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/91652993-4c77a880-ead7-11ea-8408-7febaaed68b1.png" alt="Custom Color 적용 후"></p>
<p>오!! 만족스러워졌어요. 처음 상태와 비교해보면 정말 다른 프로그램이라고 생각이 들 정도로 드라마틱하게 달라진 느낌에요 ㅎㅎㅎ 이왕 <strong>Vim</strong> 을 자주 사용할거라면 이렇게 이쁘게 세팅해놓고 사용하는게 가독성 측면에서나 여러모로 더 좋잖아요??</p>
<p>오늘도 이렇게 끝까지 읽어주셔서 감사합니다. 이쁜 <strong>Colorscheme</strong> 을 즐기면서 더 열심히 공부해보아요~</p>
]]></content>
        </item>
        
        <item>
            <title>Vim - Vundle 및 Markdown Plugin 설치하기</title>
            <link>https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/</link>
            <pubDate>Sat, 29 Aug 2020 16:12:11 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200829-vim-vundle-markdown-plugin-installation/</guid>
            <description>제가 Tistory 로 블로그를 시작했지만 Hugo 로 넘어오게된 이유가 몇 가지 있는데 그 중 가장 큰 비중을 차지하는 두가지가 하나는 Tistory 가 Markdown 을 제대로 지원하지 않고, 코드블럭 처리를 고려하면 글을 Tistory 전용 에디터에서 쓰는 것이 반 강제되는 것이었는데요. Tistory 에디터로 글을 쓰다보면 텍스트에 기본적인 강조 처리하는 것들도 전부 마우스로 처리해야하는데 매번 키보드에서 손이 움직이는게 여간 성가신 것이 아니었거든요. 그래서 포스트를 작성하는 와중에 이 모든걸 Terminal 에서 처리할 수 있으면 어떨까 하는 생각을 종종하게 되었고 결국 Hugo 로 블로그를 관리하는 것으로 결정했습니다.</description>
            <content type="html"><![CDATA[<p>제가 Tistory 로 블로그를 시작했지만 <strong>Hugo</strong> 로 넘어오게된 이유가 몇 가지 있는데 그 중 가장 큰 비중을 차지하는 두가지가 하나는 Tistory 가 <strong>Markdown</strong> 을 제대로 지원하지 않고, <code>코드블럭</code> 처리를 고려하면 글을 Tistory 전용 에디터에서 쓰는 것이 반 강제되는 것이었는데요. Tistory 에디터로 글을 쓰다보면 텍스트에 기본적인 강조 처리하는 것들도 전부 마우스로 처리해야하는데 매번 키보드에서 손이 움직이는게 여간 성가신 것이 아니었거든요. 그래서 포스트를 작성하는 와중에 이 모든걸 Terminal 에서 처리할 수 있으면 어떨까 하는 생각을 종종하게 되었고 결국 <strong>Hugo</strong> 로 블로그를 관리하는 것으로 결정했습니다.</p>
<p>그런데 막상 이전을 하고 포스트를 작성하다보니 또다른 문제를 직면하게 되었는데 Termnial 에서 글을 작성할 때 에디터로 사용했던 <strong>Vim</strong> 은 Markdown Highlighting 을 지원하지 않아 글이 조금만 길어져도 가독성이 많이 떨어졌습니다. 블로그를 운영하면서 동시에 Vim 사용까지 익숙해지고자하는 욕심이 있었는데 <strong>Markdown Highlighting</strong> 미지원과 실시간으로 결과물을 확인할 수 있는 <strong>Preview</strong> 기능이 없다는 단점을 극복하지 못하고 결국 최근 포스트들은 전부 <strong>VSCode</strong> 로 작성하는 상태가 되어버렸죠 ㅎㅎ</p>
<p>물론 <strong>VSCode</strong> 정도면 정말 좋은 에디터라 불만은 없었지만 그래도 Terminal 에서 <strong>Vim</strong> 으로 글을 쓰는게 더 개발자스럽고 간지나잖아요? ㅋㅋㅋㅋ 그래서 오늘은 <strong>Vim</strong> 에 Plugin 을 설치해서 <strong>Markdown Highlighting</strong> 과 <strong>Preview</strong> 를 실시간으로 확인할 수 있도록 공부해보겠습니다.</p>
<hr>
<h2 id="vundle-설치하기">Vundle 설치하기</h2>
<p><strong>Vim</strong> 에 Plugin 을 설치하기 위해서는 Plugin 을 쉽게 설치할 수 있도록 도와주는 <strong>Vundle</strong> 이라는 Tool 이 있습니다. <a href="https://github.com/VundleVim/Vundle.vim">Vundle Github Page</a> 에 접속해 가이드대로 차근차근 설치를 진행해볼게요.</p>
<p>Installation 쪽을 확인해보면 아래 커맨드로 Repository 를 Clone 하라고 되어있네요. 시키는대로 합니다 ㅎㅎ</p>
<pre><code class="language-console" data-lang="console">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/91631739-cbf17300-ea16-11ea-9e52-6cd1aba195e2.png" alt="Repo 를 Clone 한 스크린샷"></p>
<p>이 다음으로는 <code>.vimrc</code> 파일에 설정 정보를 복사해서 넣어주어야 하는데요. 이 파일은 Vim 의 설정을 관리하는 파일이라고 생각하면 됩니다. 보통 이 파일이 macOS 기준으로 Home 디렉토리에 있어야한다고 하는데 왜인지 저는 없었습니다. 그래서 그냥 새롭게 만들어주기로 했어요. <del>설마 꼬이는건 아니겠지??</del></p>
<p><img src="https://user-images.githubusercontent.com/41736472/91631993-b0876780-ea18-11ea-9927-1201d86bf2b6.png" alt=".vimrc 파일 생성"></p>
<p>이렇게 새로운 파일을 생성하고 다음 설정값을 복사해 입력합니다.</p>
<pre><code class="language-console" data-lang="console">set nocompatible              &quot; be iMproved, required
filetype off                  &quot; required

&quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&quot; alternatively, pass a path where Vundle should install plugins
&quot;call vundle#begin('~/some/path/here')

&quot; let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

&quot; The following are examples of different formats supported.
&quot; Keep Plugin commands between vundle#begin/end.
&quot; plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
&quot; plugin from http://vim-scripts.org/vim/scripts.html
&quot; Plugin 'L9'
&quot; Git plugin not hosted on GitHub
&quot; git repos on your local machine (i.e. when working on your own plugin)
Plugin 'file:///home/gmarik/path/to/plugin'
&quot; The sparkup vim script is in a subdirectory of this repo called vim.
&quot; Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
&quot; Install L9 and avoid a Naming conflict if you've already installed a
&quot; different version somewhere else.
&quot; Plugin 'ascenator/L9', {'name': 'newL9'}

&quot; All of your Plugins must be added before the following line
call vundle#end()            &quot; required
filetype plugin indent on    &quot; required
&quot; To ignore plugin indent changes, instead use:
&quot;filetype plugin on
&quot;
&quot; Brief help
&quot; :PluginList       - lists configured plugins
&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache
&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
&quot;
&quot; see :h vundle for more details or wiki for FAQ
&quot; Put your non-Plugin stuff after this line
</code></pre><p>꼭 <strong>저장</strong>하고 Vim 을 종료하세요. 그리고 터미널에서 Vim 을 실행합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632179-1a544100-ea1a-11ea-8ba6-c1b337f57bcf.png" alt="Terminal 에서 Vim 실행"></p>
<p>그럼 이제 아래와 같은 화면이 뜰텐데 <code>:</code> 으로 명령모드에 진입하고 <code>PluginInstall</code> 을 입력합니다. Terminal 에서 바로 설치하는 방법으로는 <code>vim +PluginInstall +qall</code> 이렇게 커맨드를 입력하면 된다고 합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632154-ea0ca280-ea19-11ea-92a2-89d1f5e3f7e6.png" alt="Vim 실행화면"></p>
<p>설치 진행 중에는 아래와 같은 화면을 볼 수 있을텐데 설치과정에 시간이 조금 필요하니 잠시 기다려야 하더라고요. 저는 뭔지 모르겠는데 에러가 하나 발생했어요 ㅠㅠ 별거 아니길 바라고 일단 계속 진행해 볼게요.</p>
<blockquote>
<p>Update: Error 메세지에 대해 확인해보니 이 Plugin 은 설치할 필요가 없는 것이라고 하네요. 위 코드블럭에서는 해당 내용을 삭제해두었습니다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/41736472/91632155-ec6efc80-ea19-11ea-8c34-f3c2ff0b2e11.png" alt="Plugin 설치화면"></p>
<hr>
<h2 id="plugin-설치하기">Plugin 설치하기</h2>
<p>Vundle 설치를 마쳤으니 이제 본격적으로 Plugin 설치를 시작해볼게요.</p>
<h3 id="vim-markdown">Vim Markdown</h3>
<p>먼저 <strong>Plastic Boy</strong> 의 <a href="https://github.com/plasticboy/vim-markdown">Vim Markdown</a> 을 설치하겠습니다. Markdown Highlighting Plugin 중에서는 이게 가장 유명한 것 같아요.</p>
<p><code>.vimrc</code> 파일을 열어 아래 코드를 입력하세요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
</code></pre><p>저는 이렇게 입력했습니다. <code>&quot;</code> 를 앞에 붙이면 코멘트 처리되는 것 같아요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632994-d3694a00-ea1f-11ea-8c71-d65dc1a7dc51.png" alt="Plugin 코드 입력"></p>
<p>그리고 조금 전과 같이 <strong>Vim</strong> 을 실행하고 커맨드 모드에서 <code>PluginInstall</code> 을 실행했습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91632998-da905800-ea1f-11ea-9562-8aa3acb8d693.png" alt="Plugin 설치과정"></p>
<p>설치가 끝난 것 같으니 바로 <strong>Markdown</strong> 파일을 하나 열어볼게요. 두근두근!! 오호~ 진짜로 못보던 효과가 생겼어요. 제목을 기준으로 글을 접고 라인 수를 표시해주는 것 같네요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91633001-dd8b4880-ea1f-11ea-9856-0809cf8aacce.png" alt="Markdown 파일 실행"></p>
<p>어떻게 펼치는지를 몰라 다시 README 를 읽어보았더니 Folding 을 하나씩 펼치려면 <code>zr</code>, 한번에 전부 펼치려면 <code>zR</code> 커맨드를 사용하라고 하네요. 바로 펼쳐보았습니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91633003-e0863900-ea1f-11ea-87d6-38636fae98db.png" alt="Markdown 파일 예시"></p>
<p>엥.. 아무것도 변한게 없어요. 접어주기만하고 왜 색은 안변한건지&hellip; 역시 쉽게 넘어가주지 않네요 ㅠ</p>
<p>README 파일을 계속 읽어보니 <strong>Syntax Extension</strong> 은 기본적으로 비활성화되어 있다고 합니다. 아무래도 이게 HighLighting 을 도와주는 기능같은데 비활성화라니&hellip; 그럼 이걸 설치한 의미가 없잖아&hellip; 바로 활성화 시켜봐야겠어요.</p>
<p>일단 <code>.vimrc</code> 에서 Plugin 에 대한 세부설정을 건드릴 수가 있다고 하네요. 다시 파일을 열어 Folding 비활성화, YAML, TOML, JSON Syntax 를 활성화 시켜보겠습니다. YAML 과 TOML 은 Hugo 에서 사용하는 Front Matter 에 관련된 설정이므로 Hugo 블로그를 사용하지 않는 분들은 빼고 설정해도 됩니다.</p>
<pre><code class="language-console" data-lang="console">&quot; Vim SYNTAX EXTENSIONS
&quot; Disable Folding
let g:vim_markdown_folding_disabled = 1
&quot; YAML Front Matter
let g:vim_markdown_frontmatter = 1
&quot; TOML Front Matter
let g:vim_markdown_toml_frontmatter = 1
&quot; JSON Front Matter
let g:vim_markdown_json_frontmatter = 1
</code></pre><p>파일의 맨 아래쪽에 코드를 입력하고 저장한 뒤에 다시 MD 파일을 열어볼게요. Folding 설정은 적용이 잘 되서 더 이상 글이 접힌채로 시작하는 것이 아니라 설치하기 전처럼 한번에 다 보이는 형태로 나왔는데 그 외에는 어떤 색상도 적용되지가 않았어요. 이번엔 또 뭐가 문제지&hellip;</p>
<p>일단 TOML 및 JSON 은 단순히 활성화만 시킨다고 Syntax 색상이 적용되는 것이 아니라 추가적인 Plugin 이 또 필요하다고 합니다. 그럼 얘네들을 또 설치해볼까요. <del>뭐가 이렇게 많이 필요한거야!!</del></p>
<h4 id="toml-plugin-설치">TOML PlugIn 설치</h4>
<p>TOML Syntax 는 <a href="https://github.com/cespare/vim-toml">vim-toml</a> 을 설치하면 된다고 합니다. README 에서 시키는대로 해봅니다. 먼저 폴더를 하나 만들어주고 Git Clone 을 할게요.</p>
<pre><code class="language-console" data-lang="console">mkdir -p ~/.vim/pack/plugins/start
cd ~/.vim/pack/plugins/start
git clone https://github.com/cespare/vim-toml.git
</code></pre><p>그리고 <code>.vimrc</code> 파일에 <code>Plugin 'cespare/vim-toml'</code> 을 입력하고 <code>:PluginInstall</code> 까지 해줍니다. <del>이제 익숙해져버렸어..</del></p>
<pre><code class="language-console" data-lang="console">Plugin 'cespare/vim-toml'
</code></pre><p>근데 하고보니까 굳이 Clone 은 할 필요가 없었던 것 같아요. <strong>Vundle</strong> 이 알아서 설치해주는 것 같은데&hellip;</p>
<h4 id="json-plugin-설치">JSON PlugIn 설치</h4>
<p>JSON Syntax 는 <a href="https://github.com/elzr/vim-json">Better JSON for VIM</a>의 README 를 참고해 아래 코드를 <code>.vimrc</code> 에 입력했어요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'elzr/vim-json'
</code></pre><p>이렇게하고 다시 MD 파일을 열어보았으나&hellip; 아직도 아무 색상도 보이지 않네요 ㅠㅠ 이제 점점 지쳐갑니다&hellip; Vim 에 Markdown Highligting 을 적용하는게 이렇게 힘들줄이야&hellip; 그래도 여기까지 왔으니 포기할 수 없어요. 또 뭐가 빠졌길래 이러는건지 찾아볼게요.</p>
<p>휴&hellip; 무려 3시간의 삽질 끝에 해결법을 알아냈습니다. 너무 간단한 문제였는데 도대체 답을 찾기가 어려웠어요. 분명히 정상적으로 다 설치한 것 같고 접기 기능도 정상적으로 작동하는데 색상만 표시되지 않던 이유는 Vim 에서 Syntax 설정이 꺼져있어서 그런거였어요. <del>이 간단한 문제 찾는데 3시간을&hellip;</del>~</p>
<p><strong>Vim</strong> 에서 <code>:</code> 를 눌러 커맨드 모드로 진입하고 <code>syntax on</code> 을 입력하면 끝입니다. 참고로 Default 값이 off 로 되어있어 매번 파일을 열 때마다 Syntax 를 적용해주기 번거로우니 <code>.vimrc</code> 파일에 <code>syntax on</code> 을 입력해두면 이후부터는 항상 Syntax Highliting 이 적용된 채로 파일이 열리게 됩니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91637569-6ae09400-ea44-11ea-8c4b-984a5d643b1e.png" alt="Syntax 가 활성화된 Vim"></p>
<p>색이 이쁘지는 않지만 그래도 정상적으로 하이라이팅 되고 있어요. 해냈습니다!! YAY!!!</p>
<hr>
<h3 id="markdown-preview">Markdown Preview</h3>
<p>힘들었지만 성공적하고나니 그래도 보람이 있어요 ㅎㅎ 하지만 우리는 아직 한가지를 더 설치해야합니다. <del>이번엔 제발 쉽다고해줘 ㅠㅠ</del> 바로 우리가 작성하는 MD 파일의 결과물을 실시간으로 확인할 수 있게 도와주는 <strong>Preview</strong> Plugin 입니다. 그럼 같이 한번 후딱 설치해볼게요.</p>
<p>이번에 설치할 플러그인은 <a href="https://github.com/JamshedVesuna/vim-markdown-preview">Markdown Preview</a> 에서 확인할 수 있습니다. 이제 Vundle 사용에 익숙해졌으니 빠르게 진행할게요.</p>
<pre><code class="language-console" data-lang="console">Plugin 'JamshedVesuna/vim-markdown-preview'
</code></pre><p><code>.vimrc</code> 에 입력하고 바로 설치까지 진행했습니다. Markdown 파일을 편집할 때 Control + P 를 누르면 Defualt 브라우저로 창이 열리면서 Markdown 이 적용된 결과물을 보여준다고하여 설치를 마치자마자 바로 MD 파일을 열어 실행해보았습니다. 그리고 결과는!!</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91637973-1db1f180-ea47-11ea-8d22-b8e2a3954fd0.png" alt="빈 화면"></p>
<p>실패&hellip; 이번에도 역시 저에게 시련을 안겨주는군요. 어디 한번 해결해봅시다. 이것 저것 알아보다가 Preview 를 정상적으로 표시하기 위해서는 <strong>Markdown</strong> 이나 <strong>Grip</strong> 을 추가로 깔아야한다는 것을 알게되었습니다. <del>아니 이 정도면 그냥 VSCode 쓰는 것도..ㅋㅋㅋ</del>~</p>
<p>근데 저희는 지금 Markdown 을 사용하는거니까 왠지 이름도 Markdown 인걸 설치하고 싶더라고요. 그래서 <strong>Hombrew</strong> 를 통해 Markdown 을 설치해보았습니다. 그리고 실행해보니!!</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91638428-90709c00-ea4a-11ea-8f6b-0a8731cdbbed.png" alt="한글이 깨지는 Markdown"></p>
<p>아&hellip; 또 문제가 발생했어요. 역시 한번에 쉽게가면 재미가 없죠. 인코딩 문제인 것 같아 설정을 조금 건드려보았으나 번번히 실패하고 결국 <strong>Grip</strong> 을 깔았습니다. 이것도 Homebrew 에서 설치를 지원하더라고요. 역시 Homebrew 는 짱이에요. 말이 나온 김에 혹시 Homebrew 가 무엇인지 아직 잘 모르는 분들은 <a href="https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/">Homebrew 설치 및 기본 사용법 익히기</a> 포스팅을 참고해주세요.</p>
<pre><code class="language-console" data-lang="console">brew install grip
</code></pre><p>하지만 Grip 의 경우에는 <code>.vimrc</code> 에 추가적으로 설정을 하나 더 추가 입력해야합니다.</p>
<pre><code class="language-console" data-lang="console">let vim_markdown_preview_github = 1
</code></pre><p>여기까지하고 Control + P 를 눌러보니 markdown 이 설치되었을 때와는 다르게 Terminal 아래쪽에 <code>call Vim_Markdown_Preview()</code> 라는 커맨드가 보이며 브라우저가 열리네요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91638429-91a1c900-ea4a-11ea-8878-c9ca953e41c5.png" alt="Preview 가 정상적으로 실행된 모습"></p>
<p>그리고 결국 성공입니다!!! 정말 오래걸리고 힘들었지만 성공해냈어요 ㅎㅎㅎ 이제 제 블로그 포스팅을 Vim 에서 작업하고 올릴 수 있게되었다구요!! 기나긴 삽질의 시간이었지만 앞으로 잘 활용해서 지금 삽질한 시간 그 이상의 결과물을 뽑아내겠습니다! 그럼 오늘도 끝까지 읽으신 모든 분들 수고 많으셨습니다!!</p>
]]></content>
        </item>
        
        <item>
            <title>Homebrew - 설치 및 기본 사용법 익히기</title>
            <link>https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/</link>
            <pubDate>Sun, 23 Aug 2020 16:48:19 +0900</pubDate>
            
            <guid>https://kasroid.github.io/posts/developertools/20200823-homebrew-installation-basics/</guid>
            <description>오늘 소개할 Homebrew 는 여러가지 종류의 프로그램을 설치하고 삭제할 수 있게 도와주는 툴입니다. 제가 개발자로 커리어를 전환하고나서 알게된 가장 유용한 툴이고 가장 애용하는 툴이기도 합니다. 조금만 익숙해지면 정말 편리하고 강력한 툴이기 때문에 시간이 나면 언젠가 꼭 한번 소개하고 싶었는데요. 그게 오늘이네요! ㅎㅎ
Homebrew 는 macOS 의 Package Manager 입니다. 쉽게 말해서 일종의 프로그램 관리자 같은 역할이라 생각하면 좋을 것 같아요. 왠만한 모든 상용 프로그램의 설치 및 삭제, 그리고 업데이트 관리까지 Terminal 을 통해 Homebrew 하나로 해결할 수 있습니다.</description>
            <content type="html"><![CDATA[<p>오늘 소개할 <strong>Homebrew</strong> 는 여러가지 종류의 프로그램을 설치하고 삭제할 수 있게 도와주는 툴입니다. 제가 개발자로 커리어를 전환하고나서 알게된 가장 유용한 툴이고 가장 애용하는 툴이기도 합니다. 조금만 익숙해지면 정말 편리하고 강력한 툴이기 때문에 시간이 나면 언젠가 꼭 한번 소개하고 싶었는데요. 그게 오늘이네요! ㅎㅎ</p>
<p>Homebrew 는 <strong>macOS</strong> 의 <strong>Package Manager</strong> 입니다. 쉽게 말해서 일종의 프로그램 관리자 같은 역할이라 생각하면 좋을 것 같아요. 왠만한 모든 상용 프로그램의 설치 및 삭제, 그리고 업데이트 관리까지 Terminal 을 통해 Homebrew 하나로 해결할 수 있습니다. Homebrew 를 통해 프로그램을 설치하는게 편해봤자 얼마나 더 편하다고 굳이 이렇게 새로운 것을 배우기까지 해야하는지 의문이 들 수 있어요. 그래서 Homebrew 를 사용할 때와 사용하지 않을 때 우리가 프로그램을 설치하고 사용하기까지 거치는 과정들을 나열하고 차이점을 비교해 보겠습니다.</p>
<ol>
<li>구글 접속</li>
<li>검색</li>
<li>프로그램을 다운받을 수 있는 홈페이지 접속</li>
<li>홈페이지에서 다운로드 링크를 찾기</li>
<li>프로그램 다운로드</li>
<li>다운로드 폴더에 들어가서 설치파일 실행</li>
<li>설치과정 진행</li>
<li>설치가 완료되고나면 다운로드 폴더에서 설치 파일 제거</li>
</ol>
<p>대부분 이런 과정들을 거쳐 프로그램을 설치하죠? 프로그램을 한개만 설치할 때는 이렇게 설치하는 방법도 나쁘진 않아요. 하지만 만약 10개를 설치해야한다면 어떨까요? 20개라면? 프로그램 설치가 비록 어려운 부분은 없지만 정말 귀찮은 일이지요. Homebrew 를 사용하면 최대 단 2번의 과정으로 위 과정들을 모두 끝낼 수 있습니다.</p>
<ol>
<li>다운로드받을 프로그램명 검색(optional)</li>
<li>다운로드 명령 실행</li>
</ol>
<p>정말 이보다 간단할 수가 있을까요? 지금은 프로그램을 검색하는 과정까지 포함을 했지만 사실 우리가 다운받을 프로그램의 이름을 정확히 알고 있는 경우에는 검색조차도 필요가 없습니다. Terminal 에 커맨드 단 한줄 입력만으로 새로운 프로그램을 사용할 준비가 끝납니다.</p>
<p>Homebrew 로 단순히 프로그램을 하나씩 설치하고 제거하는 것은 물론이고 만약 내가 설치해놓은 프로그램들을 리스트 형태로 만들어 두었다면(리스트를 만드는 기능도 Homebrew 에서 제공합니다) 한 번에 프로그램 수십개를 설치할 수도 있습니다. 리스트에 적힌 모든 목륵을 설치하라는 커맨드를 입력하고 우리는 커피 한잔하고 오면 프로그램들이 모두 설치되어 있는 것이죠 ㅎㅎㅎ</p>
<p>어떤가요? 듣기만해도 매력이 뿜뿜하고 배우고 싶어지지 않나요?? ㅋㅋㅋㅋ</p>
<hr>
<h2 id="homebrew-설치하기">Homebrew 설치하기</h2>
<p>이정도면 제 <strong>Homebrew</strong> 영업에 어느정도 넘어왔을테니 바로 설치를 한번 시작해볼게요. <del>안 넘어왔어도 그냥 보세요 ㅋㅋ</del></p>
<p>먼저 Homebrew <a href="https://brew.sh">공식 홈페이지</a> 에 접속합니다.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/90974084-e2a15100-e562-11ea-900d-d8b0ae41297d.png" alt="Homebrew Official Website"></p>
<p>이렇게 생긴 홈페이지가 보이면 <strong>Install Homebrew</strong> 라고 적힌 부분의 아래 명령어를 <strong>Terminal</strong> 에서 실행합니다.</p>
<pre><code class="language-Console" data-lang="Console">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;
</code></pre><p>만약 Terminal 에 자물쇠 모양이 나타나며 비밀번호를 요구할 경우 비밀번호를 입력해주세요. 우리가 평소 웹사이트에서 비빌번호를 입력할 때처럼 실시간으로 비밀번호가 입력되는 상황이 Terminal 에서는 보이지 않지만 실제로는 비밀번호가 입력되고 있는 상황이니 전부 입력하고 리턴키를 누르면 됩니다.</p>
<hr>
<h2 id="homebrew-사용법-익히기">Homebrew 사용법 익히기</h2>
<p>Homebrew 설치를 정상적으로 마쳤다면 이제 Terminal 에서 <code>brew</code> 명령어를 사용할 수 있게 됩니다. 그럼 Terminal 에 <code>brew</code> 라고 한번 입력해볼게요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91327134-1b118b00-e800-11ea-8620-0f5c9194a8ee.png" alt="Typed &lsquo;brew&rsquo; in Terminal"></p>
<p>여러가지 명령어들이 많이 뜨네요 ㅎㅎ 생소한 명령어다보니 처음에는 조금 어렵게 느껴지더라도 그때그때 필요할 때 한번씩 찾아 쓰다보면 명령어들이 전부 쉬운편이라 금방 외워서 사용하게 되니 일부러 외울 필요는 없습니다. <del>우리는 영어 한마디 제대로 못하던 시절에도 수 많은 스타크래프트 치트키를 외워서 사용했었습니다 ㅎㅎ</del></p>
<hr>
<h3 id="프로그램-검색하기">프로그램 검색하기</h3>
<p><strong>Homebrew</strong> 로 프로그램을 설치하기 위해서는 먼저 우리가 원하는 프로그램의 명칭을 정확하게 알아야 합니다. 프로그램 이름이 단어 하나로 구성된 경우에는 대부분 그 자체로 프로그램명이 되지만 이름에 띄어쓰기가 있는 경우 표기 방법이 조금 다를 수 있으니 먼저 검색을 한번 해보는 것이 좋습니다. 그럼 이번에는 예제로 구글 크롬을 검색해보도록 할게요.</p>
<pre><code class="language-Console" data-lang="Console">brew search google chrome
</code></pre><p><img src="https://user-images.githubusercontent.com/41736472/91327195-2fee1e80-e800-11ea-87af-edeea42c8994.png" alt="Searched Google Chrome via Homebrew"></p>
<p>검색 결과가 총 4개가 있네요. 딱 봐도 첫번째 결과가 우리가 찾는 구글 크롬인 것 같아요. 꽤 정확한 결과값이므로 이 단어로 바로 설치를 진행해도 되지만 정말 혹시 모르는 경우를 대비해서 이게 정확한 곳에서 다운로드 받는 것인지 확인해 볼 수 있습니다.</p>
<pre><code class="language-Console" data-lang="Console">brew cask home google-chrome
</code></pre><p><code>cask</code> 는 상용 프로그램이라는 뜻으로 일반 홈페이지에서 직접 다운로드 받는 프로그램을 의미합니다. 구글 크롬은 App Store 다운받거나 Terminal 에서 Tool 의 형태로 제공되는 것이 아닌 일반 브라우저에서 다운로드 받아 사용하는 상용 프로그램이니까 <code>cask</code> 에 속합니다. 그리고 <code>home</code> 은 다운받을 수 있는 홈페이지를 뜻합니다. 즉 구글 크롬을 다운받을 수 있는 홈페이지를 열라는 뜻이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91327244-409e9480-e800-11ea-8669-846d77935901.png" alt="Google Chrome Download Page"></p>
<p>우리가 딱 원하는 페이지가 떳어요!! 그럼 이제 <code>google-chrome</code> 을 사용해 설치해볼게요.</p>
<hr>
<h3 id="프로그램-설치하기">프로그램 설치하기</h3>
<p>설치방법은 매우 간단합니다.</p>
<pre><code class="language-Console" data-lang="Console">brew cask install google-chrome
</code></pre><p>잠깐 기다려주고나면 짜잔!! 설치가 모두 끝났고 이제 정상적으로 프로그램을 사용할 수 있게되었습니다.</p>
<hr>
<h3 id="설치된-프로그램-확인하기">설치된 프로그램 확인하기</h3>
<p>우리가 설치한 프로그램의 목록도 brew 를 통해 간단히 나열하고 확인할 수가 있습니다. 다음 커맨드를 입력해 보세요.</p>
<pre><code class="language-Console" data-lang="Console">brew cask list
</code></pre><p>내 컴퓨터에 설치되어 있는 일반 프로그램의 리스트를 달라는 뜻이에요.</p>
<p><img src="https://user-images.githubusercontent.com/41736472/91327307-4dbb8380-e800-11ea-9fa4-23be49d76475.png" alt="Installed Program List"></p>
<p>방금 설치한 구글 크롬이 목록에 표시된다면 정상적으로 설치가 되었다는 뜻입니다. 저는 모든 프로그램들을 Homebrew 로 관리하고 있어서 이렇게 많이 뜬답니다 ㅎㅎㅎ</p>
<h3 id="프로그램-삭제하기">프로그램 삭제하기</h3>
<p>설치하는 방법을 알았으니 삭제는 당연히 세트메뉴로 배워야겠죠?</p>
<pre><code class="language-Console" data-lang="Console">brew uninstall google-chrome
</code></pre><p>네 끝입니다. 이렇게 <strong>Homebrew</strong> 가 프로그램 관리자 역할을 하며 우리 컴퓨터에 설치되어 있거나 설치할 모든 프로그램을 관리해주기 때문에 우리는 쓸데없는 시간낭비를 줄이고 다른 것들에 더 집중할 수 있습니다.</p>
<p>다음 포스팅에서는 <strong>Homebrew</strong> 를 통해 내가 사용하는 프로그램들을 한번에 업데이트하는 방법과 내 컴퓨터에 깔려있는 모든 프로그램(Homebrew 를 통해 설치한)들의 리스트를 텍스트 파일형태로 저장하고 그 파일을 사용해 모든 프로그램을 한번에 설치할 수 있는 방법을 알아보겠습니다.</p>
<p>Terminal 을 통해 프로그램을 설치하고 관리하는 것이 처음에는 익숙하지 않아 조금은 거부감이 들고 부담스러울 수 있지만 그냥 쓰다보면 정말 어려운거 없고 훨씬 편하다는 사실을 알게될거에요. 그럼 여러분들도 <strong>Homebrew</strong> 꼭 사용하길 바라겠습니다!</p>
]]></content>
        </item>
        
    </channel>
</rss>
