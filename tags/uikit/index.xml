<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>UIKit on SDY - Developer Kas</title>
    <link>https://kasroid.github.io/tags/uikit/</link>
    <description>Recent content in UIKit on SDY - Developer Kas</description>
    <image>
      <url>https://kasroid.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kasroid.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 07 Nov 2020 10:42:03 +0900</lastBuildDate><atom:link href="https://kasroid.github.io/tags/uikit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UIKit - Date Picker 를 이용해 Timer 구현하기</title>
      <link>https://kasroid.github.io/posts/ios/20201107-uikit-timer-with-date-picker/</link>
      <pubDate>Sat, 07 Nov 2020 10:42:03 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201107-uikit-timer-with-date-picker/</guid>
      <description>본 포스팅은 다음 버전을 기준으로 작성되었습니다.
Swift 5.3 iOS 14.1 Intro 오늘은 DatePicker 에서 제공하는 Mode 중 하나인 .countDownTimer 를 사용해 실제로 구동 가능한 타이머를 만들어보겠습니다.
Prerequisite 타이머 구현 및 실습을 위해 DatePicker 를 배치하고, 상단에는 타이머의 남은 시간을 표시할 UILabel 을, 하단에는 사용자가 설정한 시간을 기준으로 타이머 구동을 시작할 UIButton 을 배치했습니다.
import UIKit class CountDownViewController: UIViewController { let label = UILabel() let picker = UIDatePicker() let button = UIButton(type: .</description>
    </item>
    
    <item>
      <title>UIKit - Date Picker 사용하기, iOS 14 변경사항 정리</title>
      <link>https://kasroid.github.io/posts/ios/20201030-uikit-date-picker/</link>
      <pubDate>Fri, 30 Oct 2020 17:12:51 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201030-uikit-date-picker/</guid>
      <description>본 포스팅은 다음 버전을 기준으로 작성되었습니다.
Swift 5.3 iOS 14.1 Intro 이전 포스트에서 Date 에 관해 알아보았으니 이번에는 사용자가 아이폰에서 날짜를 고를 때 자주 마주치게되는 인터페이스 중 하나인 DatePicker 에 대해 같이 공부해보겠습니다.
iOS 14 가 업데이트 되면서 기존까지와는 다른 스타일의 DatePicker 가 추가되었는데요. 아이폰 기본 알람앱을 자주 사용하는 분이라면 이미 알고 계셨을거에요 ㅎㅎ 아무튼 공부하는 김에 이 새로운 스타일의 DatePicker 도 함께 알아보도록 할게요.
Prerequisite 먼저 실습을 위해 간단하게 ViewController 위에 DatePicker 를 올려놓았습니다.</description>
    </item>
    
    <item>
      <title>UIKit - Calendar 와 Date 기초 익히기</title>
      <link>https://kasroid.github.io/posts/ios/20201026-uikit-handling-date/</link>
      <pubDate>Mon, 26 Oct 2020 22:57:17 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201026-uikit-handling-date/</guid>
      <description>Intro App 을 만들다보면 날짜를 다뤄야하는 상황을 종종 마주치게 되는데요. 그동안은 원하는 정보를 적당히 구글에서 찾아 문제를 해결하고 따로 공부하는 시간을 가져본 적이 없었습니다. 날짜는 여러가지 앱에서 사용되는 빈도가 높은만큼 제대로 공부하고 지나가면 앞으로 도움이 많이 될 것 같아 공부해 봅니다.
Prerequisite Cocoa Touch Framework 에는 날짜를 구현할 수 있는 다양한 방법이 존재하는데요. Swift 언어 이전에는 class 타입으로 구성되어 있는 구현방식을 제공했습니다. 아마 개발을 시작한지 어느정도 되었다면 자주 보았을 만한 NS 접두어로 시작하는 것들이 바로 그것이에요 ㅎㅎ</description>
    </item>
    
    <item>
      <title>UIKit - Delegate Pattern 이해하기</title>
      <link>https://kasroid.github.io/posts/ios/20201010-uikit-delegate-pattern/</link>
      <pubDate>Sat, 10 Oct 2020 21:34:44 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20201010-uikit-delegate-pattern/</guid>
      <description>본 포스팅은 Swift 5.3 기준으로 작성되었습니다.
Intro 약 두달간 진행하던 Market Kurly 서비스를 클론하는 프로젝트가 끝나, 오늘부터는 기존에 어느정도 공부하고 사용도하고 있었지만 완벽하게 숙지를 한 것은 아닌 부분들을 다시 복습하고 이해도를 높이는 것을 목표로 한동안 공부해보려고 합니다. 그럼 오늘은 처음 배울 때 이해하기 까다로웠던 부분 중 하나인 Delegate Pattern 에 대해 복습하는 시간을 가져보도록 하겠습니다. iOS 개발 에서는 정말 자주 쓰이고 중요한 개념이므로 여러분들도 혹시 아직 완벽히 이해한게 아니라면 같이 공부해보도록 해요~</description>
    </item>
    
    <item>
      <title>WebKit - 카카오 우편번호 서비스 구현하기 with UIKit</title>
      <link>https://kasroid.github.io/posts/ios/20200916-webkit-search-address-with-kakao-with-uikit/</link>
      <pubDate>Wed, 16 Sep 2020 19:04:53 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200916-webkit-search-address-with-kakao-with-uikit/</guid>
      <description>본 포스팅은 Swift 5.3 기준으로 작성되었습니다.
Intro 저는 요새 Market Kurly 앱을 클론하는 프로젝트를 진행하고 있는데요. 회원가입 부분에서 Kakao 우편변호 찾기 기능을 지원하더라고요. 사용자로서는 분명히 사용해본 경험이 있는 것 같은데 막상 구현하는 방법은 배운적도 생각해본 적도 없었습니다 ㅎㅎ 어쨌든 중요한건 지금 어떻게든 구현을 해야한다는 것이고, 마켓컬리앱이 아니더라도 회원가입을 필요로하는 서비스라면 많이 지원하고 있는 기능이니까 잘 공부해서 정리해두면 나중에 쓸데가 많을 것 같아 포스팅을 남깁니다.
서비스 확인하기 Kakao 우편번호 서비스 웹페이지 에 접속해보면 평소 우리가 회원가입을 할 때 자주 볼 수 있었던 화면이 하나 보일거에요.</description>
    </item>
    
    <item>
      <title>UIKit - UITextField 입력글자수 제한 및 백스페이스 감지하기</title>
      <link>https://kasroid.github.io/posts/ios/20200914-uitextfield-limits-number-of-text-detecting-backspace-event/</link>
      <pubDate>Mon, 14 Sep 2020 20:03:41 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200914-uitextfield-limits-number-of-text-detecting-backspace-event/</guid>
      <description>Intro UITextField 를 아이디나 비밀번호를 사용자로부터 입력받을 때 사용하게되면 글자수 제한을 두어야하는 경우가 있는데요. 이 때 글자수 입력을 제한할 수 있는 방법에 대해 알아보도록 하겠습니다.
Prerequisite 테스트를 위해 새로운 프로젝트를 하나 생성하고 UITextField 하나를 View 의 중앙에 올려보았습니다.
import UIKit class ViewController: UIViewController { private var textField = UITextField() override func viewDidLoad() { super.viewDidLoad() configureUI() } // MARK: - UI private func configureUI() { setContraints() setAttributes() } private func setAttributes() { textField.</description>
    </item>
    
    <item>
      <title>UIKit - UITableView 셀 크기가 자동으로 세팅되도록 구현하기</title>
      <link>https://kasroid.github.io/posts/ios/20200913-uitableview-self-sizing-cells/</link>
      <pubDate>Tue, 08 Sep 2020 11:14:25 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200913-uitableview-self-sizing-cells/</guid>
      <description>Intro UITableView 를 사용하면서 그동안은 항상 RowHeight 값을 설정하여 높이를 지정해주었었는데요. 이번 프로젝트 진행하면서 셀 크기가 상황에 따라 유동적으로 변하는 케이스가 있어 자동으로 세팅하는 방법에 대해 공부를 해봅니다 ㅎㅎ
Setup 실습을 위해 UITableViewCell 을 상속받은 CustomTableViewCell 을 생성하고 ViewController 위에 TableView 를 올려놓았습니다.
기본 세팅은 아래 코드를 참고하세요.
ViewController.swift
import UIKit class ViewController: UIViewController { // MARK: - Properties private let tableView = UITableView() override func viewDidLoad() { super.viewDidLoad() configureUI() } // MARK: - UI private func configureUI() { view.</description>
    </item>
    
    <item>
      <title>UIKit - UITableView 를 Grouped Style 로 지정했을 때 생기는 Footer 없에기</title>
      <link>https://kasroid.github.io/posts/ios/20200905-uikit-deleting-unwanted-spaces-in-grouped-style-uitableview/</link>
      <pubDate>Sat, 05 Sep 2020 16:17:28 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200905-uikit-deleting-unwanted-spaces-in-grouped-style-uitableview/</guid>
      <description>Intro UITableView 를 별 다른 설정없이 인스턴스화해서 사용해보면 Style 기본값이 .plain 으로 설정되어 있어 Header 를 사용하는 경우 스크롤을 하더라도 바로 사라지는 것이 아니라 계속 남아있게 되는데요. 이것을 해결하려면 tableView 의 Style 을 .grouped 로 지정해주면 Header 가 다른 셀들과 같은 방식으로 스크롤되게 됩니다.
그런데 이렇게 사용하면 문제점이 하나 발생하는데 우리는 Footer 가 필요없고 Header 만 필요한 경우에도 자동적으로 Footer 까지 생성되는 상황이 발생하는거에요. 이것 때문에 골치를 여러번 썩으면서도 공부해서 해결하기보다 바쁘다는 핑계로 여태까지 우회하는 방법으로 해결을 했었거든요.</description>
    </item>
    
    <item>
      <title>Firebase - Sign in with Google 구현하기 with UIKit</title>
      <link>https://kasroid.github.io/posts/ios/20200904-sign-in-with-google-uikit/</link>
      <pubDate>Fri, 04 Sep 2020 22:22:20 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200904-sign-in-with-google-uikit/</guid>
      <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다. · Swift 5.2.4 · Firebase 6.29.0
Intro 이번에는 Google 아이디로 로그인할 수 있도록 구현해볼거에요. Apple 로그인은 Xcode 에서 Native 로 지원이 되지만 Google 로그인은 그렇지 않기 때문에 Firebase 를 사용해야 해서 조금 더 복잡한 편입니다. 그래도 천천히 따라해보시면 문제없을 거에요!
CocoaPods 설치 만약에 여러분이 CocoaPods 를 설치한 적이 없다면 Xcode 프로젝트에 Firebase 를 연동하기 위해 CocoaPods 가 우선적으로 설치되어 있어야합니다. 설치 방법은 CocoaPods - 설치 및 라이브러리 적용하기 포스팅을 참고해주세요.</description>
    </item>
    
    <item>
      <title>System - Sign in With Apple 구현하기 with UIKit</title>
      <link>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-uikit/</link>
      <pubDate>Sat, 29 Aug 2020 11:00:14 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200829-sign-in-with-apple-uikit/</guid>
      <description>본 포스팅은 Swift 5.2.4 기준으로 작성되었습니다.
이번 새로운 프로젝트 진행 중에 소셜 로그인 서비스를 제공하기로 결정되었는데요. 앱에서 소셜 로그인을 하나라도 제공하게 되면 Apple 로그인도 반드시 지원해야 합니다. 요즘 로그인이 필요한 앱들은 웬만하면 소셜 로그인도 지원하는 추세니까 Apple 로그인도 구현해야되고&amp;hellip; 그러니까 지금 구현하는 방법을 알아두면 쓸 일이 많을거에요. 그럼 같이 한번 공부해볼까요~~
Apple Developer Documentation 처음 접하는 내용은 무엇보다 공식문서를 먼저 살펴봐야겠죠!
이런저런 내용이 있긴한데 우리에게 필요한 부분은 App 과 Services 에 유저가 쉽게 로그인 할 수 있도록 도와주는 Framework 라는 정도인 것 같아요.</description>
    </item>
    
    <item>
      <title>Firebase - Xcode 프로젝트와 연동하기</title>
      <link>https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/</link>
      <pubDate>Mon, 10 Aug 2020 01:19:46 +0900</pubDate>
      
      <guid>https://kasroid.github.io/posts/ios/20200810-firebase-importing-to-xcode-project/</guid>
      <description>본 포스팅은 이하 버전을 기준으로 작성되었습니다.
· Firebase 6.29.0
· Swift 5.2.4
Intro Firebase 한 번쯤 들어보지 않으셨나요? 초보 개발자가 모바일 앱을 개발하고 개인 앱 서버를 운영하는데 있어 빠질 수 없는 것이 Firebase 가 아닐까 합니다. 속도에 조금 불만이 있긴 하지만 사실 백엔드를 모르는 개발자가 이렇게 쉽고 간편하게 회원가입부터 데이터 관리까지 할 수 있는 서버를 그것도 일정수준까지는 무료로 운영할 수 있게 해주는 서비스가 또 어디있을까요? 이 서비스가 없었으면 저는 지금 Python 도 같이 배우고 있었을 것 같네요.</description>
    </item>
    
  </channel>
</rss>
